
embedded_exam.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00003cac  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000d4  00000000  00000000  00000114  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000c  00800100  00800100  00003cac  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00003cac  2**0
                  CONTENTS, READONLY
  4 .stack.descriptors.hdr 00000054  00000000  00000000  00003cdb  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000390  00000000  00000000  00003d2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e74  00000000  00000000  000040bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001593  00000000  00000000  0000af33  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000025f9  00000000  00000000  0000c4c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001298  00000000  00000000  0000eac0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000535  00000000  00000000  0000fd58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000548a  00000000  00000000  0001028d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000338  00000000  00000000  00015717  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .text         00000004  00003b6e  00003b6e  00003c82  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00015a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .text.init_DCMOTOR 0000003a  000038c6  000038c6  000039da  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.MOTOR_MOVE 0000003a  00003900  00003900  00003a14  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.MOTOR_STOP 00000020  00003a50  00003a50  00003b64  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.init_KEYPAD 0000009e  000029d4  000029d4  00002ae8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.KEYPAD_get_input 000000d6  00002404  00002404  00002518  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.lcd_cmd 000001c8  00001a0c  00001a0c  00001b20  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.init_lcd8bit 0000023c  00000a44  00000a44  00000b58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.init_lcd4bit 000001ea  00001286  00001286  0000139a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.init_lcd 000000b6  0000271a  0000271a  0000282e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.lcd_char 000001b6  00001bd4  00001bd4  00001ce8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.lcd_clear 0000009e  00002a72  00002a72  00002b86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.lcd_string 000001ea  00001470  00001470  00001584  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.lcd_string_pos 000001d8  00001834  00001834  00001948  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.lcd_delete 000000bc  000025a4  000025a4  000026b8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.lcd_custom_char 000000ba  00002660  00002660  00002774  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .progmemx.data 00000196  000000d4  000000d4  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 31 .text.add_product 000000ec  00001eb6  00001eb6  00001fca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.product_on_screen_list 0000012c  00001d8a  00001d8a  00001e9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .text.enter_bottun 000000ac  00002884  00002884  00002998  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 34 .text.help_screen 00000056  0000330e  0000330e  00003422  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 35 .text.program_start_menu 00000056  00003364  00003364  00003478  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 36 .text.user_add_product 00000206  00000e92  00000e92  00000fa6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 37 .text.config_machine 00000212  00000c80  00000c80  00000d94  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.frist_setup 00000072  00002ff4  00002ff4  00003108  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.pay_screen 000002de  00000766  00000766  0000087a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.move_on_screen 000000e8  00001fa2  00001fa2  000020b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .rodata       00000014  0080010c  00003b80  00003c94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 42 .text.main    000001ee  00001098  00001098  000011ac  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.__vector_21 00000014  00003b26  00003b26  00003c3a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.EEPROM_WRITE_BYTE 00000020  00003a70  00003a70  00003b84  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.EEPROM_READ_BYTE 0000001e  00003a90  00003a90  00003ba4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.__vector_1 00000052  000033ba  000033ba  000034ce  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.__vector_2 00000052  0000340c  0000340c  00003520  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .text.__vector_3 00000052  0000345e  0000345e  00003572  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 49 .text.__vector_4 00000052  000034b0  000034b0  000035c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 50 .text.__vector_5 00000052  00003502  00003502  00003616  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 51 .bss.EXTI_FUNC 0000000a  00800132  00800132  00003cac  2**0
                  ALLOC
 52 .text.PGPIO_PORT_get_register 00000004  00003b72  00003b72  00003c86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 53 .text.GPIO_PIN_mode 00000070  00003066  00003066  0000317a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 54 .text.GPIO_writePIN_value 0000004c  00003836  00003836  0000394a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 55 .text.GPIO_readPIN_value 00000026  00003a04  00003a04  00003b18  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 56 .text.__vector_16 00000052  00003554  00003554  00003668  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 57 .text.__vector_15 00000052  000035a6  000035a6  000036ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 58 .text.__vector_14 00000052  000035f8  000035f8  0000370c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 59 .text.__vector_13 00000052  0000364a  0000364a  0000375e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 60 .text.__vector_12 00000052  0000369c  0000369c  000037b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 61 .text.__vector_11 00000052  000036ee  000036ee  00003802  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 62 .text.__vector_10 0000005a  000031ac  000031ac  000032c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 63 .text.__vector_9 00000052  00003740  00003740  00003854  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 64 .text.__vector_8 00000052  00003792  00003792  000038a6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 65 .text.__vector_7 00000052  000037e4  000037e4  000038f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 66 .bss.timer_call_back_CAP 00000002  0080013c  0080013c  00003cac  2**0
                  ALLOC
 67 .bss.timer_call_back 00000012  00800120  00800120  00003cac  2**0
                  ALLOC
 68 .text.__vector_18 00000058  00003206  00003206  0000331a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 69 .text.__vector_19 00000058  0000325e  0000325e  00003372  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 70 .text.__vector_20 00000058  000032b6  000032b6  000033ca  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 71 .text.libgcc.div 00000044  00003882  00003882  00003996  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 72 .text.libgcc  0000001a  00003aae  00003aae  00003bc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 73 .text.libgcc  00000018  00003ac8  00003ac8  00003bdc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 74 .text.libgcc  00000012  00003b3a  00003b3a  00003c4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 75 .text.libgcc  00000018  00003ae0  00003ae0  00003bf4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 76 .text.__dummy_fini 00000002  00003b7a  00003b7a  00003c8e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 77 .text.__dummy_funcs_on_exit 00000002  00003b7c  00003b7c  00003c90  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 78 .text.__dummy_simulator_exit 00000002  00003b7e  00003b7e  00003c92  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 79 .text.exit    00000016  00003b10  00003b10  00003c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 80 .text.__simple_search_fl 000000e0  00002170  00002170  00002284  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 81 .text.__simple_free 00000078  00002f04  00002f04  00003018  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 82 .bss.__freelist 00000002  0080013e  0080013e  00003cac  2**0
                  ALLOC
 83 .text.__simple_malloc 000000da  00002250  00002250  00002364  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 84 .bss.end.1483 00000002  00800140  00800140  00003cac  2**0
                  ALLOC
 85 .bss.cur.1482 00000002  00800142  00800142  00003cac  2**0
                  ALLOC
 86 .text.__wrap_sprintf 00000026  00003a2a  00003a2a  00003b3e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 87 .text.__fmt_d 000000e6  0000208a  0000208a  0000219e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 88 .text.__fmt_o 000000b4  000027d0  000027d0  000028e4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 89 .text.__fmt_s 0000007a  00002e8a  00002e8a  00002f9e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 90 .progmemx.data.nuls.2781 00000007  00000280  00000280  00000394  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 91 .text.__cvt_u 000000ca  000024da  000024da  000025ee  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 92 .text.__fmt_u 00000090  00002d6a  00002d6a  00002e7e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 93 .text.__fmt_x 000001da  0000165a  0000165a  0000176e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 94 .text.__pop_int 000000da  0000232a  0000232a  0000243e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 95 .text.read_prec_or_width 00000078  00002f7c  00002f7c  00003090  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 96 .text.__out   00000068  00003144  00003144  00003258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 97 .text.__pad   00000096  00002bae  00002bae  00002cc2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 98 .text.__fmt_state 0000009e  00002b10  00002b10  00002c24  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 99 .text.vfpfcnvrt 000004d8  0000028e  0000028e  000003a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
100 .text.__printf_core 00000094  00002c44  00002c44  00002d58  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
101 .progmemx.data.nilstr.2962 00000006  00000287  00000287  0000039b  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
102 .progmemx.data.state_table 00000016  0000026a  0000026a  0000037e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
103 .text.fputc   00000092  00002cd8  00002cd8  00002dec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
104 .text.atoi    00000090  00002dfa  00002dfa  00002f0e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
105 .text.strlen  0000002c  000039d8  000039d8  00003aec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
106 .text.tolower 00000010  00003b5e  00003b5e  00003c72  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
107 .text.toupper 00000012  00003b4c  00003b4c  00003c60  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
108 .text._Exit   00000004  00003b76  00003b76  00003c8a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
109 .text.__expand_heap 0000006e  000030d6  000030d6  000031ea  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
110 .bss.__brkval 00000002  00800144  00800144  00003cac  2**0
                  ALLOC
111 .data.__malloc_heap_end 00000002  00800146  00003b94  00003ca8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
112 .data.__malloc_heap_start 00000002  00800148  00003b96  00003caa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
113 .text.__vsprintf 00000018  00003af8  00003af8  00003c0c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
114 .text.__vsnprintf 000000a4  00002930  00002930  00002a44  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
115 .text.__vfprintf 00000030  000039a8  000039a8  00003abc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
116 .text.libgcc.prologue 00000038  0000393a  0000393a  00003a4e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
117 .text.libgcc.prologue 00000036  00003972  00003972  00003a86  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 40 00 	jmp	0x80	; 0x80 <__ctors_end>
   4:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__vector_1>
   8:	0c 94 06 1a 	jmp	0x340c	; 0x340c <__vector_2>
   c:	0c 94 2f 1a 	jmp	0x345e	; 0x345e <__vector_3>
  10:	0c 94 58 1a 	jmp	0x34b0	; 0x34b0 <__vector_4>
  14:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__vector_5>
  18:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__bad_interrupt>
  1c:	0c 94 f2 1b 	jmp	0x37e4	; 0x37e4 <__vector_7>
  20:	0c 94 c9 1b 	jmp	0x3792	; 0x3792 <__vector_8>
  24:	0c 94 a0 1b 	jmp	0x3740	; 0x3740 <__vector_9>
  28:	0c 94 d6 18 	jmp	0x31ac	; 0x31ac <__vector_10>
  2c:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <__vector_11>
  30:	0c 94 4e 1b 	jmp	0x369c	; 0x369c <__vector_12>
  34:	0c 94 25 1b 	jmp	0x364a	; 0x364a <__vector_13>
  38:	0c 94 fc 1a 	jmp	0x35f8	; 0x35f8 <__vector_14>
  3c:	0c 94 d3 1a 	jmp	0x35a6	; 0x35a6 <__vector_15>
  40:	0c 94 aa 1a 	jmp	0x3554	; 0x3554 <__vector_16>
  44:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__bad_interrupt>
  48:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__vector_18>
  4c:	0c 94 2f 19 	jmp	0x325e	; 0x325e <__vector_19>
  50:	0c 94 5b 19 	jmp	0x32b6	; 0x32b6 <__vector_20>
  54:	0c 94 93 1d 	jmp	0x3b26	; 0x3b26 <__vector_21>
  58:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__bad_interrupt>
  5c:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__bad_interrupt>
  60:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__bad_interrupt>
  64:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__bad_interrupt>

00000068 <.dinit>:
  68:	01 00       	.word	0x0001	; ????
  6a:	01 0c       	add	r0, r1
  6c:	80 01       	movw	r16, r0
  6e:	0c 01       	movw	r0, r24
  70:	20 00       	.word	0x0020	; ????
  72:	3b 80       	ldd	r3, Y+3	; 0x03
  74:	01 20       	and	r0, r1
  76:	01 46       	sbci	r16, 0x61	; 97
  78:	80 01       	movw	r16, r0
  7a:	46 01       	movw	r8, r12
  7c:	4a 00       	.word	0x004a	; ????
  7e:	3b 94       	des	3

00000080 <__ctors_end>:
  80:	11 24       	eor	r1, r1
  82:	1f be       	out	0x3f, r1	; 63
  84:	cf ef       	ldi	r28, 0xFF	; 255
  86:	d8 e0       	ldi	r29, 0x08	; 8
  88:	de bf       	out	0x3e, r29	; 62
  8a:	cd bf       	out	0x3d, r28	; 61

0000008c <__do_copy_data>:
  8c:	e8 e6       	ldi	r30, 0x68	; 104
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	40 e0       	ldi	r20, 0x00	; 0
  92:	17 c0       	rjmp	.+46     	; 0xc2 <__do_clear_bss+0x8>
  94:	b5 91       	lpm	r27, Z+
  96:	a5 91       	lpm	r26, Z+
  98:	35 91       	lpm	r19, Z+
  9a:	25 91       	lpm	r18, Z+
  9c:	05 91       	lpm	r16, Z+
  9e:	07 fd       	sbrc	r16, 7
  a0:	0c c0       	rjmp	.+24     	; 0xba <__do_clear_bss>
  a2:	95 91       	lpm	r25, Z+
  a4:	85 91       	lpm	r24, Z+
  a6:	ef 01       	movw	r28, r30
  a8:	f9 2f       	mov	r31, r25
  aa:	e8 2f       	mov	r30, r24
  ac:	05 90       	lpm	r0, Z+
  ae:	0d 92       	st	X+, r0
  b0:	a2 17       	cp	r26, r18
  b2:	b3 07       	cpc	r27, r19
  b4:	d9 f7       	brne	.-10     	; 0xac <__do_copy_data+0x20>
  b6:	fe 01       	movw	r30, r28
  b8:	04 c0       	rjmp	.+8      	; 0xc2 <__do_clear_bss+0x8>

000000ba <__do_clear_bss>:
  ba:	1d 92       	st	X+, r1
  bc:	a2 17       	cp	r26, r18
  be:	b3 07       	cpc	r27, r19
  c0:	e1 f7       	brne	.-8      	; 0xba <__do_clear_bss>
  c2:	e0 38       	cpi	r30, 0x80	; 128
  c4:	f4 07       	cpc	r31, r20
  c6:	31 f7       	brne	.-52     	; 0x94 <__do_copy_data+0x8>
  c8:	0e 94 4c 08 	call	0x1098	; 0x1098 <main>
  cc:	0c 94 88 1d 	jmp	0x3b10	; 0x3b10 <exit>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>

Disassembly of section .text:

00003b6e <__bad_interrupt>:
    3b6e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.init_DCMOTOR:

000038c6 <init_DCMOTOR>:
 *  Author: hp
 */ 
#include "DC_MOTOR.h"

void init_DCMOTOR(DC_MOTOR_ID* DC_MOTOR,GPIO_PORT PORT_adress,u8 PIN1,u8 PIN2,u8 ENPIN)
{
    38c6:	0f 93       	push	r16
    38c8:	cf 93       	push	r28
    38ca:	df 93       	push	r29
    38cc:	fc 01       	movw	r30, r24
    38ce:	c6 2f       	mov	r28, r22
    38d0:	64 2f       	mov	r22, r20
    38d2:	d2 2f       	mov	r29, r18
	DC_MOTOR->pin1 = PIN1;
    38d4:	40 83       	st	Z, r20
	DC_MOTOR->pin2 =PIN2;
    38d6:	21 83       	std	Z+1, r18	; 0x01
	DC_MOTOR->en = ENPIN;
    38d8:	02 83       	std	Z+2, r16	; 0x02
	DC_MOTOR->PORT_adress = PORT_adress;
    38da:	c3 83       	std	Z+3, r28	; 0x03
	GPIO_PIN_mode(PORT_adress,PIN1,OUTPUT);
    38dc:	41 e0       	ldi	r20, 0x01	; 1
    38de:	8c 2f       	mov	r24, r28
    38e0:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
	GPIO_PIN_mode(PORT_adress,PIN2,OUTPUT);
    38e4:	41 e0       	ldi	r20, 0x01	; 1
    38e6:	6d 2f       	mov	r22, r29
    38e8:	8c 2f       	mov	r24, r28
    38ea:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
	GPIO_PIN_mode(PORT_adress,ENPIN,OUTPUT);
    38ee:	41 e0       	ldi	r20, 0x01	; 1
    38f0:	60 2f       	mov	r22, r16
    38f2:	8c 2f       	mov	r24, r28
    38f4:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
}
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	0f 91       	pop	r16
    38fe:	08 95       	ret

Disassembly of section .text.MOTOR_MOVE:

00003900 <MOTOR_MOVE>:
void MOTOR_MOVE(DC_MOTOR_ID* DC_MOTOR,u8 DIRECTION)
{
    3900:	cf 93       	push	r28
    3902:	df 93       	push	r29
    3904:	ec 01       	movw	r28, r24
	if (DIRECTION )
    3906:	66 23       	and	r22, r22
    3908:	59 f0       	breq	.+22     	; 0x3920 <MOTOR_MOVE+0x20>
	{
		GPIO_writePIN_value(DC_MOTOR->PORT_adress,DC_MOTOR->pin1,HIGH);
    390a:	41 e0       	ldi	r20, 0x01	; 1
    390c:	68 81       	ld	r22, Y
    390e:	8b 81       	ldd	r24, Y+3	; 0x03
    3910:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>
		GPIO_writePIN_value(DC_MOTOR->PORT_adress,DC_MOTOR->pin2,LOW);
    3914:	40 e0       	ldi	r20, 0x00	; 0
    3916:	69 81       	ldd	r22, Y+1	; 0x01
    3918:	8b 81       	ldd	r24, Y+3	; 0x03
    391a:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>
		return;	
    391e:	0a c0       	rjmp	.+20     	; 0x3934 <MOTOR_MOVE+0x34>
	}
	
	GPIO_writePIN_value(DC_MOTOR->PORT_adress,DC_MOTOR->pin2,HIGH);
    3920:	41 e0       	ldi	r20, 0x01	; 1
    3922:	69 81       	ldd	r22, Y+1	; 0x01
    3924:	8b 81       	ldd	r24, Y+3	; 0x03
    3926:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>
	GPIO_writePIN_value(DC_MOTOR->PORT_adress,DC_MOTOR->pin1,LOW);
    392a:	40 e0       	ldi	r20, 0x00	; 0
    392c:	68 81       	ld	r22, Y
    392e:	8b 81       	ldd	r24, Y+3	; 0x03
    3930:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>
	
}
    3934:	df 91       	pop	r29
    3936:	cf 91       	pop	r28
    3938:	08 95       	ret

Disassembly of section .text.MOTOR_STOP:

00003a50 <MOTOR_STOP>:


void MOTOR_STOP(DC_MOTOR_ID* DC_MOTOR)
{
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	ec 01       	movw	r28, r24
	GPIO_writePIN_value(DC_MOTOR->PORT_adress,DC_MOTOR->pin2,LOW);
    3a56:	40 e0       	ldi	r20, 0x00	; 0
    3a58:	69 81       	ldd	r22, Y+1	; 0x01
    3a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a5c:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>
	GPIO_writePIN_value(DC_MOTOR->PORT_adress,DC_MOTOR->pin1,LOW);	
    3a60:	40 e0       	ldi	r20, 0x00	; 0
    3a62:	68 81       	ld	r22, Y
    3a64:	8b 81       	ldd	r24, Y+3	; 0x03
    3a66:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>
}
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	08 95       	ret

Disassembly of section .text.init_KEYPAD:

000029d4 <init_KEYPAD>:
 *  Author: mohamed mahmoud abdo
 */
#include "KEY_PAD.h"
#include <util/delay.h>
KEYPAD_ID init_KEYPAD(GPIO_PORT PORT_adress_coloms,u8* pin_coloms,GPIO_PORT PORT_adress_rows,u8* pin_rows ,u8 num_coloms,u8 num_rows,u8* key_pad_array)
{
    29d4:	6f 92       	push	r6
    29d6:	7f 92       	push	r7
    29d8:	8f 92       	push	r8
    29da:	9f 92       	push	r9
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	3c 01       	movw	r6, r24
    29f2:	d6 2e       	mov	r13, r22
    29f4:	4a 01       	movw	r8, r20
    29f6:	f2 2e       	mov	r15, r18
	

	for (int i = 0;i<num_coloms;i++)
    29f8:	c0 e0       	ldi	r28, 0x00	; 0
    29fa:	d0 e0       	ldi	r29, 0x00	; 0
    29fc:	09 c0       	rjmp	.+18     	; 0x2a10 <init_KEYPAD+0x3c>
	{
		GPIO_PIN_mode(PORT_adress_coloms,pin_coloms[i] ,INPUT);
    29fe:	f4 01       	movw	r30, r8
    2a00:	ec 0f       	add	r30, r28
    2a02:	fd 1f       	adc	r31, r29
    2a04:	40 e0       	ldi	r20, 0x00	; 0
    2a06:	60 81       	ld	r22, Z
    2a08:	8d 2d       	mov	r24, r13
    2a0a:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
#include <util/delay.h>
KEYPAD_ID init_KEYPAD(GPIO_PORT PORT_adress_coloms,u8* pin_coloms,GPIO_PORT PORT_adress_rows,u8* pin_rows ,u8 num_coloms,u8 num_rows,u8* key_pad_array)
{
	

	for (int i = 0;i<num_coloms;i++)
    2a0e:	21 96       	adiw	r28, 0x01	; 1
    2a10:	8e 2d       	mov	r24, r14
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	c8 17       	cp	r28, r24
    2a16:	d9 07       	cpc	r29, r25
    2a18:	94 f3       	brlt	.-28     	; 0x29fe <init_KEYPAD+0x2a>
    2a1a:	c0 e0       	ldi	r28, 0x00	; 0
    2a1c:	d0 e0       	ldi	r29, 0x00	; 0
    2a1e:	09 c0       	rjmp	.+18     	; 0x2a32 <init_KEYPAD+0x5e>
		

	}
	for (int i = 0;i<num_rows;i++)
	{
		GPIO_PIN_mode(PORT_adress_rows,pin_rows[i] ,OUTPUT);
    2a20:	f8 01       	movw	r30, r16
    2a22:	ec 0f       	add	r30, r28
    2a24:	fd 1f       	adc	r31, r29
    2a26:	41 e0       	ldi	r20, 0x01	; 1
    2a28:	60 81       	ld	r22, Z
    2a2a:	8f 2d       	mov	r24, r15
    2a2c:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
	{
		GPIO_PIN_mode(PORT_adress_coloms,pin_coloms[i] ,INPUT);
		

	}
	for (int i = 0;i<num_rows;i++)
    2a30:	21 96       	adiw	r28, 0x01	; 1
    2a32:	8c 2d       	mov	r24, r12
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	c8 17       	cp	r28, r24
    2a38:	d9 07       	cpc	r29, r25
    2a3a:	94 f3       	brlt	.-28     	; 0x2a20 <init_KEYPAD+0x4c>
	{
		GPIO_PIN_mode(PORT_adress_rows,pin_rows[i] ,OUTPUT);

	}	
	KEYPAD_ID KEYPAD = {PORT_adress_coloms,PORT_adress_rows,pin_coloms,pin_rows,num_coloms,num_rows,(u8*)key_pad_array};
    2a3c:	f3 01       	movw	r30, r6
    2a3e:	d0 82       	st	Z, r13
    2a40:	f1 82       	std	Z+1, r15	; 0x01
    2a42:	93 82       	std	Z+3, r9	; 0x03
    2a44:	82 82       	std	Z+2, r8	; 0x02
    2a46:	15 83       	std	Z+5, r17	; 0x05
    2a48:	04 83       	std	Z+4, r16	; 0x04
    2a4a:	e6 82       	std	Z+6, r14	; 0x06
    2a4c:	c7 82       	std	Z+7, r12	; 0x07
    2a4e:	b1 86       	std	Z+9, r11	; 0x09
    2a50:	a0 86       	std	Z+8, r10	; 0x08
	
	
	return KEYPAD;
}
    2a52:	c3 01       	movw	r24, r6
    2a54:	df 91       	pop	r29
    2a56:	cf 91       	pop	r28
    2a58:	1f 91       	pop	r17
    2a5a:	0f 91       	pop	r16
    2a5c:	ff 90       	pop	r15
    2a5e:	ef 90       	pop	r14
    2a60:	df 90       	pop	r13
    2a62:	cf 90       	pop	r12
    2a64:	bf 90       	pop	r11
    2a66:	af 90       	pop	r10
    2a68:	9f 90       	pop	r9
    2a6a:	8f 90       	pop	r8
    2a6c:	7f 90       	pop	r7
    2a6e:	6f 90       	pop	r6
    2a70:	08 95       	ret

Disassembly of section .text.KEYPAD_get_input:

00002404 <KEYPAD_get_input>:

u8 KEYPAD_get_input(KEYPAD_ID* KEYPAD)
{
    2404:	bf 92       	push	r11
    2406:	cf 92       	push	r12
    2408:	df 92       	push	r13
    240a:	ef 92       	push	r14
    240c:	ff 92       	push	r15
    240e:	0f 93       	push	r16
    2410:	1f 93       	push	r17
    2412:	cf 93       	push	r28
    2414:	df 93       	push	r29
    2416:	8c 01       	movw	r16, r24
#include <util/delay.h>
KEYPAD_ID init_KEYPAD(GPIO_PORT PORT_adress_coloms,u8* pin_coloms,GPIO_PORT PORT_adress_rows,u8* pin_rows ,u8 num_coloms,u8 num_rows,u8* key_pad_array)
{
	

	for (int i = 0;i<num_coloms;i++)
    2418:	e1 2c       	mov	r14, r1
    241a:	f1 2c       	mov	r15, r1
	return KEYPAD;
}

u8 KEYPAD_get_input(KEYPAD_ID* KEYPAD)
{
	u8 pressed_key = 0;
    241c:	b1 2c       	mov	r11, r1
#include <util/delay.h>
KEYPAD_ID init_KEYPAD(GPIO_PORT PORT_adress_coloms,u8* pin_coloms,GPIO_PORT PORT_adress_rows,u8* pin_rows ,u8 num_coloms,u8 num_rows,u8* key_pad_array)
{
	

	for (int i = 0;i<num_coloms;i++)
    241e:	4b c0       	rjmp	.+150    	; 0x24b6 <KEYPAD_get_input+0xb2>
	{
		GPIO_PIN_mode(PORT_adress_coloms,pin_coloms[i] ,INPUT);
		
    2420:	d8 01       	movw	r26, r16
    2422:	14 96       	adiw	r26, 0x04	; 4
    2424:	ed 91       	ld	r30, X+
    2426:	fc 91       	ld	r31, X
    2428:	15 97       	sbiw	r26, 0x05	; 5
    242a:	67 01       	movw	r12, r14
    242c:	ee 0d       	add	r30, r14
    242e:	ff 1d       	adc	r31, r15
    2430:	41 e0       	ldi	r20, 0x01	; 1
    2432:	60 81       	ld	r22, Z
    2434:	11 96       	adiw	r26, 0x01	; 1
    2436:	8c 91       	ld	r24, X
    2438:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>

    243c:	c0 e0       	ldi	r28, 0x00	; 0
    243e:	d0 e0       	ldi	r29, 0x00	; 0
    2440:	1c c0       	rjmp	.+56     	; 0x247a <KEYPAD_get_input+0x76>
	}
	for (int i = 0;i<num_rows;i++)
    2442:	d8 01       	movw	r26, r16
    2444:	12 96       	adiw	r26, 0x02	; 2
    2446:	ed 91       	ld	r30, X+
    2448:	fc 91       	ld	r31, X
    244a:	13 97       	sbiw	r26, 0x03	; 3
    244c:	ec 0f       	add	r30, r28
    244e:	fd 1f       	adc	r31, r29
    2450:	60 81       	ld	r22, Z
    2452:	8c 91       	ld	r24, X
    2454:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <GPIO_readPIN_value>
	{
		GPIO_PIN_mode(PORT_adress_rows,pin_rows[i] ,OUTPUT);
    2458:	88 23       	and	r24, r24
    245a:	71 f0       	breq	.+28     	; 0x2478 <KEYPAD_get_input+0x74>

	}	
    245c:	f8 01       	movw	r30, r16
    245e:	80 85       	ldd	r24, Z+8	; 0x08
    2460:	91 85       	ldd	r25, Z+9	; 0x09
    2462:	26 81       	ldd	r18, Z+6	; 0x06
    2464:	2e 9d       	mul	r18, r14
    2466:	f0 01       	movw	r30, r0
    2468:	2f 9d       	mul	r18, r15
    246a:	f0 0d       	add	r31, r0
    246c:	11 24       	eor	r1, r1
    246e:	ec 0f       	add	r30, r28
    2470:	fd 1f       	adc	r31, r29
    2472:	e8 0f       	add	r30, r24
    2474:	f9 1f       	adc	r31, r25
    2476:	b0 80       	ld	r11, Z

	for (int i = 0;i<num_coloms;i++)
	{
		GPIO_PIN_mode(PORT_adress_coloms,pin_coloms[i] ,INPUT);
		

    2478:	21 96       	adiw	r28, 0x01	; 1
    247a:	d8 01       	movw	r26, r16
    247c:	16 96       	adiw	r26, 0x06	; 6
    247e:	8c 91       	ld	r24, X
    2480:	16 97       	sbiw	r26, 0x06	; 6
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	c8 17       	cp	r28, r24
    2486:	d9 07       	cpc	r29, r25
    2488:	e4 f2       	brlt	.-72     	; 0x2442 <KEYPAD_get_input+0x3e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    248a:	ef e1       	ldi	r30, 0x1F	; 31
    248c:	fe e4       	ldi	r31, 0x4E	; 78
    248e:	31 97       	sbiw	r30, 0x01	; 1
    2490:	f1 f7       	brne	.-4      	; 0x248e <KEYPAD_get_input+0x8a>
    2492:	00 c0       	rjmp	.+0      	; 0x2494 <KEYPAD_get_input+0x90>
    2494:	00 00       	nop
	
	return KEYPAD;
}

u8 KEYPAD_get_input(KEYPAD_ID* KEYPAD)
{
    2496:	14 96       	adiw	r26, 0x04	; 4
    2498:	8d 91       	ld	r24, X+
    249a:	9c 91       	ld	r25, X
    249c:	15 97       	sbiw	r26, 0x05	; 5
    249e:	fc 01       	movw	r30, r24
    24a0:	ec 0d       	add	r30, r12
    24a2:	fd 1d       	adc	r31, r13
    24a4:	40 e0       	ldi	r20, 0x00	; 0
    24a6:	60 81       	ld	r22, Z
    24a8:	11 96       	adiw	r26, 0x01	; 1
    24aa:	8c 91       	ld	r24, X
    24ac:	0e 94 1b 1c 	call	0x3836	; 0x3836 <GPIO_writePIN_value>
#include <util/delay.h>
KEYPAD_ID init_KEYPAD(GPIO_PORT PORT_adress_coloms,u8* pin_coloms,GPIO_PORT PORT_adress_rows,u8* pin_rows ,u8 num_coloms,u8 num_rows,u8* key_pad_array)
{
	

	for (int i = 0;i<num_coloms;i++)
    24b0:	bf ef       	ldi	r27, 0xFF	; 255
    24b2:	eb 1a       	sub	r14, r27
    24b4:	fb 0a       	sbc	r15, r27
    24b6:	f8 01       	movw	r30, r16
    24b8:	87 81       	ldd	r24, Z+7	; 0x07
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	e8 16       	cp	r14, r24
    24be:	f9 06       	cpc	r15, r25
    24c0:	0c f4       	brge	.+2      	; 0x24c4 <KEYPAD_get_input+0xc0>
    24c2:	ae cf       	rjmp	.-164    	; 0x2420 <KEYPAD_get_input+0x1c>
	# 0000
	# 0010
	# 
	u8 value =7;

	for (int i = 0;i<KEYPAD->num_row;i++)
    24c4:	8b 2d       	mov	r24, r11
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	ff 90       	pop	r15
    24d0:	ef 90       	pop	r14
    24d2:	df 90       	pop	r13
    24d4:	cf 90       	pop	r12
    24d6:	bf 90       	pop	r11
    24d8:	08 95       	ret

Disassembly of section .text.lcd_cmd:

00001a0c <lcd_cmd>:
#include "lcd.h"

void lcd_cmd(LCD_ID LCD,unsigned char cmd)
{
    1a0c:	8f 92       	push	r8
    1a0e:	9f 92       	push	r9
    1a10:	af 92       	push	r10
    1a12:	bf 92       	push	r11
    1a14:	cf 92       	push	r12
    1a16:	df 92       	push	r13
    1a18:	ef 92       	push	r14
    1a1a:	ff 92       	push	r15
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	61 97       	sbiw	r28, 0x11	; 17
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	89 82       	std	Y+1, r8	; 0x01
    1a36:	9a 82       	std	Y+2, r9	; 0x02
    1a38:	ab 82       	std	Y+3, r10	; 0x03
    1a3a:	bc 82       	std	Y+4, r11	; 0x04
    1a3c:	cd 82       	std	Y+5, r12	; 0x05
    1a3e:	de 82       	std	Y+6, r13	; 0x06
    1a40:	ef 82       	std	Y+7, r14	; 0x07
    1a42:	f8 86       	std	Y+8, r15	; 0x08
    1a44:	09 87       	std	Y+9, r16	; 0x09
    1a46:	1a 87       	std	Y+10, r17	; 0x0a
    1a48:	2b 87       	std	Y+11, r18	; 0x0b
    1a4a:	3c 87       	std	Y+12, r19	; 0x0c
    1a4c:	4d 87       	std	Y+13, r20	; 0x0d
    1a4e:	5e 87       	std	Y+14, r21	; 0x0e
    1a50:	6f 87       	std	Y+15, r22	; 0x0f
    1a52:	78 8b       	std	Y+16, r23	; 0x10
    1a54:	89 8b       	std	Y+17, r24	; 0x11
	GPIO_PORT_ID* GPIO_PORT_CMD =  PGPIO_PORT_get_register(LCD.GPIO_PORT_CMD);
    1a56:	8c 2d       	mov	r24, r12
    1a58:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
    1a5c:	8c 01       	movw	r16, r24
	GPIO_PORT_ID* GPIO_PORT_DATA=  PGPIO_PORT_get_register(LCD.GPIO_PORT_DATA);
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
    1a64:	fc 01       	movw	r30, r24
	switch(LCD.LCD_DISPLAY_MODE)
    1a66:	99 81       	ldd	r25, Y+1	; 0x01
    1a68:	99 23       	and	r25, r25
    1a6a:	09 f4       	brne	.+2      	; 0x1a6e <lcd_cmd+0x62>
    1a6c:	4a c0       	rjmp	.+148    	; 0x1b02 <lcd_cmd+0xf6>
    1a6e:	91 30       	cpi	r25, 0x01	; 1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <lcd_cmd+0x68>
    1a72:	9d c0       	rjmp	.+314    	; 0x1bae <lcd_cmd+0x1a2>
	{
		case LCD_8BIT:
		

			GPIO_PORT_DATA->PORT_ID = cmd;
    1a74:	68 a1       	ldd	r22, Y+32	; 0x20
    1a76:	62 83       	std	Z+2, r22	; 0x02
			GPIO_PORT_CMD->PORT_ID &= ~(1<<LCD.rs);
    1a78:	d8 01       	movw	r26, r16
    1a7a:	12 96       	adiw	r26, 0x02	; 2
    1a7c:	3c 91       	ld	r19, X
    1a7e:	12 97       	sbiw	r26, 0x02	; 2
    1a80:	81 e0       	ldi	r24, 0x01	; 1
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	ac 01       	movw	r20, r24
    1a86:	0e 80       	ldd	r0, Y+6	; 0x06
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <lcd_cmd+0x82>
    1a8a:	44 0f       	add	r20, r20
    1a8c:	55 1f       	adc	r21, r21
    1a8e:	0a 94       	dec	r0
    1a90:	e2 f7       	brpl	.-8      	; 0x1a8a <lcd_cmd+0x7e>
    1a92:	24 2f       	mov	r18, r20
    1a94:	20 95       	com	r18
    1a96:	23 23       	and	r18, r19
    1a98:	12 96       	adiw	r26, 0x02	; 2
    1a9a:	2c 93       	st	X, r18
    1a9c:	12 97       	sbiw	r26, 0x02	; 2
			GPIO_PORT_CMD->PORT_ID &= ~(1<<LCD.rw);
    1a9e:	12 96       	adiw	r26, 0x02	; 2
    1aa0:	3c 91       	ld	r19, X
    1aa2:	12 97       	sbiw	r26, 0x02	; 2
    1aa4:	ac 01       	movw	r20, r24
    1aa6:	0f 80       	ldd	r0, Y+7	; 0x07
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <lcd_cmd+0xa2>
    1aaa:	44 0f       	add	r20, r20
    1aac:	55 1f       	adc	r21, r21
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <lcd_cmd+0x9e>
    1ab2:	24 2f       	mov	r18, r20
    1ab4:	20 95       	com	r18
    1ab6:	23 23       	and	r18, r19
    1ab8:	12 96       	adiw	r26, 0x02	; 2
    1aba:	2c 93       	st	X, r18
    1abc:	12 97       	sbiw	r26, 0x02	; 2
			GPIO_PORT_CMD->PORT_ID |= (1<<LCD.en);
    1abe:	12 96       	adiw	r26, 0x02	; 2
    1ac0:	2c 91       	ld	r18, X
    1ac2:	12 97       	sbiw	r26, 0x02	; 2
    1ac4:	08 84       	ldd	r0, Y+8	; 0x08
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <lcd_cmd+0xc0>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <lcd_cmd+0xbc>
    1ad0:	92 2f       	mov	r25, r18
    1ad2:	98 2b       	or	r25, r24
    1ad4:	12 96       	adiw	r26, 0x02	; 2
    1ad6:	9c 93       	st	X, r25
    1ad8:	12 97       	sbiw	r26, 0x02	; 2
    1ada:	ef e9       	ldi	r30, 0x9F	; 159
    1adc:	ff e0       	ldi	r31, 0x0F	; 15
    1ade:	31 97       	sbiw	r30, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <lcd_cmd+0xd2>
    1ae2:	00 c0       	rjmp	.+0      	; 0x1ae4 <lcd_cmd+0xd8>
    1ae4:	00 00       	nop
			_delay_ms(1);
			GPIO_PORT_CMD->PORT_ID &= ~(1<<LCD.en);
    1ae6:	12 96       	adiw	r26, 0x02	; 2
    1ae8:	9c 91       	ld	r25, X
    1aea:	12 97       	sbiw	r26, 0x02	; 2
    1aec:	80 95       	com	r24
    1aee:	89 23       	and	r24, r25
    1af0:	12 96       	adiw	r26, 0x02	; 2
    1af2:	8c 93       	st	X, r24
    1af4:	ef ed       	ldi	r30, 0xDF	; 223
    1af6:	fe e2       	ldi	r31, 0x2E	; 46
    1af8:	31 97       	sbiw	r30, 0x01	; 1
    1afa:	f1 f7       	brne	.-4      	; 0x1af8 <lcd_cmd+0xec>
    1afc:	00 c0       	rjmp	.+0      	; 0x1afe <lcd_cmd+0xf2>
    1afe:	00 00       	nop
    1b00:	56 c0       	rjmp	.+172    	; 0x1bae <lcd_cmd+0x1a2>
		break;
		
		
		case LCD_4BIT:

			GPIO_PORT_DATA->PORT_ID = (GPIO_PORT_DATA->PORT_ID & 0x0F) | (cmd & 0xF0);/* Sending upper nibble */
    1b02:	82 81       	ldd	r24, Z+2	; 0x02
    1b04:	8f 70       	andi	r24, 0x0F	; 15
    1b06:	98 a1       	ldd	r25, Y+32	; 0x20
    1b08:	90 7f       	andi	r25, 0xF0	; 240
    1b0a:	89 2b       	or	r24, r25
    1b0c:	82 83       	std	Z+2, r24	; 0x02
			GPIO_PORT_CMD->PORT_ID &= ~ (1<<LCD.rs);		/* RS=0, command reg. */
    1b0e:	d8 01       	movw	r26, r16
    1b10:	12 96       	adiw	r26, 0x02	; 2
    1b12:	9c 91       	ld	r25, X
    1b14:	12 97       	sbiw	r26, 0x02	; 2
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	50 e0       	ldi	r21, 0x00	; 0
    1b1a:	9a 01       	movw	r18, r20
    1b1c:	0e 80       	ldd	r0, Y+6	; 0x06
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <lcd_cmd+0x118>
    1b20:	22 0f       	add	r18, r18
    1b22:	33 1f       	adc	r19, r19
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <lcd_cmd+0x114>
    1b28:	82 2f       	mov	r24, r18
    1b2a:	80 95       	com	r24
    1b2c:	89 23       	and	r24, r25
    1b2e:	12 96       	adiw	r26, 0x02	; 2
    1b30:	8c 93       	st	X, r24
    1b32:	12 97       	sbiw	r26, 0x02	; 2
			GPIO_PORT_CMD->PORT_ID |= (1<<LCD.en);		/* Enable pulse */
    1b34:	12 96       	adiw	r26, 0x02	; 2
    1b36:	8c 91       	ld	r24, X
    1b38:	12 97       	sbiw	r26, 0x02	; 2
    1b3a:	08 84       	ldd	r0, Y+8	; 0x08
    1b3c:	02 c0       	rjmp	.+4      	; 0x1b42 <lcd_cmd+0x136>
    1b3e:	44 0f       	add	r20, r20
    1b40:	55 1f       	adc	r21, r21
    1b42:	0a 94       	dec	r0
    1b44:	e2 f7       	brpl	.-8      	; 0x1b3e <lcd_cmd+0x132>
    1b46:	84 2b       	or	r24, r20
    1b48:	12 96       	adiw	r26, 0x02	; 2
    1b4a:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1b4c:	b5 e0       	ldi	r27, 0x05	; 5
    1b4e:	ba 95       	dec	r27
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <lcd_cmd+0x142>
    1b52:	00 00       	nop
			_delay_us(1);
			GPIO_PORT_CMD->PORT_ID &= ~ (1<<LCD.en);
    1b54:	d8 01       	movw	r26, r16
    1b56:	12 96       	adiw	r26, 0x02	; 2
    1b58:	9c 91       	ld	r25, X
    1b5a:	12 97       	sbiw	r26, 0x02	; 2
    1b5c:	84 2f       	mov	r24, r20
    1b5e:	80 95       	com	r24
    1b60:	98 23       	and	r25, r24
    1b62:	12 96       	adiw	r26, 0x02	; 2
    1b64:	9c 93       	st	X, r25
    1b66:	af e1       	ldi	r26, 0x1F	; 31
    1b68:	b3 e0       	ldi	r27, 0x03	; 3
    1b6a:	11 97       	sbiw	r26, 0x01	; 1
    1b6c:	f1 f7       	brne	.-4      	; 0x1b6a <lcd_cmd+0x15e>
    1b6e:	00 c0       	rjmp	.+0      	; 0x1b70 <lcd_cmd+0x164>
    1b70:	00 00       	nop
			_delay_us(200);
			GPIO_PORT_DATA->PORT_ID = (GPIO_PORT_DATA->PORT_ID & 0x0F) | (cmd << 4);/* Sending lower nibble */
    1b72:	92 81       	ldd	r25, Z+2	; 0x02
    1b74:	68 a1       	ldd	r22, Y+32	; 0x20
    1b76:	b0 e1       	ldi	r27, 0x10	; 16
    1b78:	6b 9f       	mul	r22, r27
    1b7a:	90 01       	movw	r18, r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	9f 70       	andi	r25, 0x0F	; 15
    1b80:	29 2b       	or	r18, r25
    1b82:	22 83       	std	Z+2, r18	; 0x02
			GPIO_PORT_CMD->PORT_ID |= (1<<LCD.en);
    1b84:	d8 01       	movw	r26, r16
    1b86:	12 96       	adiw	r26, 0x02	; 2
    1b88:	9c 91       	ld	r25, X
    1b8a:	12 97       	sbiw	r26, 0x02	; 2
    1b8c:	49 2b       	or	r20, r25
    1b8e:	12 96       	adiw	r26, 0x02	; 2
    1b90:	4c 93       	st	X, r20
    1b92:	b5 e0       	ldi	r27, 0x05	; 5
    1b94:	ba 95       	dec	r27
    1b96:	f1 f7       	brne	.-4      	; 0x1b94 <lcd_cmd+0x188>
    1b98:	00 00       	nop
			_delay_us(1);
			GPIO_PORT_CMD->PORT_ID &= ~ (1<<LCD.en);
    1b9a:	f8 01       	movw	r30, r16
    1b9c:	92 81       	ldd	r25, Z+2	; 0x02
    1b9e:	89 23       	and	r24, r25
    1ba0:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ba2:	8f e3       	ldi	r24, 0x3F	; 63
    1ba4:	9f e1       	ldi	r25, 0x1F	; 31
    1ba6:	01 97       	sbiw	r24, 0x01	; 1
    1ba8:	f1 f7       	brne	.-4      	; 0x1ba6 <lcd_cmd+0x19a>
    1baa:	00 c0       	rjmp	.+0      	; 0x1bac <lcd_cmd+0x1a0>
    1bac:	00 00       	nop
		
		break;
		
		
	}
}
    1bae:	61 96       	adiw	r28, 0x11	; 17
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	08 95       	ret

Disassembly of section .text.init_lcd8bit:

00000a44 <init_lcd8bit>:
	}
	return LCD;
}

void init_lcd8bit(LCD_ID LCD)
{
 a44:	8f 92       	push	r8
 a46:	9f 92       	push	r9
 a48:	af 92       	push	r10
 a4a:	bf 92       	push	r11
 a4c:	cf 92       	push	r12
 a4e:	df 92       	push	r13
 a50:	ef 92       	push	r14
 a52:	ff 92       	push	r15
 a54:	0f 93       	push	r16
 a56:	1f 93       	push	r17
 a58:	cf 93       	push	r28
 a5a:	df 93       	push	r29
 a5c:	cd b7       	in	r28, 0x3d	; 61
 a5e:	de b7       	in	r29, 0x3e	; 62
 a60:	61 97       	sbiw	r28, 0x11	; 17
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	f8 94       	cli
 a66:	de bf       	out	0x3e, r29	; 62
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	cd bf       	out	0x3d, r28	; 61
 a6c:	89 82       	std	Y+1, r8	; 0x01
 a6e:	9a 82       	std	Y+2, r9	; 0x02
 a70:	ab 82       	std	Y+3, r10	; 0x03
 a72:	bc 82       	std	Y+4, r11	; 0x04
 a74:	cd 82       	std	Y+5, r12	; 0x05
 a76:	de 82       	std	Y+6, r13	; 0x06
 a78:	ef 82       	std	Y+7, r14	; 0x07
 a7a:	f8 86       	std	Y+8, r15	; 0x08
 a7c:	09 87       	std	Y+9, r16	; 0x09
 a7e:	1a 87       	std	Y+10, r17	; 0x0a
 a80:	2b 87       	std	Y+11, r18	; 0x0b
 a82:	3c 87       	std	Y+12, r19	; 0x0c
 a84:	4d 87       	std	Y+13, r20	; 0x0d
 a86:	5e 87       	std	Y+14, r21	; 0x0e
 a88:	6f 87       	std	Y+15, r22	; 0x0f
 a8a:	78 8b       	std	Y+16, r23	; 0x10
 a8c:	89 8b       	std	Y+17, r24	; 0x11
	GPIO_PORT_ID* GPIO_PORT_CMD =  PGPIO_PORT_get_register(LCD.GPIO_PORT_CMD);
 a8e:	8c 2d       	mov	r24, r12
 a90:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
 a94:	8c 01       	movw	r16, r24
	GPIO_PORT_ID* GPIO_PORT_DATA=  PGPIO_PORT_get_register(LCD.GPIO_PORT_DATA);
 a96:	8a 81       	ldd	r24, Y+2	; 0x02
 a98:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
 a9c:	dc 01       	movw	r26, r24
	GPIO_PORT_CMD->DDR_ID |= (1<<LCD.rs)|(1<<LCD.rw)|(1<<LCD.en);
 a9e:	f8 01       	movw	r30, r16
 aa0:	81 81       	ldd	r24, Z+1	; 0x01
 aa2:	21 e0       	ldi	r18, 0x01	; 1
 aa4:	30 e0       	ldi	r19, 0x00	; 0
 aa6:	b9 01       	movw	r22, r18
 aa8:	0e 80       	ldd	r0, Y+6	; 0x06
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <init_lcd8bit+0x6c>
 aac:	66 0f       	add	r22, r22
 aae:	77 1f       	adc	r23, r23
 ab0:	0a 94       	dec	r0
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <init_lcd8bit+0x68>
 ab4:	a9 01       	movw	r20, r18
 ab6:	0f 80       	ldd	r0, Y+7	; 0x07
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <init_lcd8bit+0x7a>
 aba:	44 0f       	add	r20, r20
 abc:	55 1f       	adc	r21, r21
 abe:	0a 94       	dec	r0
 ac0:	e2 f7       	brpl	.-8      	; 0xaba <init_lcd8bit+0x76>
 ac2:	08 84       	ldd	r0, Y+8	; 0x08
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <init_lcd8bit+0x86>
 ac6:	22 0f       	add	r18, r18
 ac8:	33 1f       	adc	r19, r19
 aca:	0a 94       	dec	r0
 acc:	e2 f7       	brpl	.-8      	; 0xac6 <init_lcd8bit+0x82>
 ace:	94 2f       	mov	r25, r20
 ad0:	96 2b       	or	r25, r22
 ad2:	92 2b       	or	r25, r18
 ad4:	98 2b       	or	r25, r24
 ad6:	91 83       	std	Z+1, r25	; 0x01
	GPIO_PORT_DATA->DDR_ID = 0xFF;
 ad8:	8f ef       	ldi	r24, 0xFF	; 255
 ada:	11 96       	adiw	r26, 0x01	; 1
 adc:	8c 93       	st	X, r24
 ade:	ff ef       	ldi	r31, 0xFF	; 255
 ae0:	89 ef       	ldi	r24, 0xF9	; 249
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	f1 50       	subi	r31, 0x01	; 1
 ae6:	80 40       	sbci	r24, 0x00	; 0
 ae8:	90 40       	sbci	r25, 0x00	; 0
 aea:	e1 f7       	brne	.-8      	; 0xae4 <init_lcd8bit+0xa0>
 aec:	00 c0       	rjmp	.+0      	; 0xaee <init_lcd8bit+0xaa>
 aee:	00 00       	nop
	
	//lcd_data = 0xFF;
	_delay_ms(20);
	GPIO_PORT_CMD->PORT_ID |= (1<<LCD.rs);
 af0:	f8 01       	movw	r30, r16
 af2:	82 81       	ldd	r24, Z+2	; 0x02
 af4:	68 2b       	or	r22, r24
 af6:	62 83       	std	Z+2, r22	; 0x02
	GPIO_PORT_CMD->PORT_ID |= (1<<LCD.rw);
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	48 2b       	or	r20, r24
 afc:	42 83       	std	Z+2, r20	; 0x02
	GPIO_PORT_CMD->PORT_ID |= (1<<LCD.en);
 afe:	82 81       	ldd	r24, Z+2	; 0x02
 b00:	28 2b       	or	r18, r24
 b02:	22 83       	std	Z+2, r18	; 0x02
 b04:	ff ef       	ldi	r31, 0xFF	; 255
 b06:	21 ee       	ldi	r18, 0xE1	; 225
 b08:	84 e0       	ldi	r24, 0x04	; 4
 b0a:	f1 50       	subi	r31, 0x01	; 1
 b0c:	20 40       	sbci	r18, 0x00	; 0
 b0e:	80 40       	sbci	r24, 0x00	; 0
 b10:	e1 f7       	brne	.-8      	; 0xb0a <init_lcd8bit+0xc6>
 b12:	00 c0       	rjmp	.+0      	; 0xb14 <init_lcd8bit+0xd0>
 b14:	00 00       	nop
	_delay_ms(100);
	lcd_cmd( LCD,0x38);
 b16:	88 e3       	ldi	r24, 0x38	; 56
 b18:	8f 93       	push	r24
 b1a:	89 80       	ldd	r8, Y+1	; 0x01
 b1c:	9a 80       	ldd	r9, Y+2	; 0x02
 b1e:	ab 80       	ldd	r10, Y+3	; 0x03
 b20:	bc 80       	ldd	r11, Y+4	; 0x04
 b22:	cd 80       	ldd	r12, Y+5	; 0x05
 b24:	de 80       	ldd	r13, Y+6	; 0x06
 b26:	ef 80       	ldd	r14, Y+7	; 0x07
 b28:	f8 84       	ldd	r15, Y+8	; 0x08
 b2a:	09 85       	ldd	r16, Y+9	; 0x09
 b2c:	1a 85       	ldd	r17, Y+10	; 0x0a
 b2e:	2b 85       	ldd	r18, Y+11	; 0x0b
 b30:	3c 85       	ldd	r19, Y+12	; 0x0c
 b32:	4d 85       	ldd	r20, Y+13	; 0x0d
 b34:	5e 85       	ldd	r21, Y+14	; 0x0e
 b36:	6f 85       	ldd	r22, Y+15	; 0x0f
 b38:	78 89       	ldd	r23, Y+16	; 0x10
 b3a:	89 89       	ldd	r24, Y+17	; 0x11
 b3c:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
 b40:	ef e9       	ldi	r30, 0x9F	; 159
 b42:	ff e0       	ldi	r31, 0x0F	; 15
 b44:	31 97       	sbiw	r30, 0x01	; 1
 b46:	f1 f7       	brne	.-4      	; 0xb44 <init_lcd8bit+0x100>
 b48:	00 c0       	rjmp	.+0      	; 0xb4a <init_lcd8bit+0x106>
 b4a:	00 00       	nop
	_delay_ms(1);
	lcd_cmd( LCD,0x02);
 b4c:	82 e0       	ldi	r24, 0x02	; 2
 b4e:	8f 93       	push	r24
 b50:	89 80       	ldd	r8, Y+1	; 0x01
 b52:	9a 80       	ldd	r9, Y+2	; 0x02
 b54:	ab 80       	ldd	r10, Y+3	; 0x03
 b56:	bc 80       	ldd	r11, Y+4	; 0x04
 b58:	cd 80       	ldd	r12, Y+5	; 0x05
 b5a:	de 80       	ldd	r13, Y+6	; 0x06
 b5c:	ef 80       	ldd	r14, Y+7	; 0x07
 b5e:	f8 84       	ldd	r15, Y+8	; 0x08
 b60:	09 85       	ldd	r16, Y+9	; 0x09
 b62:	1a 85       	ldd	r17, Y+10	; 0x0a
 b64:	2b 85       	ldd	r18, Y+11	; 0x0b
 b66:	3c 85       	ldd	r19, Y+12	; 0x0c
 b68:	4d 85       	ldd	r20, Y+13	; 0x0d
 b6a:	5e 85       	ldd	r21, Y+14	; 0x0e
 b6c:	6f 85       	ldd	r22, Y+15	; 0x0f
 b6e:	78 89       	ldd	r23, Y+16	; 0x10
 b70:	89 89       	ldd	r24, Y+17	; 0x11
 b72:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
 b76:	8f e9       	ldi	r24, 0x9F	; 159
 b78:	9f e0       	ldi	r25, 0x0F	; 15
 b7a:	01 97       	sbiw	r24, 0x01	; 1
 b7c:	f1 f7       	brne	.-4      	; 0xb7a <init_lcd8bit+0x136>
 b7e:	00 c0       	rjmp	.+0      	; 0xb80 <init_lcd8bit+0x13c>
 b80:	00 00       	nop
	_delay_ms(1);
	lcd_cmd( LCD,0x06);
 b82:	86 e0       	ldi	r24, 0x06	; 6
 b84:	8f 93       	push	r24
 b86:	89 80       	ldd	r8, Y+1	; 0x01
 b88:	9a 80       	ldd	r9, Y+2	; 0x02
 b8a:	ab 80       	ldd	r10, Y+3	; 0x03
 b8c:	bc 80       	ldd	r11, Y+4	; 0x04
 b8e:	cd 80       	ldd	r12, Y+5	; 0x05
 b90:	de 80       	ldd	r13, Y+6	; 0x06
 b92:	ef 80       	ldd	r14, Y+7	; 0x07
 b94:	f8 84       	ldd	r15, Y+8	; 0x08
 b96:	09 85       	ldd	r16, Y+9	; 0x09
 b98:	1a 85       	ldd	r17, Y+10	; 0x0a
 b9a:	2b 85       	ldd	r18, Y+11	; 0x0b
 b9c:	3c 85       	ldd	r19, Y+12	; 0x0c
 b9e:	4d 85       	ldd	r20, Y+13	; 0x0d
 ba0:	5e 85       	ldd	r21, Y+14	; 0x0e
 ba2:	6f 85       	ldd	r22, Y+15	; 0x0f
 ba4:	78 89       	ldd	r23, Y+16	; 0x10
 ba6:	89 89       	ldd	r24, Y+17	; 0x11
 ba8:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
 bac:	ef e9       	ldi	r30, 0x9F	; 159
 bae:	ff e0       	ldi	r31, 0x0F	; 15
 bb0:	31 97       	sbiw	r30, 0x01	; 1
 bb2:	f1 f7       	brne	.-4      	; 0xbb0 <init_lcd8bit+0x16c>
 bb4:	00 c0       	rjmp	.+0      	; 0xbb6 <init_lcd8bit+0x172>
 bb6:	00 00       	nop
	_delay_ms(1);
	lcd_cmd( LCD,0x80);
 bb8:	80 e8       	ldi	r24, 0x80	; 128
 bba:	8f 93       	push	r24
 bbc:	89 80       	ldd	r8, Y+1	; 0x01
 bbe:	9a 80       	ldd	r9, Y+2	; 0x02
 bc0:	ab 80       	ldd	r10, Y+3	; 0x03
 bc2:	bc 80       	ldd	r11, Y+4	; 0x04
 bc4:	cd 80       	ldd	r12, Y+5	; 0x05
 bc6:	de 80       	ldd	r13, Y+6	; 0x06
 bc8:	ef 80       	ldd	r14, Y+7	; 0x07
 bca:	f8 84       	ldd	r15, Y+8	; 0x08
 bcc:	09 85       	ldd	r16, Y+9	; 0x09
 bce:	1a 85       	ldd	r17, Y+10	; 0x0a
 bd0:	2b 85       	ldd	r18, Y+11	; 0x0b
 bd2:	3c 85       	ldd	r19, Y+12	; 0x0c
 bd4:	4d 85       	ldd	r20, Y+13	; 0x0d
 bd6:	5e 85       	ldd	r21, Y+14	; 0x0e
 bd8:	6f 85       	ldd	r22, Y+15	; 0x0f
 bda:	78 89       	ldd	r23, Y+16	; 0x10
 bdc:	89 89       	ldd	r24, Y+17	; 0x11
 bde:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
 be2:	8f e9       	ldi	r24, 0x9F	; 159
 be4:	9f e0       	ldi	r25, 0x0F	; 15
 be6:	01 97       	sbiw	r24, 0x01	; 1
 be8:	f1 f7       	brne	.-4      	; 0xbe6 <init_lcd8bit+0x1a2>
 bea:	00 c0       	rjmp	.+0      	; 0xbec <init_lcd8bit+0x1a8>
 bec:	00 00       	nop
	_delay_ms(1);
	lcd_cmd ( LCD,0x0C);
 bee:	8c e0       	ldi	r24, 0x0C	; 12
 bf0:	8f 93       	push	r24
 bf2:	89 80       	ldd	r8, Y+1	; 0x01
 bf4:	9a 80       	ldd	r9, Y+2	; 0x02
 bf6:	ab 80       	ldd	r10, Y+3	; 0x03
 bf8:	bc 80       	ldd	r11, Y+4	; 0x04
 bfa:	cd 80       	ldd	r12, Y+5	; 0x05
 bfc:	de 80       	ldd	r13, Y+6	; 0x06
 bfe:	ef 80       	ldd	r14, Y+7	; 0x07
 c00:	f8 84       	ldd	r15, Y+8	; 0x08
 c02:	09 85       	ldd	r16, Y+9	; 0x09
 c04:	1a 85       	ldd	r17, Y+10	; 0x0a
 c06:	2b 85       	ldd	r18, Y+11	; 0x0b
 c08:	3c 85       	ldd	r19, Y+12	; 0x0c
 c0a:	4d 85       	ldd	r20, Y+13	; 0x0d
 c0c:	5e 85       	ldd	r21, Y+14	; 0x0e
 c0e:	6f 85       	ldd	r22, Y+15	; 0x0f
 c10:	78 89       	ldd	r23, Y+16	; 0x10
 c12:	89 89       	ldd	r24, Y+17	; 0x11
 c14:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
 c18:	ef e9       	ldi	r30, 0x9F	; 159
 c1a:	ff e0       	ldi	r31, 0x0F	; 15
 c1c:	31 97       	sbiw	r30, 0x01	; 1
 c1e:	f1 f7       	brne	.-4      	; 0xc1c <init_lcd8bit+0x1d8>
 c20:	00 c0       	rjmp	.+0      	; 0xc22 <init_lcd8bit+0x1de>
 c22:	00 00       	nop
	_delay_ms(1);
	lcd_cmd( LCD,0x01);
 c24:	81 e0       	ldi	r24, 0x01	; 1
 c26:	8f 93       	push	r24
 c28:	89 80       	ldd	r8, Y+1	; 0x01
 c2a:	9a 80       	ldd	r9, Y+2	; 0x02
 c2c:	ab 80       	ldd	r10, Y+3	; 0x03
 c2e:	bc 80       	ldd	r11, Y+4	; 0x04
 c30:	cd 80       	ldd	r12, Y+5	; 0x05
 c32:	de 80       	ldd	r13, Y+6	; 0x06
 c34:	ef 80       	ldd	r14, Y+7	; 0x07
 c36:	f8 84       	ldd	r15, Y+8	; 0x08
 c38:	09 85       	ldd	r16, Y+9	; 0x09
 c3a:	1a 85       	ldd	r17, Y+10	; 0x0a
 c3c:	2b 85       	ldd	r18, Y+11	; 0x0b
 c3e:	3c 85       	ldd	r19, Y+12	; 0x0c
 c40:	4d 85       	ldd	r20, Y+13	; 0x0d
 c42:	5e 85       	ldd	r21, Y+14	; 0x0e
 c44:	6f 85       	ldd	r22, Y+15	; 0x0f
 c46:	78 89       	ldd	r23, Y+16	; 0x10
 c48:	89 89       	ldd	r24, Y+17	; 0x11
 c4a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
		
	
}
 c4e:	0f 90       	pop	r0
 c50:	0f 90       	pop	r0
 c52:	0f 90       	pop	r0
 c54:	0f 90       	pop	r0
 c56:	0f 90       	pop	r0
 c58:	0f 90       	pop	r0
 c5a:	61 96       	adiw	r28, 0x11	; 17
 c5c:	0f b6       	in	r0, 0x3f	; 63
 c5e:	f8 94       	cli
 c60:	de bf       	out	0x3e, r29	; 62
 c62:	0f be       	out	0x3f, r0	; 63
 c64:	cd bf       	out	0x3d, r28	; 61
 c66:	df 91       	pop	r29
 c68:	cf 91       	pop	r28
 c6a:	1f 91       	pop	r17
 c6c:	0f 91       	pop	r16
 c6e:	ff 90       	pop	r15
 c70:	ef 90       	pop	r14
 c72:	df 90       	pop	r13
 c74:	cf 90       	pop	r12
 c76:	bf 90       	pop	r11
 c78:	af 90       	pop	r10
 c7a:	9f 90       	pop	r9
 c7c:	8f 90       	pop	r8
 c7e:	08 95       	ret

Disassembly of section .text.init_lcd4bit:

00001286 <init_lcd4bit>:

void init_lcd4bit(LCD_ID LCD)
{
    1286:	8f 92       	push	r8
    1288:	9f 92       	push	r9
    128a:	af 92       	push	r10
    128c:	bf 92       	push	r11
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	61 97       	sbiw	r28, 0x11	; 17
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	89 82       	std	Y+1, r8	; 0x01
    12b0:	9a 82       	std	Y+2, r9	; 0x02
    12b2:	ab 82       	std	Y+3, r10	; 0x03
    12b4:	bc 82       	std	Y+4, r11	; 0x04
    12b6:	cd 82       	std	Y+5, r12	; 0x05
    12b8:	de 82       	std	Y+6, r13	; 0x06
    12ba:	ef 82       	std	Y+7, r14	; 0x07
    12bc:	f8 86       	std	Y+8, r15	; 0x08
    12be:	09 87       	std	Y+9, r16	; 0x09
    12c0:	1a 87       	std	Y+10, r17	; 0x0a
    12c2:	2b 87       	std	Y+11, r18	; 0x0b
    12c4:	3c 87       	std	Y+12, r19	; 0x0c
    12c6:	4d 87       	std	Y+13, r20	; 0x0d
    12c8:	5e 87       	std	Y+14, r21	; 0x0e
    12ca:	6f 87       	std	Y+15, r22	; 0x0f
    12cc:	78 8b       	std	Y+16, r23	; 0x10
    12ce:	89 8b       	std	Y+17, r24	; 0x11
	GPIO_PORT_ID* GPIO_PORT_CMD =  PGPIO_PORT_get_register(LCD.GPIO_PORT_CMD);
    12d0:	8c 2d       	mov	r24, r12
    12d2:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
    12d6:	fc 01       	movw	r30, r24
	
	GPIO_PORT_CMD->DDR_ID |= (1<<LCD.rs)|(1<<LCD.rw)|(1<<LCD.en);
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	b9 01       	movw	r22, r18
    12e0:	0e 80       	ldd	r0, Y+6	; 0x06
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <init_lcd4bit+0x62>
    12e4:	66 0f       	add	r22, r22
    12e6:	77 1f       	adc	r23, r23
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <init_lcd4bit+0x5e>
    12ec:	a9 01       	movw	r20, r18
    12ee:	0f 80       	ldd	r0, Y+7	; 0x07
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <init_lcd4bit+0x70>
    12f2:	44 0f       	add	r20, r20
    12f4:	55 1f       	adc	r21, r21
    12f6:	0a 94       	dec	r0
    12f8:	e2 f7       	brpl	.-8      	; 0x12f2 <init_lcd4bit+0x6c>
    12fa:	08 84       	ldd	r0, Y+8	; 0x08
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <init_lcd4bit+0x7c>
    12fe:	22 0f       	add	r18, r18
    1300:	33 1f       	adc	r19, r19
    1302:	0a 94       	dec	r0
    1304:	e2 f7       	brpl	.-8      	; 0x12fe <init_lcd4bit+0x78>
    1306:	46 2b       	or	r20, r22
    1308:	24 2b       	or	r18, r20
    130a:	29 2b       	or	r18, r25
    130c:	21 83       	std	Z+1, r18	; 0x01
	for (int i=0;i<4;i++)
    130e:	00 e0       	ldi	r16, 0x00	; 0
    1310:	10 e0       	ldi	r17, 0x00	; 0
    1312:	0b c0       	rjmp	.+22     	; 0x132a <init_lcd4bit+0xa4>
	{
		GPIO_PIN_mode(LCD.GPIO_PORT_DATA,LCD.DPINS_NUMEBER[i],OUTPUT);
    1314:	eb 81       	ldd	r30, Y+3	; 0x03
    1316:	fc 81       	ldd	r31, Y+4	; 0x04
    1318:	e0 0f       	add	r30, r16
    131a:	f1 1f       	adc	r31, r17
    131c:	41 e0       	ldi	r20, 0x01	; 1
    131e:	60 81       	ld	r22, Z
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
void init_lcd4bit(LCD_ID LCD)
{
	GPIO_PORT_ID* GPIO_PORT_CMD =  PGPIO_PORT_get_register(LCD.GPIO_PORT_CMD);
	
	GPIO_PORT_CMD->DDR_ID |= (1<<LCD.rs)|(1<<LCD.rw)|(1<<LCD.en);
	for (int i=0;i<4;i++)
    1326:	0f 5f       	subi	r16, 0xFF	; 255
    1328:	1f 4f       	sbci	r17, 0xFF	; 255
    132a:	04 30       	cpi	r16, 0x04	; 4
    132c:	11 05       	cpc	r17, r1
    132e:	94 f3       	brlt	.-28     	; 0x1314 <init_lcd4bit+0x8e>
    1330:	2f ef       	ldi	r18, 0xFF	; 255
    1332:	89 ef       	ldi	r24, 0xF9	; 249
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	21 50       	subi	r18, 0x01	; 1
    1338:	80 40       	sbci	r24, 0x00	; 0
    133a:	90 40       	sbci	r25, 0x00	; 0
    133c:	e1 f7       	brne	.-8      	; 0x1336 <init_lcd4bit+0xb0>
    133e:	00 c0       	rjmp	.+0      	; 0x1340 <init_lcd4bit+0xba>
    1340:	00 00       	nop
	{
		GPIO_PIN_mode(LCD.GPIO_PORT_DATA,LCD.DPINS_NUMEBER[i],OUTPUT);
	}
	_delay_ms(20);		/* LCD Power ON delay always >15ms */
	
	lcd_cmd(LCD,0x33);
    1342:	83 e3       	ldi	r24, 0x33	; 51
    1344:	8f 93       	push	r24
    1346:	89 80       	ldd	r8, Y+1	; 0x01
    1348:	9a 80       	ldd	r9, Y+2	; 0x02
    134a:	ab 80       	ldd	r10, Y+3	; 0x03
    134c:	bc 80       	ldd	r11, Y+4	; 0x04
    134e:	cd 80       	ldd	r12, Y+5	; 0x05
    1350:	de 80       	ldd	r13, Y+6	; 0x06
    1352:	ef 80       	ldd	r14, Y+7	; 0x07
    1354:	f8 84       	ldd	r15, Y+8	; 0x08
    1356:	09 85       	ldd	r16, Y+9	; 0x09
    1358:	1a 85       	ldd	r17, Y+10	; 0x0a
    135a:	2b 85       	ldd	r18, Y+11	; 0x0b
    135c:	3c 85       	ldd	r19, Y+12	; 0x0c
    135e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1360:	5e 85       	ldd	r21, Y+14	; 0x0e
    1362:	6f 85       	ldd	r22, Y+15	; 0x0f
    1364:	78 89       	ldd	r23, Y+16	; 0x10
    1366:	89 89       	ldd	r24, Y+17	; 0x11
    1368:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
	lcd_cmd(LCD,0x32);	/* Send for 4 bit initialization of LCD  */
    136c:	82 e3       	ldi	r24, 0x32	; 50
    136e:	8f 93       	push	r24
    1370:	89 80       	ldd	r8, Y+1	; 0x01
    1372:	9a 80       	ldd	r9, Y+2	; 0x02
    1374:	ab 80       	ldd	r10, Y+3	; 0x03
    1376:	bc 80       	ldd	r11, Y+4	; 0x04
    1378:	cd 80       	ldd	r12, Y+5	; 0x05
    137a:	de 80       	ldd	r13, Y+6	; 0x06
    137c:	ef 80       	ldd	r14, Y+7	; 0x07
    137e:	f8 84       	ldd	r15, Y+8	; 0x08
    1380:	09 85       	ldd	r16, Y+9	; 0x09
    1382:	1a 85       	ldd	r17, Y+10	; 0x0a
    1384:	2b 85       	ldd	r18, Y+11	; 0x0b
    1386:	3c 85       	ldd	r19, Y+12	; 0x0c
    1388:	4d 85       	ldd	r20, Y+13	; 0x0d
    138a:	5e 85       	ldd	r21, Y+14	; 0x0e
    138c:	6f 85       	ldd	r22, Y+15	; 0x0f
    138e:	78 89       	ldd	r23, Y+16	; 0x10
    1390:	89 89       	ldd	r24, Y+17	; 0x11
    1392:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
	lcd_cmd(LCD,0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
    1396:	88 e2       	ldi	r24, 0x28	; 40
    1398:	8f 93       	push	r24
    139a:	89 80       	ldd	r8, Y+1	; 0x01
    139c:	9a 80       	ldd	r9, Y+2	; 0x02
    139e:	ab 80       	ldd	r10, Y+3	; 0x03
    13a0:	bc 80       	ldd	r11, Y+4	; 0x04
    13a2:	cd 80       	ldd	r12, Y+5	; 0x05
    13a4:	de 80       	ldd	r13, Y+6	; 0x06
    13a6:	ef 80       	ldd	r14, Y+7	; 0x07
    13a8:	f8 84       	ldd	r15, Y+8	; 0x08
    13aa:	09 85       	ldd	r16, Y+9	; 0x09
    13ac:	1a 85       	ldd	r17, Y+10	; 0x0a
    13ae:	2b 85       	ldd	r18, Y+11	; 0x0b
    13b0:	3c 85       	ldd	r19, Y+12	; 0x0c
    13b2:	4d 85       	ldd	r20, Y+13	; 0x0d
    13b4:	5e 85       	ldd	r21, Y+14	; 0x0e
    13b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    13b8:	78 89       	ldd	r23, Y+16	; 0x10
    13ba:	89 89       	ldd	r24, Y+17	; 0x11
    13bc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
	lcd_cmd(LCD,0x0c);	/* Display on cursor off */
    13c0:	8c e0       	ldi	r24, 0x0C	; 12
    13c2:	8f 93       	push	r24
    13c4:	89 80       	ldd	r8, Y+1	; 0x01
    13c6:	9a 80       	ldd	r9, Y+2	; 0x02
    13c8:	ab 80       	ldd	r10, Y+3	; 0x03
    13ca:	bc 80       	ldd	r11, Y+4	; 0x04
    13cc:	cd 80       	ldd	r12, Y+5	; 0x05
    13ce:	de 80       	ldd	r13, Y+6	; 0x06
    13d0:	ef 80       	ldd	r14, Y+7	; 0x07
    13d2:	f8 84       	ldd	r15, Y+8	; 0x08
    13d4:	09 85       	ldd	r16, Y+9	; 0x09
    13d6:	1a 85       	ldd	r17, Y+10	; 0x0a
    13d8:	2b 85       	ldd	r18, Y+11	; 0x0b
    13da:	3c 85       	ldd	r19, Y+12	; 0x0c
    13dc:	4d 85       	ldd	r20, Y+13	; 0x0d
    13de:	5e 85       	ldd	r21, Y+14	; 0x0e
    13e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    13e2:	78 89       	ldd	r23, Y+16	; 0x10
    13e4:	89 89       	ldd	r24, Y+17	; 0x11
    13e6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
	lcd_cmd(LCD,0x06);	/* Increment cursor (shift cursor to right) */
    13ea:	86 e0       	ldi	r24, 0x06	; 6
    13ec:	8f 93       	push	r24
    13ee:	89 80       	ldd	r8, Y+1	; 0x01
    13f0:	9a 80       	ldd	r9, Y+2	; 0x02
    13f2:	ab 80       	ldd	r10, Y+3	; 0x03
    13f4:	bc 80       	ldd	r11, Y+4	; 0x04
    13f6:	cd 80       	ldd	r12, Y+5	; 0x05
    13f8:	de 80       	ldd	r13, Y+6	; 0x06
    13fa:	ef 80       	ldd	r14, Y+7	; 0x07
    13fc:	f8 84       	ldd	r15, Y+8	; 0x08
    13fe:	09 85       	ldd	r16, Y+9	; 0x09
    1400:	1a 85       	ldd	r17, Y+10	; 0x0a
    1402:	2b 85       	ldd	r18, Y+11	; 0x0b
    1404:	3c 85       	ldd	r19, Y+12	; 0x0c
    1406:	4d 85       	ldd	r20, Y+13	; 0x0d
    1408:	5e 85       	ldd	r21, Y+14	; 0x0e
    140a:	6f 85       	ldd	r22, Y+15	; 0x0f
    140c:	78 89       	ldd	r23, Y+16	; 0x10
    140e:	89 89       	ldd	r24, Y+17	; 0x11
    1410:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
	lcd_cmd(LCD,0x01);	/* Clear display screen */
    1414:	81 e0       	ldi	r24, 0x01	; 1
    1416:	8f 93       	push	r24
    1418:	89 80       	ldd	r8, Y+1	; 0x01
    141a:	9a 80       	ldd	r9, Y+2	; 0x02
    141c:	ab 80       	ldd	r10, Y+3	; 0x03
    141e:	bc 80       	ldd	r11, Y+4	; 0x04
    1420:	cd 80       	ldd	r12, Y+5	; 0x05
    1422:	de 80       	ldd	r13, Y+6	; 0x06
    1424:	ef 80       	ldd	r14, Y+7	; 0x07
    1426:	f8 84       	ldd	r15, Y+8	; 0x08
    1428:	09 85       	ldd	r16, Y+9	; 0x09
    142a:	1a 85       	ldd	r17, Y+10	; 0x0a
    142c:	2b 85       	ldd	r18, Y+11	; 0x0b
    142e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1430:	4d 85       	ldd	r20, Y+13	; 0x0d
    1432:	5e 85       	ldd	r21, Y+14	; 0x0e
    1434:	6f 85       	ldd	r22, Y+15	; 0x0f
    1436:	78 89       	ldd	r23, Y+16	; 0x10
    1438:	89 89       	ldd	r24, Y+17	; 0x11
    143a:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
}
    143e:	0f 90       	pop	r0
    1440:	0f 90       	pop	r0
    1442:	0f 90       	pop	r0
    1444:	0f 90       	pop	r0
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	61 96       	adiw	r28, 0x11	; 17
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	df 90       	pop	r13
    1464:	cf 90       	pop	r12
    1466:	bf 90       	pop	r11
    1468:	af 90       	pop	r10
    146a:	9f 90       	pop	r9
    146c:	8f 90       	pop	r8
    146e:	08 95       	ret

Disassembly of section .text.init_lcd:

0000271a <init_lcd>:
	}
}


LCD_ID init_lcd(LCD_DISPLAY_MODE_ID LCD_DISPLAY_MODE,GPIO_PORT GPIO_PORT_DATA, char* DPINS_NUMEBER,GPIO_PORT GPIO_PORT_CMD,char* CPINS_NUMEBER)
{
    271a:	8f 92       	push	r8
    271c:	9f 92       	push	r9
    271e:	af 92       	push	r10
    2720:	bf 92       	push	r11
    2722:	cf 92       	push	r12
    2724:	df 92       	push	r13
    2726:	ef 92       	push	r14
    2728:	ff 92       	push	r15
    272a:	0f 93       	push	r16
    272c:	1f 93       	push	r17
    272e:	cf 93       	push	r28
    2730:	df 93       	push	r29
    2732:	ec 01       	movw	r28, r24
    2734:	f7 01       	movw	r30, r14
	
	LCD_ID LCD = {LCD_DISPLAY_MODE,GPIO_PORT_DATA,DPINS_NUMEBER,GPIO_PORT_CMD,CPINS_NUMEBER[0],CPINS_NUMEBER[1],CPINS_NUMEBER[2],0,0};
    2736:	68 83       	st	Y, r22
    2738:	49 83       	std	Y+1, r20	; 0x01
    273a:	3b 83       	std	Y+3, r19	; 0x03
    273c:	2a 83       	std	Y+2, r18	; 0x02
    273e:	0c 83       	std	Y+4, r16	; 0x04
    2740:	80 81       	ld	r24, Z
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	81 81       	ldd	r24, Z+1	; 0x01
    2746:	8e 83       	std	Y+6, r24	; 0x06
    2748:	82 81       	ldd	r24, Z+2	; 0x02
    274a:	8f 83       	std	Y+7, r24	; 0x07
    274c:	18 86       	std	Y+8, r1	; 0x08
    274e:	19 86       	std	Y+9, r1	; 0x09
    2750:	1a 86       	std	Y+10, r1	; 0x0a
    2752:	1b 86       	std	Y+11, r1	; 0x0b
    2754:	1c 86       	std	Y+12, r1	; 0x0c
    2756:	1d 86       	std	Y+13, r1	; 0x0d
    2758:	1e 86       	std	Y+14, r1	; 0x0e
    275a:	1f 86       	std	Y+15, r1	; 0x0f
    275c:	18 8a       	std	Y+16, r1	; 0x10
	switch(LCD_DISPLAY_MODE)
    275e:	66 23       	and	r22, r22
    2760:	b1 f0       	breq	.+44     	; 0x278e <init_lcd+0x74>
    2762:	61 30       	cpi	r22, 0x01	; 1
    2764:	39 f5       	brne	.+78     	; 0x27b4 <init_lcd+0x9a>
	{
		case LCD_8BIT:
			
			init_lcd8bit( LCD );
    2766:	86 2e       	mov	r8, r22
    2768:	94 2e       	mov	r9, r20
    276a:	aa 80       	ldd	r10, Y+2	; 0x02
    276c:	bb 80       	ldd	r11, Y+3	; 0x03
    276e:	c0 2e       	mov	r12, r16
    2770:	dd 80       	ldd	r13, Y+5	; 0x05
    2772:	ee 80       	ldd	r14, Y+6	; 0x06
    2774:	f8 2e       	mov	r15, r24
    2776:	00 e0       	ldi	r16, 0x00	; 0
    2778:	10 e0       	ldi	r17, 0x00	; 0
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	40 e0       	ldi	r20, 0x00	; 0
    2780:	50 e0       	ldi	r21, 0x00	; 0
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	70 e0       	ldi	r23, 0x00	; 0
    2786:	80 e0       	ldi	r24, 0x00	; 0
    2788:	0e 94 22 05 	call	0xa44	; 0xa44 <init_lcd8bit>
			break;
    278c:	13 c0       	rjmp	.+38     	; 0x27b4 <init_lcd+0x9a>
		case LCD_4BIT:
		
			init_lcd4bit( LCD);
    278e:	88 80       	ld	r8, Y
    2790:	99 80       	ldd	r9, Y+1	; 0x01
    2792:	aa 80       	ldd	r10, Y+2	; 0x02
    2794:	bb 80       	ldd	r11, Y+3	; 0x03
    2796:	cc 80       	ldd	r12, Y+4	; 0x04
    2798:	dd 80       	ldd	r13, Y+5	; 0x05
    279a:	ee 80       	ldd	r14, Y+6	; 0x06
    279c:	ff 80       	ldd	r15, Y+7	; 0x07
    279e:	08 85       	ldd	r16, Y+8	; 0x08
    27a0:	19 85       	ldd	r17, Y+9	; 0x09
    27a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    27a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    27a6:	4c 85       	ldd	r20, Y+12	; 0x0c
    27a8:	5d 85       	ldd	r21, Y+13	; 0x0d
    27aa:	6e 85       	ldd	r22, Y+14	; 0x0e
    27ac:	7f 85       	ldd	r23, Y+15	; 0x0f
    27ae:	88 89       	ldd	r24, Y+16	; 0x10
    27b0:	0e 94 43 09 	call	0x1286	; 0x1286 <init_lcd4bit>

			break;
		
	}
	return LCD;
}
    27b4:	ce 01       	movw	r24, r28
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	1f 91       	pop	r17
    27bc:	0f 91       	pop	r16
    27be:	ff 90       	pop	r15
    27c0:	ef 90       	pop	r14
    27c2:	df 90       	pop	r13
    27c4:	cf 90       	pop	r12
    27c6:	bf 90       	pop	r11
    27c8:	af 90       	pop	r10
    27ca:	9f 90       	pop	r9
    27cc:	8f 90       	pop	r8
    27ce:	08 95       	ret

Disassembly of section .text.lcd_char:

00001bd4 <lcd_char>:
	lcd_cmd(LCD,0x0c);	/* Display on cursor off */
	lcd_cmd(LCD,0x06);	/* Increment cursor (shift cursor to right) */
	lcd_cmd(LCD,0x01);	/* Clear display screen */
}
void lcd_char(LCD_ID LCD,unsigned char chars)
{
    1bd4:	8f 92       	push	r8
    1bd6:	9f 92       	push	r9
    1bd8:	af 92       	push	r10
    1bda:	bf 92       	push	r11
    1bdc:	cf 92       	push	r12
    1bde:	df 92       	push	r13
    1be0:	ef 92       	push	r14
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	61 97       	sbiw	r28, 0x11	; 17
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	de bf       	out	0x3e, r29	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	cd bf       	out	0x3d, r28	; 61
    1bfc:	89 82       	std	Y+1, r8	; 0x01
    1bfe:	9a 82       	std	Y+2, r9	; 0x02
    1c00:	ab 82       	std	Y+3, r10	; 0x03
    1c02:	bc 82       	std	Y+4, r11	; 0x04
    1c04:	cd 82       	std	Y+5, r12	; 0x05
    1c06:	de 82       	std	Y+6, r13	; 0x06
    1c08:	ef 82       	std	Y+7, r14	; 0x07
    1c0a:	f8 86       	std	Y+8, r15	; 0x08
    1c0c:	09 87       	std	Y+9, r16	; 0x09
    1c0e:	1a 87       	std	Y+10, r17	; 0x0a
    1c10:	2b 87       	std	Y+11, r18	; 0x0b
    1c12:	3c 87       	std	Y+12, r19	; 0x0c
    1c14:	4d 87       	std	Y+13, r20	; 0x0d
    1c16:	5e 87       	std	Y+14, r21	; 0x0e
    1c18:	6f 87       	std	Y+15, r22	; 0x0f
    1c1a:	78 8b       	std	Y+16, r23	; 0x10
    1c1c:	89 8b       	std	Y+17, r24	; 0x11
	GPIO_PORT_ID* GPIO_PORT_CMD =  PGPIO_PORT_get_register(LCD.GPIO_PORT_CMD);
    1c1e:	8c 2d       	mov	r24, r12
    1c20:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
    1c24:	8c 01       	movw	r16, r24
	GPIO_PORT_ID* GPIO_PORT_DATA=  PGPIO_PORT_get_register(LCD.GPIO_PORT_DATA);
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
    1c2c:	fc 01       	movw	r30, r24
	switch(LCD.LCD_DISPLAY_MODE)
    1c2e:	99 81       	ldd	r25, Y+1	; 0x01
    1c30:	99 23       	and	r25, r25
    1c32:	09 f4       	brne	.+2      	; 0x1c36 <lcd_char+0x62>
    1c34:	43 c0       	rjmp	.+134    	; 0x1cbc <lcd_char+0xe8>
    1c36:	91 30       	cpi	r25, 0x01	; 1
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <lcd_char+0x68>
    1c3a:	94 c0       	rjmp	.+296    	; 0x1d64 <lcd_char+0x190>
	{
		
		case LCD_8BIT:
		
			GPIO_PORT_DATA->PORT_ID = chars;
    1c3c:	28 a1       	ldd	r18, Y+32	; 0x20
    1c3e:	22 83       	std	Z+2, r18	; 0x02
			GPIO_PORT_CMD->PORT_ID |= (1<<LCD.rs);
    1c40:	d8 01       	movw	r26, r16
    1c42:	12 96       	adiw	r26, 0x02	; 2
    1c44:	4c 91       	ld	r20, X
    1c46:	12 97       	sbiw	r26, 0x02	; 2
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	9c 01       	movw	r18, r24
    1c4e:	0e 80       	ldd	r0, Y+6	; 0x06
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <lcd_char+0x82>
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <lcd_char+0x7e>
    1c5a:	24 2b       	or	r18, r20
    1c5c:	12 96       	adiw	r26, 0x02	; 2
    1c5e:	2c 93       	st	X, r18
    1c60:	12 97       	sbiw	r26, 0x02	; 2
			GPIO_PORT_CMD->PORT_ID &= ~(1<<LCD.rw);
    1c62:	12 96       	adiw	r26, 0x02	; 2
    1c64:	3c 91       	ld	r19, X
    1c66:	12 97       	sbiw	r26, 0x02	; 2
    1c68:	ac 01       	movw	r20, r24
    1c6a:	0f 80       	ldd	r0, Y+7	; 0x07
    1c6c:	02 c0       	rjmp	.+4      	; 0x1c72 <lcd_char+0x9e>
    1c6e:	44 0f       	add	r20, r20
    1c70:	55 1f       	adc	r21, r21
    1c72:	0a 94       	dec	r0
    1c74:	e2 f7       	brpl	.-8      	; 0x1c6e <lcd_char+0x9a>
    1c76:	24 2f       	mov	r18, r20
    1c78:	20 95       	com	r18
    1c7a:	23 23       	and	r18, r19
    1c7c:	12 96       	adiw	r26, 0x02	; 2
    1c7e:	2c 93       	st	X, r18
    1c80:	12 97       	sbiw	r26, 0x02	; 2
			GPIO_PORT_CMD->PORT_ID |= (1<<LCD.en);
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	2c 91       	ld	r18, X
    1c86:	12 97       	sbiw	r26, 0x02	; 2
    1c88:	08 84       	ldd	r0, Y+8	; 0x08
    1c8a:	02 c0       	rjmp	.+4      	; 0x1c90 <lcd_char+0xbc>
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	0a 94       	dec	r0
    1c92:	e2 f7       	brpl	.-8      	; 0x1c8c <lcd_char+0xb8>
    1c94:	92 2f       	mov	r25, r18
    1c96:	98 2b       	or	r25, r24
    1c98:	12 96       	adiw	r26, 0x02	; 2
    1c9a:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c9c:	b5 e0       	ldi	r27, 0x05	; 5
    1c9e:	ba 95       	dec	r27
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <lcd_char+0xca>
    1ca2:	00 00       	nop
			_delay_us(1);
			GPIO_PORT_CMD->PORT_ID &= ~(1<<LCD.en);
    1ca4:	f8 01       	movw	r30, r16
    1ca6:	92 81       	ldd	r25, Z+2	; 0x02
    1ca8:	80 95       	com	r24
    1caa:	89 23       	and	r24, r25
    1cac:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1cae:	8f ed       	ldi	r24, 0xDF	; 223
    1cb0:	9e e2       	ldi	r25, 0x2E	; 46
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <lcd_char+0xde>
    1cb6:	00 c0       	rjmp	.+0      	; 0x1cb8 <lcd_char+0xe4>
    1cb8:	00 00       	nop
    1cba:	54 c0       	rjmp	.+168    	; 0x1d64 <lcd_char+0x190>
		case LCD_4BIT:
		
	
		

		GPIO_PORT_DATA->PORT_ID = (GPIO_PORT_DATA->PORT_ID & 0x0F) | (chars & 0xF0);/* Sending upper nibble */
    1cbc:	82 81       	ldd	r24, Z+2	; 0x02
    1cbe:	8f 70       	andi	r24, 0x0F	; 15
    1cc0:	98 a1       	ldd	r25, Y+32	; 0x20
    1cc2:	90 7f       	andi	r25, 0xF0	; 240
    1cc4:	89 2b       	or	r24, r25
    1cc6:	82 83       	std	Z+2, r24	; 0x02
		GPIO_PORT_CMD->PORT_ID |= (1<<LCD.rs);		
    1cc8:	d8 01       	movw	r26, r16
    1cca:	12 96       	adiw	r26, 0x02	; 2
    1ccc:	2c 91       	ld	r18, X
    1cce:	12 97       	sbiw	r26, 0x02	; 2
    1cd0:	41 e0       	ldi	r20, 0x01	; 1
    1cd2:	50 e0       	ldi	r21, 0x00	; 0
    1cd4:	ca 01       	movw	r24, r20
    1cd6:	0e 80       	ldd	r0, Y+6	; 0x06
    1cd8:	02 c0       	rjmp	.+4      	; 0x1cde <lcd_char+0x10a>
    1cda:	88 0f       	add	r24, r24
    1cdc:	99 1f       	adc	r25, r25
    1cde:	0a 94       	dec	r0
    1ce0:	e2 f7       	brpl	.-8      	; 0x1cda <lcd_char+0x106>
    1ce2:	82 2b       	or	r24, r18
    1ce4:	12 96       	adiw	r26, 0x02	; 2
    1ce6:	8c 93       	st	X, r24
    1ce8:	12 97       	sbiw	r26, 0x02	; 2
		GPIO_PORT_CMD->PORT_ID |= (1<<LCD.en);		/* Enable pulse */
    1cea:	12 96       	adiw	r26, 0x02	; 2
    1cec:	8c 91       	ld	r24, X
    1cee:	12 97       	sbiw	r26, 0x02	; 2
    1cf0:	08 84       	ldd	r0, Y+8	; 0x08
    1cf2:	02 c0       	rjmp	.+4      	; 0x1cf8 <lcd_char+0x124>
    1cf4:	44 0f       	add	r20, r20
    1cf6:	55 1f       	adc	r21, r21
    1cf8:	0a 94       	dec	r0
    1cfa:	e2 f7       	brpl	.-8      	; 0x1cf4 <lcd_char+0x120>
    1cfc:	84 2b       	or	r24, r20
    1cfe:	12 96       	adiw	r26, 0x02	; 2
    1d00:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d02:	b5 e0       	ldi	r27, 0x05	; 5
    1d04:	ba 95       	dec	r27
    1d06:	f1 f7       	brne	.-4      	; 0x1d04 <lcd_char+0x130>
    1d08:	00 00       	nop
		_delay_us(1);
		GPIO_PORT_CMD->PORT_ID &= ~ (1<<LCD.en);
    1d0a:	d8 01       	movw	r26, r16
    1d0c:	12 96       	adiw	r26, 0x02	; 2
    1d0e:	9c 91       	ld	r25, X
    1d10:	12 97       	sbiw	r26, 0x02	; 2
    1d12:	84 2f       	mov	r24, r20
    1d14:	80 95       	com	r24
    1d16:	98 23       	and	r25, r24
    1d18:	12 96       	adiw	r26, 0x02	; 2
    1d1a:	9c 93       	st	X, r25
    1d1c:	af e1       	ldi	r26, 0x1F	; 31
    1d1e:	b3 e0       	ldi	r27, 0x03	; 3
    1d20:	11 97       	sbiw	r26, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <lcd_char+0x14c>
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <lcd_char+0x152>
    1d26:	00 00       	nop
		_delay_us(200);
		GPIO_PORT_DATA->PORT_ID = (GPIO_PORT_DATA->PORT_ID & 0x0F) | (chars << 4);/* Sending lower nibble */
    1d28:	92 81       	ldd	r25, Z+2	; 0x02
    1d2a:	68 a1       	ldd	r22, Y+32	; 0x20
    1d2c:	b0 e1       	ldi	r27, 0x10	; 16
    1d2e:	6b 9f       	mul	r22, r27
    1d30:	90 01       	movw	r18, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	9f 70       	andi	r25, 0x0F	; 15
    1d36:	29 2b       	or	r18, r25
    1d38:	22 83       	std	Z+2, r18	; 0x02
		GPIO_PORT_CMD->PORT_ID |= (1<<LCD.en);
    1d3a:	d8 01       	movw	r26, r16
    1d3c:	12 96       	adiw	r26, 0x02	; 2
    1d3e:	9c 91       	ld	r25, X
    1d40:	12 97       	sbiw	r26, 0x02	; 2
    1d42:	49 2b       	or	r20, r25
    1d44:	12 96       	adiw	r26, 0x02	; 2
    1d46:	4c 93       	st	X, r20
    1d48:	b5 e0       	ldi	r27, 0x05	; 5
    1d4a:	ba 95       	dec	r27
    1d4c:	f1 f7       	brne	.-4      	; 0x1d4a <lcd_char+0x176>
    1d4e:	00 00       	nop
		_delay_us(1);
		GPIO_PORT_CMD->PORT_ID &= ~ (1<<LCD.en);
    1d50:	f8 01       	movw	r30, r16
    1d52:	92 81       	ldd	r25, Z+2	; 0x02
    1d54:	89 23       	and	r24, r25
    1d56:	82 83       	std	Z+2, r24	; 0x02
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1d58:	8f e3       	ldi	r24, 0x3F	; 63
    1d5a:	9f e1       	ldi	r25, 0x1F	; 31
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <lcd_char+0x188>
    1d60:	00 c0       	rjmp	.+0      	; 0x1d62 <lcd_char+0x18e>
    1d62:	00 00       	nop
		
		break;
				
	}

}
    1d64:	61 96       	adiw	r28, 0x11	; 17
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	df 91       	pop	r29
    1d72:	cf 91       	pop	r28
    1d74:	1f 91       	pop	r17
    1d76:	0f 91       	pop	r16
    1d78:	ff 90       	pop	r15
    1d7a:	ef 90       	pop	r14
    1d7c:	df 90       	pop	r13
    1d7e:	cf 90       	pop	r12
    1d80:	bf 90       	pop	r11
    1d82:	af 90       	pop	r10
    1d84:	9f 90       	pop	r9
    1d86:	8f 90       	pop	r8
    1d88:	08 95       	ret

Disassembly of section .text.lcd_clear:

00002a72 <lcd_clear>:
	LCD->postion_row = row;
	lcd_string( LCD,string);
}

void lcd_clear(LCD_ID* LCD)
{
    2a72:	8f 92       	push	r8
    2a74:	9f 92       	push	r9
    2a76:	af 92       	push	r10
    2a78:	bf 92       	push	r11
    2a7a:	cf 92       	push	r12
    2a7c:	df 92       	push	r13
    2a7e:	ef 92       	push	r14
    2a80:	ff 92       	push	r15
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	ec 01       	movw	r28, r24
	LCD->postion_pointer = 0;
    2a8c:	18 86       	std	Y+8, r1	; 0x08
    2a8e:	19 86       	std	Y+9, r1	; 0x09
    2a90:	1a 86       	std	Y+10, r1	; 0x0a
    2a92:	1b 86       	std	Y+11, r1	; 0x0b
    2a94:	1c 86       	std	Y+12, r1	; 0x0c
    2a96:	1d 86       	std	Y+13, r1	; 0x0d
    2a98:	1e 86       	std	Y+14, r1	; 0x0e
    2a9a:	1f 86       	std	Y+15, r1	; 0x0f
	LCD->postion_row = 0;
    2a9c:	18 8a       	std	Y+16, r1	; 0x10
	lcd_cmd ( *LCD,0x01);		/* clear display */
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	8f 93       	push	r24
    2aa2:	88 80       	ld	r8, Y
    2aa4:	99 80       	ldd	r9, Y+1	; 0x01
    2aa6:	aa 80       	ldd	r10, Y+2	; 0x02
    2aa8:	bb 80       	ldd	r11, Y+3	; 0x03
    2aaa:	cc 80       	ldd	r12, Y+4	; 0x04
    2aac:	dd 80       	ldd	r13, Y+5	; 0x05
    2aae:	ee 80       	ldd	r14, Y+6	; 0x06
    2ab0:	ff 80       	ldd	r15, Y+7	; 0x07
    2ab2:	08 85       	ldd	r16, Y+8	; 0x08
    2ab4:	19 85       	ldd	r17, Y+9	; 0x09
    2ab6:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ab8:	3b 85       	ldd	r19, Y+11	; 0x0b
    2aba:	4c 85       	ldd	r20, Y+12	; 0x0c
    2abc:	5d 85       	ldd	r21, Y+13	; 0x0d
    2abe:	6e 85       	ldd	r22, Y+14	; 0x0e
    2ac0:	7f 85       	ldd	r23, Y+15	; 0x0f
    2ac2:	88 89       	ldd	r24, Y+16	; 0x10
    2ac4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
	lcd_cmd ( *LCD,0x80);		/* cursor at home position */
    2ac8:	80 e8       	ldi	r24, 0x80	; 128
    2aca:	8f 93       	push	r24
    2acc:	88 80       	ld	r8, Y
    2ace:	99 80       	ldd	r9, Y+1	; 0x01
    2ad0:	aa 80       	ldd	r10, Y+2	; 0x02
    2ad2:	bb 80       	ldd	r11, Y+3	; 0x03
    2ad4:	cc 80       	ldd	r12, Y+4	; 0x04
    2ad6:	dd 80       	ldd	r13, Y+5	; 0x05
    2ad8:	ee 80       	ldd	r14, Y+6	; 0x06
    2ada:	ff 80       	ldd	r15, Y+7	; 0x07
    2adc:	08 85       	ldd	r16, Y+8	; 0x08
    2ade:	19 85       	ldd	r17, Y+9	; 0x09
    2ae0:	2a 85       	ldd	r18, Y+10	; 0x0a
    2ae2:	3b 85       	ldd	r19, Y+11	; 0x0b
    2ae4:	4c 85       	ldd	r20, Y+12	; 0x0c
    2ae6:	5d 85       	ldd	r21, Y+13	; 0x0d
    2ae8:	6e 85       	ldd	r22, Y+14	; 0x0e
    2aea:	7f 85       	ldd	r23, Y+15	; 0x0f
    2aec:	88 89       	ldd	r24, Y+16	; 0x10
    2aee:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	df 91       	pop	r29
    2af8:	cf 91       	pop	r28
    2afa:	1f 91       	pop	r17
    2afc:	0f 91       	pop	r16
    2afe:	ff 90       	pop	r15
    2b00:	ef 90       	pop	r14
    2b02:	df 90       	pop	r13
    2b04:	cf 90       	pop	r12
    2b06:	bf 90       	pop	r11
    2b08:	af 90       	pop	r10
    2b0a:	9f 90       	pop	r9
    2b0c:	8f 90       	pop	r8
    2b0e:	08 95       	ret

Disassembly of section .text.lcd_string:

00001470 <lcd_string>:
	}

}

void lcd_string(LCD_ID* LCD,unsigned char* string)
{
    1470:	2f 92       	push	r2
    1472:	3f 92       	push	r3
    1474:	4f 92       	push	r4
    1476:	5f 92       	push	r5
    1478:	6f 92       	push	r6
    147a:	7f 92       	push	r7
    147c:	8f 92       	push	r8
    147e:	9f 92       	push	r9
    1480:	af 92       	push	r10
    1482:	bf 92       	push	r11
    1484:	cf 92       	push	r12
    1486:	df 92       	push	r13
    1488:	ef 92       	push	r14
    148a:	ff 92       	push	r15
    148c:	0f 93       	push	r16
    148e:	1f 93       	push	r17
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
    1494:	ec 01       	movw	r28, r24
    1496:	1b 01       	movw	r2, r22
	for (int i = 0; string[i] != '\0';i++)
    1498:	61 2c       	mov	r6, r1
    149a:	71 2c       	mov	r7, r1
    149c:	c4 c0       	rjmp	.+392    	; 0x1626 <lcd_string+0x1b6>
	{
		
		if (LCD->postion_pointer>=16)
    149e:	e8 85       	ldd	r30, Y+8	; 0x08
    14a0:	39 85       	ldd	r19, Y+9	; 0x09
    14a2:	4a 85       	ldd	r20, Y+10	; 0x0a
    14a4:	5b 85       	ldd	r21, Y+11	; 0x0b
    14a6:	6c 85       	ldd	r22, Y+12	; 0x0c
    14a8:	7d 85       	ldd	r23, Y+13	; 0x0d
    14aa:	2e 2f       	mov	r18, r30
    14ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    14ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    14b0:	af e0       	ldi	r26, 0x0F	; 15
    14b2:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__cmpdi2_s8>
    14b6:	d1 f0       	breq	.+52     	; 0x14ec <lcd_string+0x7c>
    14b8:	c8 f0       	brcs	.+50     	; 0x14ec <lcd_string+0x7c>
		{
			lcd_cmd( (*LCD),((LCD->postion_pointer-16) & 0x0F)|0xC0);
    14ba:	ef 70       	andi	r30, 0x0F	; 15
    14bc:	e0 6c       	ori	r30, 0xC0	; 192
    14be:	ef 93       	push	r30
    14c0:	88 80       	ld	r8, Y
    14c2:	99 80       	ldd	r9, Y+1	; 0x01
    14c4:	aa 80       	ldd	r10, Y+2	; 0x02
    14c6:	bb 80       	ldd	r11, Y+3	; 0x03
    14c8:	cc 80       	ldd	r12, Y+4	; 0x04
    14ca:	dd 80       	ldd	r13, Y+5	; 0x05
    14cc:	ee 80       	ldd	r14, Y+6	; 0x06
    14ce:	ff 80       	ldd	r15, Y+7	; 0x07
    14d0:	08 85       	ldd	r16, Y+8	; 0x08
    14d2:	19 85       	ldd	r17, Y+9	; 0x09
    14d4:	2a 85       	ldd	r18, Y+10	; 0x0a
    14d6:	3b 85       	ldd	r19, Y+11	; 0x0b
    14d8:	4c 85       	ldd	r20, Y+12	; 0x0c
    14da:	5d 85       	ldd	r21, Y+13	; 0x0d
    14dc:	6e 85       	ldd	r22, Y+14	; 0x0e
    14de:	7f 85       	ldd	r23, Y+15	; 0x0f
    14e0:	88 89       	ldd	r24, Y+16	; 0x10
    14e2:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
			LCD->postion_row = 1;
    14e6:	81 e0       	ldi	r24, 0x01	; 1
    14e8:	88 8b       	std	Y+16, r24	; 0x10
    14ea:	0f 90       	pop	r0
		}	
		
		if (LCD->postion_pointer>=32)
    14ec:	e8 85       	ldd	r30, Y+8	; 0x08
    14ee:	39 85       	ldd	r19, Y+9	; 0x09
    14f0:	4a 85       	ldd	r20, Y+10	; 0x0a
    14f2:	5b 85       	ldd	r21, Y+11	; 0x0b
    14f4:	6c 85       	ldd	r22, Y+12	; 0x0c
    14f6:	7d 85       	ldd	r23, Y+13	; 0x0d
    14f8:	2e 2f       	mov	r18, r30
    14fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    14fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    14fe:	af e1       	ldi	r26, 0x1F	; 31
    1500:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__cmpdi2_s8>
    1504:	d1 f0       	breq	.+52     	; 0x153a <lcd_string+0xca>
    1506:	c8 f0       	brcs	.+50     	; 0x153a <lcd_string+0xca>
		{
			lcd_cmd( *LCD,((LCD->postion_pointer-32) & 0x0F)|0x90);
    1508:	ef 70       	andi	r30, 0x0F	; 15
    150a:	e0 69       	ori	r30, 0x90	; 144
    150c:	ef 93       	push	r30
    150e:	88 80       	ld	r8, Y
    1510:	99 80       	ldd	r9, Y+1	; 0x01
    1512:	aa 80       	ldd	r10, Y+2	; 0x02
    1514:	bb 80       	ldd	r11, Y+3	; 0x03
    1516:	cc 80       	ldd	r12, Y+4	; 0x04
    1518:	dd 80       	ldd	r13, Y+5	; 0x05
    151a:	ee 80       	ldd	r14, Y+6	; 0x06
    151c:	ff 80       	ldd	r15, Y+7	; 0x07
    151e:	08 85       	ldd	r16, Y+8	; 0x08
    1520:	19 85       	ldd	r17, Y+9	; 0x09
    1522:	2a 85       	ldd	r18, Y+10	; 0x0a
    1524:	3b 85       	ldd	r19, Y+11	; 0x0b
    1526:	4c 85       	ldd	r20, Y+12	; 0x0c
    1528:	5d 85       	ldd	r21, Y+13	; 0x0d
    152a:	6e 85       	ldd	r22, Y+14	; 0x0e
    152c:	7f 85       	ldd	r23, Y+15	; 0x0f
    152e:	88 89       	ldd	r24, Y+16	; 0x10
    1530:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
			LCD->postion_row = 2;
    1534:	82 e0       	ldi	r24, 0x02	; 2
    1536:	88 8b       	std	Y+16, r24	; 0x10
    1538:	0f 90       	pop	r0
		}
		
		if (LCD->postion_pointer>=48)
    153a:	e8 85       	ldd	r30, Y+8	; 0x08
    153c:	39 85       	ldd	r19, Y+9	; 0x09
    153e:	4a 85       	ldd	r20, Y+10	; 0x0a
    1540:	5b 85       	ldd	r21, Y+11	; 0x0b
    1542:	6c 85       	ldd	r22, Y+12	; 0x0c
    1544:	7d 85       	ldd	r23, Y+13	; 0x0d
    1546:	2e 2f       	mov	r18, r30
    1548:	8e 85       	ldd	r24, Y+14	; 0x0e
    154a:	9f 85       	ldd	r25, Y+15	; 0x0f
    154c:	af e2       	ldi	r26, 0x2F	; 47
    154e:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__cmpdi2_s8>
    1552:	d1 f0       	breq	.+52     	; 0x1588 <lcd_string+0x118>
    1554:	c8 f0       	brcs	.+50     	; 0x1588 <lcd_string+0x118>
		{
			lcd_cmd( *LCD,((LCD->postion_pointer-64) & 0x0F)|0xD0);
    1556:	ef 70       	andi	r30, 0x0F	; 15
    1558:	e0 6d       	ori	r30, 0xD0	; 208
    155a:	ef 93       	push	r30
    155c:	88 80       	ld	r8, Y
    155e:	99 80       	ldd	r9, Y+1	; 0x01
    1560:	aa 80       	ldd	r10, Y+2	; 0x02
    1562:	bb 80       	ldd	r11, Y+3	; 0x03
    1564:	cc 80       	ldd	r12, Y+4	; 0x04
    1566:	dd 80       	ldd	r13, Y+5	; 0x05
    1568:	ee 80       	ldd	r14, Y+6	; 0x06
    156a:	ff 80       	ldd	r15, Y+7	; 0x07
    156c:	08 85       	ldd	r16, Y+8	; 0x08
    156e:	19 85       	ldd	r17, Y+9	; 0x09
    1570:	2a 85       	ldd	r18, Y+10	; 0x0a
    1572:	3b 85       	ldd	r19, Y+11	; 0x0b
    1574:	4c 85       	ldd	r20, Y+12	; 0x0c
    1576:	5d 85       	ldd	r21, Y+13	; 0x0d
    1578:	6e 85       	ldd	r22, Y+14	; 0x0e
    157a:	7f 85       	ldd	r23, Y+15	; 0x0f
    157c:	88 89       	ldd	r24, Y+16	; 0x10
    157e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
			LCD->postion_row = 3;
    1582:	83 e0       	ldi	r24, 0x03	; 3
    1584:	88 8b       	std	Y+16, r24	; 0x10
    1586:	0f 90       	pop	r0
		}
			
		lcd_char(*LCD,string[i]);
    1588:	f2 01       	movw	r30, r4
    158a:	80 81       	ld	r24, Z
    158c:	8f 93       	push	r24
    158e:	88 80       	ld	r8, Y
    1590:	99 80       	ldd	r9, Y+1	; 0x01
    1592:	aa 80       	ldd	r10, Y+2	; 0x02
    1594:	bb 80       	ldd	r11, Y+3	; 0x03
    1596:	cc 80       	ldd	r12, Y+4	; 0x04
    1598:	dd 80       	ldd	r13, Y+5	; 0x05
    159a:	ee 80       	ldd	r14, Y+6	; 0x06
    159c:	ff 80       	ldd	r15, Y+7	; 0x07
    159e:	08 85       	ldd	r16, Y+8	; 0x08
    15a0:	19 85       	ldd	r17, Y+9	; 0x09
    15a2:	2a 85       	ldd	r18, Y+10	; 0x0a
    15a4:	3b 85       	ldd	r19, Y+11	; 0x0b
    15a6:	4c 85       	ldd	r20, Y+12	; 0x0c
    15a8:	5d 85       	ldd	r21, Y+13	; 0x0d
    15aa:	6e 85       	ldd	r22, Y+14	; 0x0e
    15ac:	7f 85       	ldd	r23, Y+15	; 0x0f
    15ae:	88 89       	ldd	r24, Y+16	; 0x10
    15b0:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <lcd_char>
		
		if (LCD->postion_pointer>=(64))
    15b4:	f8 84       	ldd	r15, Y+8	; 0x08
    15b6:	09 85       	ldd	r16, Y+9	; 0x09
    15b8:	1a 85       	ldd	r17, Y+10	; 0x0a
    15ba:	4b 84       	ldd	r4, Y+11	; 0x0b
    15bc:	5c 84       	ldd	r5, Y+12	; 0x0c
    15be:	bd 85       	ldd	r27, Y+13	; 0x0d
    15c0:	fe 85       	ldd	r31, Y+14	; 0x0e
    15c2:	ef 85       	ldd	r30, Y+15	; 0x0f
    15c4:	0f 90       	pop	r0
    15c6:	2f 2d       	mov	r18, r15
    15c8:	30 2f       	mov	r19, r16
    15ca:	41 2f       	mov	r20, r17
    15cc:	54 2d       	mov	r21, r4
    15ce:	65 2d       	mov	r22, r5
    15d0:	7b 2f       	mov	r23, r27
    15d2:	8f 2f       	mov	r24, r31
    15d4:	9e 2f       	mov	r25, r30
    15d6:	af e3       	ldi	r26, 0x3F	; 63
    15d8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__cmpdi2_s8>
    15dc:	71 f0       	breq	.+28     	; 0x15fa <lcd_string+0x18a>
    15de:	68 f0       	brcs	.+26     	; 0x15fa <lcd_string+0x18a>
		{
			
			lcd_clear(LCD);
    15e0:	ce 01       	movw	r24, r28
    15e2:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
			LCD->postion_pointer = 0;
    15e6:	18 86       	std	Y+8, r1	; 0x08
    15e8:	19 86       	std	Y+9, r1	; 0x09
    15ea:	1a 86       	std	Y+10, r1	; 0x0a
    15ec:	1b 86       	std	Y+11, r1	; 0x0b
    15ee:	1c 86       	std	Y+12, r1	; 0x0c
    15f0:	1d 86       	std	Y+13, r1	; 0x0d
    15f2:	1e 86       	std	Y+14, r1	; 0x0e
    15f4:	1f 86       	std	Y+15, r1	; 0x0f
			LCD->postion_row = 0;
    15f6:	18 8a       	std	Y+16, r1	; 0x10
    15f8:	13 c0       	rjmp	.+38     	; 0x1620 <lcd_string+0x1b0>
			
		}
		else
		LCD->postion_pointer+=1;
    15fa:	2f 2d       	mov	r18, r15
    15fc:	30 2f       	mov	r19, r16
    15fe:	41 2f       	mov	r20, r17
    1600:	54 2d       	mov	r21, r4
    1602:	65 2d       	mov	r22, r5
    1604:	7b 2f       	mov	r23, r27
    1606:	8f 2f       	mov	r24, r31
    1608:	9e 2f       	mov	r25, r30
    160a:	a1 e0       	ldi	r26, 0x01	; 1
    160c:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <__adddi3_s8>
    1610:	28 87       	std	Y+8, r18	; 0x08
    1612:	39 87       	std	Y+9, r19	; 0x09
    1614:	4a 87       	std	Y+10, r20	; 0x0a
    1616:	5b 87       	std	Y+11, r21	; 0x0b
    1618:	6c 87       	std	Y+12, r22	; 0x0c
    161a:	7d 87       	std	Y+13, r23	; 0x0d
    161c:	8e 87       	std	Y+14, r24	; 0x0e
    161e:	9f 87       	std	Y+15, r25	; 0x0f

}

void lcd_string(LCD_ID* LCD,unsigned char* string)
{
	for (int i = 0; string[i] != '\0';i++)
    1620:	ff ef       	ldi	r31, 0xFF	; 255
    1622:	6f 1a       	sub	r6, r31
    1624:	7f 0a       	sbc	r7, r31
    1626:	21 01       	movw	r4, r2
    1628:	46 0c       	add	r4, r6
    162a:	57 1c       	adc	r5, r7
    162c:	f2 01       	movw	r30, r4
    162e:	80 81       	ld	r24, Z
    1630:	81 11       	cpse	r24, r1
    1632:	35 cf       	rjmp	.-406    	; 0x149e <lcd_string+0x2e>
		else
		LCD->postion_pointer+=1;
		

	}
}
    1634:	df 91       	pop	r29
    1636:	cf 91       	pop	r28
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	df 90       	pop	r13
    1642:	cf 90       	pop	r12
    1644:	bf 90       	pop	r11
    1646:	af 90       	pop	r10
    1648:	9f 90       	pop	r9
    164a:	8f 90       	pop	r8
    164c:	7f 90       	pop	r7
    164e:	6f 90       	pop	r6
    1650:	5f 90       	pop	r5
    1652:	4f 90       	pop	r4
    1654:	3f 90       	pop	r3
    1656:	2f 90       	pop	r2
    1658:	08 95       	ret

Disassembly of section .text.lcd_string_pos:

00001834 <lcd_string_pos>:

void lcd_string_pos(LCD_ID* LCD,int row,int coulm,unsigned char* string)
{
    1834:	2f 92       	push	r2
    1836:	3f 92       	push	r3
    1838:	4f 92       	push	r4
    183a:	5f 92       	push	r5
    183c:	6f 92       	push	r6
    183e:	7f 92       	push	r7
    1840:	8f 92       	push	r8
    1842:	9f 92       	push	r9
    1844:	af 92       	push	r10
    1846:	bf 92       	push	r11
    1848:	cf 92       	push	r12
    184a:	df 92       	push	r13
    184c:	ef 92       	push	r14
    184e:	ff 92       	push	r15
    1850:	0f 93       	push	r16
    1852:	1f 93       	push	r17
    1854:	cf 93       	push	r28
    1856:	df 93       	push	r29
    1858:	ec 01       	movw	r28, r24
    185a:	2b 01       	movw	r4, r22
    185c:	3a 01       	movw	r6, r20
    185e:	19 01       	movw	r2, r18
	if (row == 0 )
    1860:	67 2b       	or	r22, r23
    1862:	61 f5       	brne	.+88     	; 0x18bc <lcd_string_pos+0x88>
	{
		lcd_cmd( *LCD,(coulm & 0x0F)|0x80);
    1864:	84 2f       	mov	r24, r20
    1866:	8f 70       	andi	r24, 0x0F	; 15
    1868:	80 68       	ori	r24, 0x80	; 128
    186a:	8f 93       	push	r24
    186c:	88 80       	ld	r8, Y
    186e:	99 80       	ldd	r9, Y+1	; 0x01
    1870:	aa 80       	ldd	r10, Y+2	; 0x02
    1872:	bb 80       	ldd	r11, Y+3	; 0x03
    1874:	cc 80       	ldd	r12, Y+4	; 0x04
    1876:	dd 80       	ldd	r13, Y+5	; 0x05
    1878:	ee 80       	ldd	r14, Y+6	; 0x06
    187a:	ff 80       	ldd	r15, Y+7	; 0x07
    187c:	08 85       	ldd	r16, Y+8	; 0x08
    187e:	19 85       	ldd	r17, Y+9	; 0x09
    1880:	2a 85       	ldd	r18, Y+10	; 0x0a
    1882:	3b 85       	ldd	r19, Y+11	; 0x0b
    1884:	4c 85       	ldd	r20, Y+12	; 0x0c
    1886:	5d 85       	ldd	r21, Y+13	; 0x0d
    1888:	6e 85       	ldd	r22, Y+14	; 0x0e
    188a:	7f 85       	ldd	r23, Y+15	; 0x0f
    188c:	88 89       	ldd	r24, Y+16	; 0x10
    188e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
		LCD->postion_pointer = coulm+(row*16);
    1892:	92 01       	movw	r18, r4
    1894:	22 95       	swap	r18
    1896:	32 95       	swap	r19
    1898:	30 7f       	andi	r19, 0xF0	; 240
    189a:	32 27       	eor	r19, r18
    189c:	20 7f       	andi	r18, 0xF0	; 240
    189e:	32 27       	eor	r19, r18
    18a0:	26 0d       	add	r18, r6
    18a2:	37 1d       	adc	r19, r7
    18a4:	83 2f       	mov	r24, r19
    18a6:	88 0f       	add	r24, r24
    18a8:	88 0b       	sbc	r24, r24
    18aa:	28 87       	std	Y+8, r18	; 0x08
    18ac:	39 87       	std	Y+9, r19	; 0x09
    18ae:	8a 87       	std	Y+10, r24	; 0x0a
    18b0:	8b 87       	std	Y+11, r24	; 0x0b
    18b2:	8c 87       	std	Y+12, r24	; 0x0c
    18b4:	8d 87       	std	Y+13, r24	; 0x0d
    18b6:	8e 87       	std	Y+14, r24	; 0x0e
    18b8:	8f 87       	std	Y+15, r24	; 0x0f
    18ba:	0f 90       	pop	r0
		
	}
	if(row == 1)
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	48 16       	cp	r4, r24
    18c0:	51 04       	cpc	r5, r1
    18c2:	61 f5       	brne	.+88     	; 0x191c <lcd_string_pos+0xe8>
	{
		lcd_cmd( *LCD,(coulm & 0x0F)|0xC0);
    18c4:	86 2d       	mov	r24, r6
    18c6:	8f 70       	andi	r24, 0x0F	; 15
    18c8:	80 6c       	ori	r24, 0xC0	; 192
    18ca:	8f 93       	push	r24
    18cc:	88 80       	ld	r8, Y
    18ce:	99 80       	ldd	r9, Y+1	; 0x01
    18d0:	aa 80       	ldd	r10, Y+2	; 0x02
    18d2:	bb 80       	ldd	r11, Y+3	; 0x03
    18d4:	cc 80       	ldd	r12, Y+4	; 0x04
    18d6:	dd 80       	ldd	r13, Y+5	; 0x05
    18d8:	ee 80       	ldd	r14, Y+6	; 0x06
    18da:	ff 80       	ldd	r15, Y+7	; 0x07
    18dc:	08 85       	ldd	r16, Y+8	; 0x08
    18de:	19 85       	ldd	r17, Y+9	; 0x09
    18e0:	2a 85       	ldd	r18, Y+10	; 0x0a
    18e2:	3b 85       	ldd	r19, Y+11	; 0x0b
    18e4:	4c 85       	ldd	r20, Y+12	; 0x0c
    18e6:	5d 85       	ldd	r21, Y+13	; 0x0d
    18e8:	6e 85       	ldd	r22, Y+14	; 0x0e
    18ea:	7f 85       	ldd	r23, Y+15	; 0x0f
    18ec:	88 89       	ldd	r24, Y+16	; 0x10
    18ee:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
		LCD->postion_pointer = coulm+(row*16);
    18f2:	92 01       	movw	r18, r4
    18f4:	22 95       	swap	r18
    18f6:	32 95       	swap	r19
    18f8:	30 7f       	andi	r19, 0xF0	; 240
    18fa:	32 27       	eor	r19, r18
    18fc:	20 7f       	andi	r18, 0xF0	; 240
    18fe:	32 27       	eor	r19, r18
    1900:	26 0d       	add	r18, r6
    1902:	37 1d       	adc	r19, r7
    1904:	83 2f       	mov	r24, r19
    1906:	88 0f       	add	r24, r24
    1908:	88 0b       	sbc	r24, r24
    190a:	28 87       	std	Y+8, r18	; 0x08
    190c:	39 87       	std	Y+9, r19	; 0x09
    190e:	8a 87       	std	Y+10, r24	; 0x0a
    1910:	8b 87       	std	Y+11, r24	; 0x0b
    1912:	8c 87       	std	Y+12, r24	; 0x0c
    1914:	8d 87       	std	Y+13, r24	; 0x0d
    1916:	8e 87       	std	Y+14, r24	; 0x0e
    1918:	8f 87       	std	Y+15, r24	; 0x0f
    191a:	0f 90       	pop	r0
	}
	if (row == 2)
    191c:	82 e0       	ldi	r24, 0x02	; 2
    191e:	48 16       	cp	r4, r24
    1920:	51 04       	cpc	r5, r1
    1922:	61 f5       	brne	.+88     	; 0x197c <lcd_string_pos+0x148>
	{
		lcd_cmd( *LCD,(coulm & 0x0F)|0x90 );
    1924:	86 2d       	mov	r24, r6
    1926:	8f 70       	andi	r24, 0x0F	; 15
    1928:	80 69       	ori	r24, 0x90	; 144
    192a:	8f 93       	push	r24
    192c:	88 80       	ld	r8, Y
    192e:	99 80       	ldd	r9, Y+1	; 0x01
    1930:	aa 80       	ldd	r10, Y+2	; 0x02
    1932:	bb 80       	ldd	r11, Y+3	; 0x03
    1934:	cc 80       	ldd	r12, Y+4	; 0x04
    1936:	dd 80       	ldd	r13, Y+5	; 0x05
    1938:	ee 80       	ldd	r14, Y+6	; 0x06
    193a:	ff 80       	ldd	r15, Y+7	; 0x07
    193c:	08 85       	ldd	r16, Y+8	; 0x08
    193e:	19 85       	ldd	r17, Y+9	; 0x09
    1940:	2a 85       	ldd	r18, Y+10	; 0x0a
    1942:	3b 85       	ldd	r19, Y+11	; 0x0b
    1944:	4c 85       	ldd	r20, Y+12	; 0x0c
    1946:	5d 85       	ldd	r21, Y+13	; 0x0d
    1948:	6e 85       	ldd	r22, Y+14	; 0x0e
    194a:	7f 85       	ldd	r23, Y+15	; 0x0f
    194c:	88 89       	ldd	r24, Y+16	; 0x10
    194e:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
		LCD->postion_pointer = coulm+(row*16);
    1952:	92 01       	movw	r18, r4
    1954:	22 95       	swap	r18
    1956:	32 95       	swap	r19
    1958:	30 7f       	andi	r19, 0xF0	; 240
    195a:	32 27       	eor	r19, r18
    195c:	20 7f       	andi	r18, 0xF0	; 240
    195e:	32 27       	eor	r19, r18
    1960:	26 0d       	add	r18, r6
    1962:	37 1d       	adc	r19, r7
    1964:	83 2f       	mov	r24, r19
    1966:	88 0f       	add	r24, r24
    1968:	88 0b       	sbc	r24, r24
    196a:	28 87       	std	Y+8, r18	; 0x08
    196c:	39 87       	std	Y+9, r19	; 0x09
    196e:	8a 87       	std	Y+10, r24	; 0x0a
    1970:	8b 87       	std	Y+11, r24	; 0x0b
    1972:	8c 87       	std	Y+12, r24	; 0x0c
    1974:	8d 87       	std	Y+13, r24	; 0x0d
    1976:	8e 87       	std	Y+14, r24	; 0x0e
    1978:	8f 87       	std	Y+15, r24	; 0x0f
    197a:	0f 90       	pop	r0
	}
	if (row == 3)
    197c:	83 e0       	ldi	r24, 0x03	; 3
    197e:	48 16       	cp	r4, r24
    1980:	51 04       	cpc	r5, r1
    1982:	61 f5       	brne	.+88     	; 0x19dc <lcd_string_pos+0x1a8>
	{
		lcd_cmd( *LCD,(coulm & 0x0F)|0xD0 );
    1984:	86 2d       	mov	r24, r6
    1986:	8f 70       	andi	r24, 0x0F	; 15
    1988:	80 6d       	ori	r24, 0xD0	; 208
    198a:	8f 93       	push	r24
    198c:	88 80       	ld	r8, Y
    198e:	99 80       	ldd	r9, Y+1	; 0x01
    1990:	aa 80       	ldd	r10, Y+2	; 0x02
    1992:	bb 80       	ldd	r11, Y+3	; 0x03
    1994:	cc 80       	ldd	r12, Y+4	; 0x04
    1996:	dd 80       	ldd	r13, Y+5	; 0x05
    1998:	ee 80       	ldd	r14, Y+6	; 0x06
    199a:	ff 80       	ldd	r15, Y+7	; 0x07
    199c:	08 85       	ldd	r16, Y+8	; 0x08
    199e:	19 85       	ldd	r17, Y+9	; 0x09
    19a0:	2a 85       	ldd	r18, Y+10	; 0x0a
    19a2:	3b 85       	ldd	r19, Y+11	; 0x0b
    19a4:	4c 85       	ldd	r20, Y+12	; 0x0c
    19a6:	5d 85       	ldd	r21, Y+13	; 0x0d
    19a8:	6e 85       	ldd	r22, Y+14	; 0x0e
    19aa:	7f 85       	ldd	r23, Y+15	; 0x0f
    19ac:	88 89       	ldd	r24, Y+16	; 0x10
    19ae:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
		LCD->postion_pointer = coulm+(row*16);
    19b2:	c2 01       	movw	r24, r4
    19b4:	82 95       	swap	r24
    19b6:	92 95       	swap	r25
    19b8:	90 7f       	andi	r25, 0xF0	; 240
    19ba:	98 27       	eor	r25, r24
    19bc:	80 7f       	andi	r24, 0xF0	; 240
    19be:	98 27       	eor	r25, r24
    19c0:	68 0e       	add	r6, r24
    19c2:	79 1e       	adc	r7, r25
    19c4:	87 2d       	mov	r24, r7
    19c6:	88 0f       	add	r24, r24
    19c8:	88 0b       	sbc	r24, r24
    19ca:	68 86       	std	Y+8, r6	; 0x08
    19cc:	79 86       	std	Y+9, r7	; 0x09
    19ce:	8a 87       	std	Y+10, r24	; 0x0a
    19d0:	8b 87       	std	Y+11, r24	; 0x0b
    19d2:	8c 87       	std	Y+12, r24	; 0x0c
    19d4:	8d 87       	std	Y+13, r24	; 0x0d
    19d6:	8e 87       	std	Y+14, r24	; 0x0e
    19d8:	8f 87       	std	Y+15, r24	; 0x0f
    19da:	0f 90       	pop	r0
	}

	LCD->postion_row = row;
    19dc:	48 8a       	std	Y+16, r4	; 0x10
	lcd_string( LCD,string);
    19de:	b1 01       	movw	r22, r2
    19e0:	ce 01       	movw	r24, r28
    19e2:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
}
    19e6:	df 91       	pop	r29
    19e8:	cf 91       	pop	r28
    19ea:	1f 91       	pop	r17
    19ec:	0f 91       	pop	r16
    19ee:	ff 90       	pop	r15
    19f0:	ef 90       	pop	r14
    19f2:	df 90       	pop	r13
    19f4:	cf 90       	pop	r12
    19f6:	bf 90       	pop	r11
    19f8:	af 90       	pop	r10
    19fa:	9f 90       	pop	r9
    19fc:	8f 90       	pop	r8
    19fe:	7f 90       	pop	r7
    1a00:	6f 90       	pop	r6
    1a02:	5f 90       	pop	r5
    1a04:	4f 90       	pop	r4
    1a06:	3f 90       	pop	r3
    1a08:	2f 90       	pop	r2
    1a0a:	08 95       	ret

Disassembly of section .text.lcd_delete:

000025a4 <lcd_delete>:
	lcd_cmd ( *LCD,0x01);		/* clear display */
	lcd_cmd ( *LCD,0x80);		/* cursor at home position */
}

void lcd_delete(LCD_ID* LCD,char number_of_chars_to_delete)
{
    25a4:	7f 92       	push	r7
    25a6:	8f 92       	push	r8
    25a8:	9f 92       	push	r9
    25aa:	af 92       	push	r10
    25ac:	bf 92       	push	r11
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	ec 01       	movw	r28, r24
    25c0:	a6 2e       	mov	r10, r22
	unsigned char* white =(unsigned char*) malloc(sizeof(unsigned char)*(number_of_chars_to_delete+1));
    25c2:	06 2f       	mov	r16, r22
    25c4:	10 e0       	ldi	r17, 0x00	; 0
    25c6:	c8 01       	movw	r24, r16
    25c8:	01 96       	adiw	r24, 0x01	; 1
    25ca:	0e 94 28 11 	call	0x2250	; 0x2250 <__simple_malloc>
    25ce:	4c 01       	movw	r8, r24
	for (int i = 0;i<number_of_chars_to_delete;i++)
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	06 c0       	rjmp	.+12     	; 0x25e2 <lcd_delete+0x3e>
	{
		white[i] = ' ';
    25d6:	f4 01       	movw	r30, r8
    25d8:	e8 0f       	add	r30, r24
    25da:	f9 1f       	adc	r31, r25
    25dc:	20 e2       	ldi	r18, 0x20	; 32
    25de:	20 83       	st	Z, r18
}

void lcd_delete(LCD_ID* LCD,char number_of_chars_to_delete)
{
	unsigned char* white =(unsigned char*) malloc(sizeof(unsigned char)*(number_of_chars_to_delete+1));
	for (int i = 0;i<number_of_chars_to_delete;i++)
    25e0:	01 96       	adiw	r24, 0x01	; 1
    25e2:	80 17       	cp	r24, r16
    25e4:	91 07       	cpc	r25, r17
    25e6:	bc f3       	brlt	.-18     	; 0x25d6 <lcd_delete+0x32>
	{
		white[i] = ' ';
	}
	*(white+number_of_chars_to_delete) = '\0';
    25e8:	f4 01       	movw	r30, r8
    25ea:	ea 0d       	add	r30, r10
    25ec:	f1 1d       	adc	r31, r1
    25ee:	10 82       	st	Z, r1
	unsigned char lcd_column = (LCD->postion_pointer-number_of_chars_to_delete);
    25f0:	28 85       	ldd	r18, Y+8	; 0x08
    25f2:	39 85       	ldd	r19, Y+9	; 0x09
    25f4:	4a 85       	ldd	r20, Y+10	; 0x0a
    25f6:	5b 85       	ldd	r21, Y+11	; 0x0b
    25f8:	6c 85       	ldd	r22, Y+12	; 0x0c
    25fa:	7d 85       	ldd	r23, Y+13	; 0x0d
    25fc:	72 2e       	mov	r7, r18
    25fe:	7a 18       	sub	r7, r10
	if ((LCD->postion_pointer-number_of_chars_to_delete)>=0)
	{
		 LCD->postion_pointer = (LCD->postion_pointer-number_of_chars_to_delete);
    2600:	8e 85       	ldd	r24, Y+14	; 0x0e
    2602:	9f 85       	ldd	r25, Y+15	; 0x0f
    2604:	b1 2c       	mov	r11, r1
    2606:	c1 2c       	mov	r12, r1
    2608:	d1 2c       	mov	r13, r1
    260a:	e1 2c       	mov	r14, r1
    260c:	f1 2c       	mov	r15, r1
    260e:	00 e0       	ldi	r16, 0x00	; 0
    2610:	10 e0       	ldi	r17, 0x00	; 0
    2612:	0e 94 9d 1d 	call	0x3b3a	; 0x3b3a <__subdi3>
    2616:	28 87       	std	Y+8, r18	; 0x08
    2618:	39 87       	std	Y+9, r19	; 0x09
    261a:	4a 87       	std	Y+10, r20	; 0x0a
    261c:	5b 87       	std	Y+11, r21	; 0x0b
    261e:	6c 87       	std	Y+12, r22	; 0x0c
    2620:	7d 87       	std	Y+13, r23	; 0x0d
    2622:	8e 87       	std	Y+14, r24	; 0x0e
    2624:	9f 87       	std	Y+15, r25	; 0x0f
	}
	lcd_string(LCD,white);
    2626:	b4 01       	movw	r22, r8
    2628:	ce 01       	movw	r24, r28
    262a:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
	LCD->postion_pointer = lcd_column;
    262e:	78 86       	std	Y+8, r7	; 0x08
    2630:	19 86       	std	Y+9, r1	; 0x09
    2632:	1a 86       	std	Y+10, r1	; 0x0a
    2634:	1b 86       	std	Y+11, r1	; 0x0b
    2636:	1c 86       	std	Y+12, r1	; 0x0c
    2638:	1d 86       	std	Y+13, r1	; 0x0d
    263a:	1e 86       	std	Y+14, r1	; 0x0e
    263c:	1f 86       	std	Y+15, r1	; 0x0f
	free(white);
    263e:	c4 01       	movw	r24, r8
    2640:	0e 94 82 17 	call	0x2f04	; 0x2f04 <__simple_free>
}
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	ff 90       	pop	r15
    264e:	ef 90       	pop	r14
    2650:	df 90       	pop	r13
    2652:	cf 90       	pop	r12
    2654:	bf 90       	pop	r11
    2656:	af 90       	pop	r10
    2658:	9f 90       	pop	r9
    265a:	8f 90       	pop	r8
    265c:	7f 90       	pop	r7
    265e:	08 95       	ret

Disassembly of section .text.lcd_custom_char:

00002660 <lcd_custom_char>:

void lcd_custom_char (LCD_ID* LCD,unsigned char loc, unsigned char *msg)
{
    2660:	4f 92       	push	r4
    2662:	5f 92       	push	r5
    2664:	7f 92       	push	r7
    2666:	8f 92       	push	r8
    2668:	9f 92       	push	r9
    266a:	af 92       	push	r10
    266c:	bf 92       	push	r11
    266e:	cf 92       	push	r12
    2670:	df 92       	push	r13
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
	unsigned char i;
	if(loc<8)
    267e:	68 30       	cpi	r22, 0x08	; 8
    2680:	e0 f5       	brcc	.+120    	; 0x26fa <lcd_custom_char+0x9a>
    2682:	2a 01       	movw	r4, r20
    2684:	ec 01       	movw	r28, r24
	{
		lcd_cmd (*LCD,0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	68 5f       	subi	r22, 0xF8	; 248
    268a:	7f 4f       	sbci	r23, 0xFF	; 255
    268c:	66 0f       	add	r22, r22
    268e:	66 0f       	add	r22, r22
    2690:	66 0f       	add	r22, r22
    2692:	6f 93       	push	r22
    2694:	88 80       	ld	r8, Y
    2696:	99 80       	ldd	r9, Y+1	; 0x01
    2698:	aa 80       	ldd	r10, Y+2	; 0x02
    269a:	bb 80       	ldd	r11, Y+3	; 0x03
    269c:	cc 80       	ldd	r12, Y+4	; 0x04
    269e:	dd 80       	ldd	r13, Y+5	; 0x05
    26a0:	ee 80       	ldd	r14, Y+6	; 0x06
    26a2:	ff 80       	ldd	r15, Y+7	; 0x07
    26a4:	08 85       	ldd	r16, Y+8	; 0x08
    26a6:	19 85       	ldd	r17, Y+9	; 0x09
    26a8:	2a 85       	ldd	r18, Y+10	; 0x0a
    26aa:	3b 85       	ldd	r19, Y+11	; 0x0b
    26ac:	4c 85       	ldd	r20, Y+12	; 0x0c
    26ae:	5d 85       	ldd	r21, Y+13	; 0x0d
    26b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    26b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    26b4:	88 89       	ldd	r24, Y+16	; 0x10
    26b6:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <lcd_cmd>
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    26ba:	0f 90       	pop	r0
    26bc:	71 2c       	mov	r7, r1
    26be:	1a c0       	rjmp	.+52     	; 0x26f4 <lcd_custom_char+0x94>
		lcd_char(*LCD,msg[i]);
    26c0:	f2 01       	movw	r30, r4
    26c2:	e7 0d       	add	r30, r7
    26c4:	f1 1d       	adc	r31, r1
    26c6:	80 81       	ld	r24, Z
    26c8:	8f 93       	push	r24
    26ca:	88 80       	ld	r8, Y
    26cc:	99 80       	ldd	r9, Y+1	; 0x01
    26ce:	aa 80       	ldd	r10, Y+2	; 0x02
    26d0:	bb 80       	ldd	r11, Y+3	; 0x03
    26d2:	cc 80       	ldd	r12, Y+4	; 0x04
    26d4:	dd 80       	ldd	r13, Y+5	; 0x05
    26d6:	ee 80       	ldd	r14, Y+6	; 0x06
    26d8:	ff 80       	ldd	r15, Y+7	; 0x07
    26da:	08 85       	ldd	r16, Y+8	; 0x08
    26dc:	19 85       	ldd	r17, Y+9	; 0x09
    26de:	2a 85       	ldd	r18, Y+10	; 0x0a
    26e0:	3b 85       	ldd	r19, Y+11	; 0x0b
    26e2:	4c 85       	ldd	r20, Y+12	; 0x0c
    26e4:	5d 85       	ldd	r21, Y+13	; 0x0d
    26e6:	6e 85       	ldd	r22, Y+14	; 0x0e
    26e8:	7f 85       	ldd	r23, Y+15	; 0x0f
    26ea:	88 89       	ldd	r24, Y+16	; 0x10
    26ec:	0e 94 ea 0d 	call	0x1bd4	; 0x1bd4 <lcd_char>
{
	unsigned char i;
	if(loc<8)
	{
		lcd_cmd (*LCD,0x40 + (loc*8));	/* Command 0x40 and onwards forces the device to point CGRAM address */
		for(i=0;i<8;i++)	/* Write 8 byte for generation of 1 character */
    26f0:	73 94       	inc	r7
    26f2:	0f 90       	pop	r0
    26f4:	87 e0       	ldi	r24, 0x07	; 7
    26f6:	87 15       	cp	r24, r7
    26f8:	18 f7       	brcc	.-58     	; 0x26c0 <lcd_custom_char+0x60>
		lcd_char(*LCD,msg[i]);
	}
	
    26fa:	df 91       	pop	r29
    26fc:	cf 91       	pop	r28
    26fe:	1f 91       	pop	r17
    2700:	0f 91       	pop	r16
    2702:	ff 90       	pop	r15
    2704:	ef 90       	pop	r14
    2706:	df 90       	pop	r13
    2708:	cf 90       	pop	r12
    270a:	bf 90       	pop	r11
    270c:	af 90       	pop	r10
    270e:	9f 90       	pop	r9
    2710:	8f 90       	pop	r8
    2712:	7f 90       	pop	r7
    2714:	5f 90       	pop	r5
    2716:	4f 90       	pop	r4
    2718:	08 95       	ret

Disassembly of section .text.add_product:

00001eb6 <add_product>:
	
}

	
void add_product(char* product_name,int product_price)
{
    1eb6:	cf 92       	push	r12
    1eb8:	df 92       	push	r13
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	cf 93       	push	r28
    1ec4:	df 93       	push	r29
    1ec6:	00 d0       	rcall	.+0      	; 0x1ec8 <add_product+0x12>
    1ec8:	00 d0       	rcall	.+0      	; 0x1eca <add_product+0x14>
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	6c 01       	movw	r12, r24
    1ed0:	16 2f       	mov	r17, r22
    1ed2:	07 2f       	mov	r16, r23
	int ofset = EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);
    1ed4:	87 e0       	ldi	r24, 0x07	; 7
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    1edc:	e8 2e       	mov	r14, r24
    1ede:	f1 2c       	mov	r15, r1
	char cash[4]={0};
    1ee0:	19 82       	std	Y+1, r1	; 0x01
    1ee2:	1a 82       	std	Y+2, r1	; 0x02
    1ee4:	1b 82       	std	Y+3, r1	; 0x03
    1ee6:	1c 82       	std	Y+4, r1	; 0x04
	sprintf(cash, "%d",product_price);
    1ee8:	0f 93       	push	r16
    1eea:	1f 93       	push	r17
    1eec:	84 ed       	ldi	r24, 0xD4	; 212
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	af 93       	push	r26
    1ef4:	9f 93       	push	r25
    1ef6:	8f 93       	push	r24
    1ef8:	ce 01       	movw	r24, r28
    1efa:	01 96       	adiw	r24, 0x01	; 1
    1efc:	9f 93       	push	r25
    1efe:	8f 93       	push	r24
    1f00:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_sprintf_cdopuxX>
	
	for (int i = 0;i<12;i++)
    1f04:	0f b6       	in	r0, 0x3f	; 63
    1f06:	f8 94       	cli
    1f08:	de bf       	out	0x3e, r29	; 62
    1f0a:	0f be       	out	0x3f, r0	; 63
    1f0c:	cd bf       	out	0x3d, r28	; 61
    1f0e:	00 e0       	ldi	r16, 0x00	; 0
    1f10:	10 e0       	ldi	r17, 0x00	; 0
    1f12:	12 c0       	rjmp	.+36     	; 0x1f38 <add_product+0x82>
	{
		EEPROM_WRITE_BYTE(product_name[i],i+(ofset*20)+10);
    1f14:	84 e1       	ldi	r24, 0x14	; 20
    1f16:	8e 9d       	mul	r24, r14
    1f18:	b0 01       	movw	r22, r0
    1f1a:	8f 9d       	mul	r24, r15
    1f1c:	70 0d       	add	r23, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	60 0f       	add	r22, r16
    1f22:	71 1f       	adc	r23, r17
    1f24:	66 5f       	subi	r22, 0xF6	; 246
    1f26:	7f 4f       	sbci	r23, 0xFF	; 255
    1f28:	f6 01       	movw	r30, r12
    1f2a:	e0 0f       	add	r30, r16
    1f2c:	f1 1f       	adc	r31, r17
    1f2e:	80 81       	ld	r24, Z
    1f30:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <EEPROM_WRITE_BYTE>
{
	int ofset = EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);
	char cash[4]={0};
	sprintf(cash, "%d",product_price);
	
	for (int i = 0;i<12;i++)
    1f34:	0f 5f       	subi	r16, 0xFF	; 255
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	0c 30       	cpi	r16, 0x0C	; 12
    1f3a:	11 05       	cpc	r17, r1
    1f3c:	5c f3       	brlt	.-42     	; 0x1f14 <add_product+0x5e>
    1f3e:	00 e0       	ldi	r16, 0x00	; 0
    1f40:	10 e0       	ldi	r17, 0x00	; 0
    1f42:	16 c0       	rjmp	.+44     	; 0x1f70 <add_product+0xba>
		EEPROM_WRITE_BYTE(product_name[i],i+(ofset*20)+10);
		
	}
	for (int i = 0;i<4;i++)
	{
	EEPROM_WRITE_BYTE(cash[i],i+12+10+(ofset*20));	
    1f44:	b8 01       	movw	r22, r16
    1f46:	6a 5e       	subi	r22, 0xEA	; 234
    1f48:	7f 4f       	sbci	r23, 0xFF	; 255
    1f4a:	24 e1       	ldi	r18, 0x14	; 20
    1f4c:	2e 9d       	mul	r18, r14
    1f4e:	c0 01       	movw	r24, r0
    1f50:	2f 9d       	mul	r18, r15
    1f52:	90 0d       	add	r25, r0
    1f54:	11 24       	eor	r1, r1
    1f56:	68 0f       	add	r22, r24
    1f58:	79 1f       	adc	r23, r25
    1f5a:	e1 e0       	ldi	r30, 0x01	; 1
    1f5c:	f0 e0       	ldi	r31, 0x00	; 0
    1f5e:	ec 0f       	add	r30, r28
    1f60:	fd 1f       	adc	r31, r29
    1f62:	e0 0f       	add	r30, r16
    1f64:	f1 1f       	adc	r31, r17
    1f66:	80 81       	ld	r24, Z
    1f68:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <EEPROM_WRITE_BYTE>
	for (int i = 0;i<12;i++)
	{
		EEPROM_WRITE_BYTE(product_name[i],i+(ofset*20)+10);
		
	}
	for (int i = 0;i<4;i++)
    1f6c:	0f 5f       	subi	r16, 0xFF	; 255
    1f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f70:	04 30       	cpi	r16, 0x04	; 4
    1f72:	11 05       	cpc	r17, r1
    1f74:	3c f3       	brlt	.-50     	; 0x1f44 <add_product+0x8e>
	{
	EEPROM_WRITE_BYTE(cash[i],i+12+10+(ofset*20));	
	}
	
	
	EEPROM_WRITE_BYTE(EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT)+1,BYTE_PRODUCT_COUNT);
    1f76:	87 e0       	ldi	r24, 0x07	; 7
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    1f7e:	67 e0       	ldi	r22, 0x07	; 7
    1f80:	70 e0       	ldi	r23, 0x00	; 0
    1f82:	8f 5f       	subi	r24, 0xFF	; 255
    1f84:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <EEPROM_WRITE_BYTE>
	

}
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	ff 90       	pop	r15
    1f9a:	ef 90       	pop	r14
    1f9c:	df 90       	pop	r13
    1f9e:	cf 90       	pop	r12
    1fa0:	08 95       	ret

Disassembly of section .text.product_on_screen_list:

00001d8a <product_on_screen_list>:
{
	EEPROM_WRITE_BYTE(EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT)-1,EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT));
}

void product_on_screen_list(LCD_ID* LCD ,int start_screen_value)
{
    1d8a:	af 92       	push	r10
    1d8c:	bf 92       	push	r11
    1d8e:	cf 92       	push	r12
    1d90:	df 92       	push	r13
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	cd b7       	in	r28, 0x3d	; 61
    1da0:	de b7       	in	r29, 0x3e	; 62
    1da2:	60 97       	sbiw	r28, 0x10	; 16
    1da4:	0f b6       	in	r0, 0x3f	; 63
    1da6:	f8 94       	cli
    1da8:	de bf       	out	0x3e, r29	; 62
    1daa:	0f be       	out	0x3f, r0	; 63
    1dac:	cd bf       	out	0x3d, r28	; 61
    1dae:	5c 01       	movw	r10, r24
    1db0:	7b 01       	movw	r14, r22
	char ofset = EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);
    1db2:	87 e0       	ldi	r24, 0x07	; 7
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
	for (int i = start_screen_value,j=0;i<EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);i++)
    1dba:	c1 2c       	mov	r12, r1
    1dbc:	d1 2c       	mov	r13, r1
    1dbe:	61 c0       	rjmp	.+194    	; 0x1e82 <product_on_screen_list+0xf8>
	{
	char product_name[12] = {0};
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	31 96       	adiw	r30, 0x01	; 1
    1dc4:	8c e0       	ldi	r24, 0x0C	; 12
    1dc6:	df 01       	movw	r26, r30
    1dc8:	1d 92       	st	X+, r1
    1dca:	8a 95       	dec	r24
    1dcc:	e9 f7       	brne	.-6      	; 0x1dc8 <product_on_screen_list+0x3e>
	char product_price[4]= {0};
    1dce:	1d 86       	std	Y+13, r1	; 0x0d
    1dd0:	1e 86       	std	Y+14, r1	; 0x0e
    1dd2:	1f 86       	std	Y+15, r1	; 0x0f
    1dd4:	18 8a       	std	Y+16, r1	; 0x10
			for (int k = 0;k<12;k++)
    1dd6:	00 e0       	ldi	r16, 0x00	; 0
    1dd8:	10 e0       	ldi	r17, 0x00	; 0
    1dda:	14 c0       	rjmp	.+40     	; 0x1e04 <product_on_screen_list+0x7a>
			{
				product_name[k] = EEPROM_READ_BYTE(k+(i*20)+10);
    1ddc:	24 e1       	ldi	r18, 0x14	; 20
    1dde:	2e 9d       	mul	r18, r14
    1de0:	c0 01       	movw	r24, r0
    1de2:	2f 9d       	mul	r18, r15
    1de4:	90 0d       	add	r25, r0
    1de6:	11 24       	eor	r1, r1
    1de8:	80 0f       	add	r24, r16
    1dea:	91 1f       	adc	r25, r17
    1dec:	0a 96       	adiw	r24, 0x0a	; 10
    1dee:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    1df2:	e1 e0       	ldi	r30, 0x01	; 1
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	ec 0f       	add	r30, r28
    1df8:	fd 1f       	adc	r31, r29
    1dfa:	e0 0f       	add	r30, r16
    1dfc:	f1 1f       	adc	r31, r17
    1dfe:	80 83       	st	Z, r24
	char ofset = EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);
	for (int i = start_screen_value,j=0;i<EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);i++)
	{
	char product_name[12] = {0};
	char product_price[4]= {0};
			for (int k = 0;k<12;k++)
    1e00:	0f 5f       	subi	r16, 0xFF	; 255
    1e02:	1f 4f       	sbci	r17, 0xFF	; 255
    1e04:	0c 30       	cpi	r16, 0x0C	; 12
    1e06:	11 05       	cpc	r17, r1
    1e08:	4c f3       	brlt	.-46     	; 0x1ddc <product_on_screen_list+0x52>
    1e0a:	00 e0       	ldi	r16, 0x00	; 0
    1e0c:	10 e0       	ldi	r17, 0x00	; 0
    1e0e:	16 c0       	rjmp	.+44     	; 0x1e3c <product_on_screen_list+0xb2>
			{
				product_name[k] = EEPROM_READ_BYTE(k+(i*20)+10);
			}
			for (int k =0;k<3;k++)
			{
				product_price[k] = EEPROM_READ_BYTE(k+12+10+(i*20));
    1e10:	98 01       	movw	r18, r16
    1e12:	2a 5e       	subi	r18, 0xEA	; 234
    1e14:	3f 4f       	sbci	r19, 0xFF	; 255
    1e16:	44 e1       	ldi	r20, 0x14	; 20
    1e18:	4e 9d       	mul	r20, r14
    1e1a:	c0 01       	movw	r24, r0
    1e1c:	4f 9d       	mul	r20, r15
    1e1e:	90 0d       	add	r25, r0
    1e20:	11 24       	eor	r1, r1
    1e22:	82 0f       	add	r24, r18
    1e24:	93 1f       	adc	r25, r19
    1e26:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    1e2a:	ed e0       	ldi	r30, 0x0D	; 13
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	ec 0f       	add	r30, r28
    1e30:	fd 1f       	adc	r31, r29
    1e32:	e0 0f       	add	r30, r16
    1e34:	f1 1f       	adc	r31, r17
    1e36:	80 83       	st	Z, r24
	char product_price[4]= {0};
			for (int k = 0;k<12;k++)
			{
				product_name[k] = EEPROM_READ_BYTE(k+(i*20)+10);
			}
			for (int k =0;k<3;k++)
    1e38:	0f 5f       	subi	r16, 0xFF	; 255
    1e3a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3c:	03 30       	cpi	r16, 0x03	; 3
    1e3e:	11 05       	cpc	r17, r1
    1e40:	3c f3       	brlt	.-50     	; 0x1e10 <product_on_screen_list+0x86>
			{
				product_price[k] = EEPROM_READ_BYTE(k+12+10+(i*20));
			}
		
			if(j>2 || i>100)
    1e42:	b3 e0       	ldi	r27, 0x03	; 3
    1e44:	cb 16       	cp	r12, r27
    1e46:	d1 04       	cpc	r13, r1
    1e48:	2c f5       	brge	.+74     	; 0x1e94 <product_on_screen_list+0x10a>
    1e4a:	85 e6       	ldi	r24, 0x65	; 101
    1e4c:	e8 16       	cp	r14, r24
    1e4e:	f1 04       	cpc	r15, r1
    1e50:	0c f5       	brge	.+66     	; 0x1e94 <product_on_screen_list+0x10a>
			{
				return;
			}
			lcd_string_pos(LCD,j,0,product_name);
    1e52:	9e 01       	movw	r18, r28
    1e54:	2f 5f       	subi	r18, 0xFF	; 255
    1e56:	3f 4f       	sbci	r19, 0xFF	; 255
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	b6 01       	movw	r22, r12
    1e5e:	c5 01       	movw	r24, r10
    1e60:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
			lcd_string_pos(LCD,j,13,product_price);
    1e64:	9e 01       	movw	r18, r28
    1e66:	23 5f       	subi	r18, 0xF3	; 243
    1e68:	3f 4f       	sbci	r19, 0xFF	; 255
    1e6a:	4d e0       	ldi	r20, 0x0D	; 13
    1e6c:	50 e0       	ldi	r21, 0x00	; 0
    1e6e:	b6 01       	movw	r22, r12
    1e70:	c5 01       	movw	r24, r10
    1e72:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
			j++;
    1e76:	af ef       	ldi	r26, 0xFF	; 255
    1e78:	ca 1a       	sub	r12, r26
    1e7a:	da 0a       	sbc	r13, r26
}

void product_on_screen_list(LCD_ID* LCD ,int start_screen_value)
{
	char ofset = EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);
	for (int i = start_screen_value,j=0;i<EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT);i++)
    1e7c:	bf ef       	ldi	r27, 0xFF	; 255
    1e7e:	eb 1a       	sub	r14, r27
    1e80:	fb 0a       	sbc	r15, r27
    1e82:	87 e0       	ldi	r24, 0x07	; 7
    1e84:	90 e0       	ldi	r25, 0x00	; 0
    1e86:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	e8 16       	cp	r14, r24
    1e8e:	f9 06       	cpc	r15, r25
    1e90:	0c f4       	brge	.+2      	; 0x1e94 <product_on_screen_list+0x10a>
    1e92:	96 cf       	rjmp	.-212    	; 0x1dc0 <product_on_screen_list+0x36>
			j++;
	}
	
	
	
}
    1e94:	60 96       	adiw	r28, 0x10	; 16
    1e96:	0f b6       	in	r0, 0x3f	; 63
    1e98:	f8 94       	cli
    1e9a:	de bf       	out	0x3e, r29	; 62
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	cd bf       	out	0x3d, r28	; 61
    1ea0:	df 91       	pop	r29
    1ea2:	cf 91       	pop	r28
    1ea4:	1f 91       	pop	r17
    1ea6:	0f 91       	pop	r16
    1ea8:	ff 90       	pop	r15
    1eaa:	ef 90       	pop	r14
    1eac:	df 90       	pop	r13
    1eae:	cf 90       	pop	r12
    1eb0:	bf 90       	pop	r11
    1eb2:	af 90       	pop	r10
    1eb4:	08 95       	ret

Disassembly of section .text.enter_bottun:

00002884 <enter_bottun>:


void enter_bottun(LCD_ID* LCD)
{
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	cd b7       	in	r28, 0x3d	; 61
    288e:	de b7       	in	r29, 0x3e	; 62
    2890:	2a 97       	sbiw	r28, 0x0a	; 10
    2892:	0f b6       	in	r0, 0x3f	; 63
    2894:	f8 94       	cli
    2896:	de bf       	out	0x3e, r29	; 62
    2898:	0f be       	out	0x3f, r0	; 63
    289a:	cd bf       	out	0x3d, r28	; 61
    289c:	8c 01       	movw	r16, r24
		char s[2]={3,'\0'};
    289e:	83 e0       	ldi	r24, 0x03	; 3
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	1a 82       	std	Y+2, r1	; 0x02
		char none[]={' ','\0'};
    28a4:	80 e2       	ldi	r24, 0x20	; 32
    28a6:	8b 83       	std	Y+3, r24	; 0x03
    28a8:	1c 82       	std	Y+4, r1	; 0x04
		char str2 []="enter";
    28aa:	27 ed       	ldi	r18, 0xD7	; 215
    28ac:	30 e0       	ldi	r19, 0x00	; 0
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	86 e0       	ldi	r24, 0x06	; 6
    28b2:	f9 01       	movw	r30, r18
    28b4:	de 01       	movw	r26, r28
    28b6:	15 96       	adiw	r26, 0x05	; 5
    28b8:	74 2f       	mov	r23, r20
    28ba:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
		lcd_string_pos(LCD,3,10,str2);
    28be:	9e 01       	movw	r18, r28
    28c0:	2b 5f       	subi	r18, 0xFB	; 251
    28c2:	3f 4f       	sbci	r19, 0xFF	; 255
    28c4:	4a e0       	ldi	r20, 0x0A	; 10
    28c6:	50 e0       	ldi	r21, 0x00	; 0
    28c8:	63 e0       	ldi	r22, 0x03	; 3
    28ca:	70 e0       	ldi	r23, 0x00	; 0
    28cc:	c8 01       	movw	r24, r16
    28ce:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
		
		while(GPIO_readPIN_value(GPIO_PORTB,7) != 0)
    28d2:	1a c0       	rjmp	.+52     	; 0x2908 <enter_bottun+0x84>
		{
			lcd_string_pos(LCD,3,15,s);
    28d4:	9e 01       	movw	r18, r28
    28d6:	2f 5f       	subi	r18, 0xFF	; 255
    28d8:	3f 4f       	sbci	r19, 0xFF	; 255
    28da:	4f e0       	ldi	r20, 0x0F	; 15
    28dc:	50 e0       	ldi	r21, 0x00	; 0
    28de:	63 e0       	ldi	r22, 0x03	; 3
    28e0:	70 e0       	ldi	r23, 0x00	; 0
    28e2:	c8 01       	movw	r24, r16
    28e4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
    28e8:	8f e3       	ldi	r24, 0x3F	; 63
    28ea:	9c e9       	ldi	r25, 0x9C	; 156
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <enter_bottun+0x68>
    28f0:	00 c0       	rjmp	.+0      	; 0x28f2 <enter_bottun+0x6e>
    28f2:	00 00       	nop
			_delay_ms(10);
			lcd_string_pos(LCD,3,15,none);
    28f4:	9e 01       	movw	r18, r28
    28f6:	2d 5f       	subi	r18, 0xFD	; 253
    28f8:	3f 4f       	sbci	r19, 0xFF	; 255
    28fa:	4f e0       	ldi	r20, 0x0F	; 15
    28fc:	50 e0       	ldi	r21, 0x00	; 0
    28fe:	63 e0       	ldi	r22, 0x03	; 3
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	c8 01       	movw	r24, r16
    2904:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
		char s[2]={3,'\0'};
		char none[]={' ','\0'};
		char str2 []="enter";
		lcd_string_pos(LCD,3,10,str2);
		
		while(GPIO_readPIN_value(GPIO_PORTB,7) != 0)
    2908:	67 e0       	ldi	r22, 0x07	; 7
    290a:	83 e2       	ldi	r24, 0x23	; 35
    290c:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <GPIO_readPIN_value>
    2910:	81 11       	cpse	r24, r1
    2912:	e0 cf       	rjmp	.-64     	; 0x28d4 <enter_bottun+0x50>
			lcd_string_pos(LCD,3,15,s);
			_delay_ms(10);
			lcd_string_pos(LCD,3,15,none);
		}
		
		lcd_clear(LCD);
    2914:	c8 01       	movw	r24, r16
    2916:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
}
    291a:	2a 96       	adiw	r28, 0x0a	; 10
    291c:	0f b6       	in	r0, 0x3f	; 63
    291e:	f8 94       	cli
    2920:	de bf       	out	0x3e, r29	; 62
    2922:	0f be       	out	0x3f, r0	; 63
    2924:	cd bf       	out	0x3d, r28	; 61
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	1f 91       	pop	r17
    292c:	0f 91       	pop	r16
    292e:	08 95       	ret

Disassembly of section .text.help_screen:

0000330e <help_screen>:




void help_screen(LCD_ID* LCD)
{
    330e:	0f 93       	push	r16
    3310:	1f 93       	push	r17
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	cd b7       	in	r28, 0x3d	; 61
    3318:	de b7       	in	r29, 0x3e	; 62
    331a:	6c 97       	sbiw	r28, 0x1c	; 28
    331c:	0f b6       	in	r0, 0x3f	; 63
    331e:	f8 94       	cli
    3320:	de bf       	out	0x3e, r29	; 62
    3322:	0f be       	out	0x3f, r0	; 63
    3324:	cd bf       	out	0x3d, r28	; 61
    3326:	8c 01       	movw	r16, r24
	char str[]= " use the keypad    for move";
    3328:	2d ed       	ldi	r18, 0xDD	; 221
    332a:	30 e0       	ldi	r19, 0x00	; 0
    332c:	40 e0       	ldi	r20, 0x00	; 0
    332e:	8c e1       	ldi	r24, 0x1C	; 28
    3330:	f9 01       	movw	r30, r18
    3332:	de 01       	movw	r26, r28
    3334:	11 96       	adiw	r26, 0x01	; 1
    3336:	74 2f       	mov	r23, r20
    3338:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
	lcd_string(LCD,str);
    333c:	be 01       	movw	r22, r28
    333e:	6f 5f       	subi	r22, 0xFF	; 255
    3340:	7f 4f       	sbci	r23, 0xFF	; 255
    3342:	c8 01       	movw	r24, r16
    3344:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
	enter_bottun(LCD);
    3348:	c8 01       	movw	r24, r16
    334a:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
	
}
    334e:	6c 96       	adiw	r28, 0x1c	; 28
    3350:	0f b6       	in	r0, 0x3f	; 63
    3352:	f8 94       	cli
    3354:	de bf       	out	0x3e, r29	; 62
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	cd bf       	out	0x3d, r28	; 61
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	1f 91       	pop	r17
    3360:	0f 91       	pop	r16
    3362:	08 95       	ret

Disassembly of section .text.program_start_menu:

00003364 <program_start_menu>:
		lcd_clear(LCD);
}


void program_start_menu(LCD_ID* LCD)
{
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	cf 93       	push	r28
    336a:	df 93       	push	r29
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	e1 97       	sbiw	r28, 0x31	; 49
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	8c 01       	movw	r16, r24
	char str[] = "Embedded systemsexam            designer:mohamed";
    337e:	29 ef       	ldi	r18, 0xF9	; 249
    3380:	30 e0       	ldi	r19, 0x00	; 0
    3382:	40 e0       	ldi	r20, 0x00	; 0
    3384:	81 e3       	ldi	r24, 0x31	; 49
    3386:	f9 01       	movw	r30, r18
    3388:	de 01       	movw	r26, r28
    338a:	11 96       	adiw	r26, 0x01	; 1
    338c:	74 2f       	mov	r23, r20
    338e:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
	lcd_string(LCD,str);
    3392:	be 01       	movw	r22, r28
    3394:	6f 5f       	subi	r22, 0xFF	; 255
    3396:	7f 4f       	sbci	r23, 0xFF	; 255
    3398:	c8 01       	movw	r24, r16
    339a:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
	enter_bottun(LCD);
    339e:	c8 01       	movw	r24, r16
    33a0:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
}
    33a4:	e1 96       	adiw	r28, 0x31	; 49
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	1f 91       	pop	r17
    33b6:	0f 91       	pop	r16
    33b8:	08 95       	ret

Disassembly of section .text.user_add_product:

00000e92 <user_add_product>:

//static int count=BYTE_PRODUCT_COUNT;
void delete_product()
{
	EEPROM_WRITE_BYTE(EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT)-1,EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT));
}
     e92:	af 92       	push	r10
     e94:	bf 92       	push	r11
     e96:	cf 92       	push	r12
     e98:	df 92       	push	r13
     e9a:	ef 92       	push	r14
     e9c:	ff 92       	push	r15
     e9e:	0f 93       	push	r16
     ea0:	1f 93       	push	r17
     ea2:	cf 93       	push	r28
     ea4:	df 93       	push	r29
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	e9 97       	sbiw	r28, 0x39	; 57
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	5c 01       	movw	r10, r24
     eb8:	7b 01       	movw	r14, r22
     eba:	2a e2       	ldi	r18, 0x2A	; 42
     ebc:	31 e0       	ldi	r19, 0x01	; 1
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	8c e0       	ldi	r24, 0x0C	; 12
     ec2:	f9 01       	movw	r30, r18
     ec4:	de 01       	movw	r26, r28
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	74 2f       	mov	r23, r20
     eca:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
     ece:	be 01       	movw	r22, r28
     ed0:	6f 5f       	subi	r22, 0xFF	; 255
     ed2:	7f 4f       	sbci	r23, 0xFF	; 255
     ed4:	c5 01       	movw	r24, r10
     ed6:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
     eda:	c5 01       	movw	r24, r10
     edc:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
     ee0:	fe 01       	movw	r30, r28
     ee2:	3d 96       	adiw	r30, 0x0d	; 13
     ee4:	8c e0       	ldi	r24, 0x0C	; 12
     ee6:	df 01       	movw	r26, r30
     ee8:	1d 92       	st	X+, r1
     eea:	8a 95       	dec	r24
     eec:	e9 f7       	brne	.-6      	; 0xee8 <user_add_product+0x56>
     eee:	3c 96       	adiw	r30, 0x0c	; 12
     ef0:	87 e0       	ldi	r24, 0x07	; 7
     ef2:	df 01       	movw	r26, r30
     ef4:	1d 92       	st	X+, r1
     ef6:	8a 95       	dec	r24
     ef8:	e9 f7       	brne	.-6      	; 0xef4 <user_add_product+0x62>
     efa:	26 e3       	ldi	r18, 0x36	; 54
     efc:	31 e0       	ldi	r19, 0x01	; 1
     efe:	40 e0       	ldi	r20, 0x00	; 0
     f00:	8e e0       	ldi	r24, 0x0E	; 14
     f02:	f9 01       	movw	r30, r18
     f04:	de 01       	movw	r26, r28
     f06:	90 96       	adiw	r26, 0x20	; 32
     f08:	74 2f       	mov	r23, r20
     f0a:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
     f0e:	24 e4       	ldi	r18, 0x44	; 68
     f10:	31 e0       	ldi	r19, 0x01	; 1
     f12:	40 e0       	ldi	r20, 0x00	; 0
     f14:	8c e0       	ldi	r24, 0x0C	; 12
     f16:	f9 01       	movw	r30, r18
     f18:	de 01       	movw	r26, r28
     f1a:	9e 96       	adiw	r26, 0x2e	; 46
     f1c:	74 2f       	mov	r23, r20
     f1e:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
     f22:	c1 2c       	mov	r12, r1
     f24:	d1 2c       	mov	r13, r1
     f26:	00 e0       	ldi	r16, 0x00	; 0
     f28:	4c c0       	rjmp	.+152    	; 0xfc2 <user_add_product+0x130>
     f2a:	9e 01       	movw	r18, r28
     f2c:	20 5e       	subi	r18, 0xE0	; 224
     f2e:	3f 4f       	sbci	r19, 0xFF	; 255
     f30:	40 e0       	ldi	r20, 0x00	; 0
     f32:	50 e0       	ldi	r21, 0x00	; 0
     f34:	60 e0       	ldi	r22, 0x00	; 0
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	c5 01       	movw	r24, r10
     f3a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
     f3e:	9e 01       	movw	r18, r28
     f40:	23 5f       	subi	r18, 0xF3	; 243
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	40 e0       	ldi	r20, 0x00	; 0
     f46:	50 e0       	ldi	r21, 0x00	; 0
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	c5 01       	movw	r24, r10
     f4e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	13 c0       	rjmp	.+38     	; 0xf7c <user_add_product+0xea>
     f56:	c7 01       	movw	r24, r14
     f58:	0e 94 02 12 	call	0x2404	; 0x2404 <KEYPAD_get_input>
     f5c:	18 2f       	mov	r17, r24
     f5e:	bf ef       	ldi	r27, 0xFF	; 255
     f60:	21 ee       	ldi	r18, 0xE1	; 225
     f62:	84 e0       	ldi	r24, 0x04	; 4
     f64:	b1 50       	subi	r27, 0x01	; 1
     f66:	20 40       	sbci	r18, 0x00	; 0
     f68:	80 40       	sbci	r24, 0x00	; 0
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <user_add_product+0xd2>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <user_add_product+0xdc>
     f6e:	00 00       	nop
     f70:	67 e0       	ldi	r22, 0x07	; 7
     f72:	83 e2       	ldi	r24, 0x23	; 35
     f74:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <GPIO_readPIN_value>
     f78:	88 23       	and	r24, r24
     f7a:	19 f0       	breq	.+6      	; 0xf82 <user_add_product+0xf0>
     f7c:	11 23       	and	r17, r17
     f7e:	59 f3       	breq	.-42     	; 0xf56 <user_add_product+0xc4>
     f80:	05 c0       	rjmp	.+10     	; 0xf8c <user_add_product+0xfa>
     f82:	0f 2e       	mov	r0, r31
     f84:	fb e0       	ldi	r31, 0x0B	; 11
     f86:	cf 2e       	mov	r12, r31
     f88:	d1 2c       	mov	r13, r1
     f8a:	f0 2d       	mov	r31, r0
     f8c:	13 32       	cpi	r17, 0x23	; 35
     f8e:	09 f4       	brne	.+2      	; 0xf92 <user_add_product+0x100>
     f90:	01 e0       	ldi	r16, 0x01	; 1
     f92:	01 11       	cpse	r16, r1
     f94:	09 c0       	rjmp	.+18     	; 0xfa8 <user_add_product+0x116>
     f96:	ed e0       	ldi	r30, 0x0D	; 13
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	ec 0f       	add	r30, r28
     f9c:	fd 1f       	adc	r31, r29
     f9e:	ec 0d       	add	r30, r12
     fa0:	fd 1d       	adc	r31, r13
     fa2:	8f e1       	ldi	r24, 0x1F	; 31
     fa4:	81 0f       	add	r24, r17
     fa6:	80 83       	st	Z, r24
     fa8:	01 30       	cpi	r16, 0x01	; 1
     faa:	41 f4       	brne	.+16     	; 0xfbc <user_add_product+0x12a>
     fac:	ed e0       	ldi	r30, 0x0D	; 13
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	ec 0f       	add	r30, r28
     fb2:	fd 1f       	adc	r31, r29
     fb4:	ec 0d       	add	r30, r12
     fb6:	fd 1d       	adc	r31, r13
     fb8:	15 5f       	subi	r17, 0xF5	; 245
     fba:	10 83       	st	Z, r17
     fbc:	9f ef       	ldi	r25, 0xFF	; 255
     fbe:	c9 1a       	sub	r12, r25
     fc0:	d9 0a       	sbc	r13, r25
     fc2:	ab e0       	ldi	r26, 0x0B	; 11
     fc4:	ca 16       	cp	r12, r26
     fc6:	d1 04       	cpc	r13, r1
     fc8:	0c f4       	brge	.+2      	; 0xfcc <user_add_product+0x13a>
     fca:	af cf       	rjmp	.-162    	; 0xf2a <user_add_product+0x98>
     fcc:	c5 01       	movw	r24, r10
     fce:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
     fd2:	18 8e       	std	Y+24, r1	; 0x18
     fd4:	c1 2c       	mov	r12, r1
     fd6:	d1 2c       	mov	r13, r1
     fd8:	3b c0       	rjmp	.+118    	; 0x1050 <user_add_product+0x1be>
     fda:	9e 01       	movw	r18, r28
     fdc:	22 5d       	subi	r18, 0xD2	; 210
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	50 e0       	ldi	r21, 0x00	; 0
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	70 e0       	ldi	r23, 0x00	; 0
     fe8:	c5 01       	movw	r24, r10
     fea:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
     fee:	9e 01       	movw	r18, r28
     ff0:	27 5e       	subi	r18, 0xE7	; 231
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	46 e0       	ldi	r20, 0x06	; 6
     ff6:	50 e0       	ldi	r21, 0x00	; 0
     ff8:	63 e0       	ldi	r22, 0x03	; 3
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	c5 01       	movw	r24, r10
     ffe:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
    1002:	10 e0       	ldi	r17, 0x00	; 0
    1004:	13 c0       	rjmp	.+38     	; 0x102c <user_add_product+0x19a>
    1006:	c7 01       	movw	r24, r14
    1008:	0e 94 02 12 	call	0x2404	; 0x2404 <KEYPAD_get_input>
    100c:	18 2f       	mov	r17, r24
    100e:	bf ef       	ldi	r27, 0xFF	; 255
    1010:	21 ee       	ldi	r18, 0xE1	; 225
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	b1 50       	subi	r27, 0x01	; 1
    1016:	20 40       	sbci	r18, 0x00	; 0
    1018:	80 40       	sbci	r24, 0x00	; 0
    101a:	e1 f7       	brne	.-8      	; 0x1014 <user_add_product+0x182>
    101c:	00 c0       	rjmp	.+0      	; 0x101e <user_add_product+0x18c>
    101e:	00 00       	nop
    1020:	67 e0       	ldi	r22, 0x07	; 7
    1022:	83 e2       	ldi	r24, 0x23	; 35
    1024:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <GPIO_readPIN_value>
    1028:	88 23       	and	r24, r24
    102a:	19 f0       	breq	.+6      	; 0x1032 <user_add_product+0x1a0>
    102c:	11 23       	and	r17, r17
    102e:	59 f3       	breq	.-42     	; 0x1006 <user_add_product+0x174>
    1030:	05 c0       	rjmp	.+10     	; 0x103c <user_add_product+0x1aa>
    1032:	0f 2e       	mov	r0, r31
    1034:	f3 e0       	ldi	r31, 0x03	; 3
    1036:	cf 2e       	mov	r12, r31
    1038:	d1 2c       	mov	r13, r1
    103a:	f0 2d       	mov	r31, r0
    103c:	e9 e1       	ldi	r30, 0x19	; 25
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	ec 0f       	add	r30, r28
    1042:	fd 1f       	adc	r31, r29
    1044:	ec 0d       	add	r30, r12
    1046:	fd 1d       	adc	r31, r13
    1048:	10 83       	st	Z, r17
    104a:	9f ef       	ldi	r25, 0xFF	; 255
    104c:	c9 1a       	sub	r12, r25
    104e:	d9 0a       	sbc	r13, r25
    1050:	a4 e0       	ldi	r26, 0x04	; 4
    1052:	ca 16       	cp	r12, r26
    1054:	d1 04       	cpc	r13, r1
    1056:	0c f2       	brlt	.-126    	; 0xfda <user_add_product+0x148>
    1058:	1c 8e       	std	Y+28, r1	; 0x1c
    105a:	be 01       	movw	r22, r28
    105c:	67 5e       	subi	r22, 0xE7	; 231
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	80 e8       	ldi	r24, 0x80	; 128
    1062:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <atoi>
    1066:	bc 01       	movw	r22, r24
    1068:	ce 01       	movw	r24, r28
    106a:	0d 96       	adiw	r24, 0x0d	; 13
    106c:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <add_product>
    1070:	c5 01       	movw	r24, r10
    1072:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
    1076:	e9 96       	adiw	r28, 0x39	; 57
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	df 91       	pop	r29
    1084:	cf 91       	pop	r28
    1086:	1f 91       	pop	r17
    1088:	0f 91       	pop	r16
    108a:	ff 90       	pop	r15
    108c:	ef 90       	pop	r14
    108e:	df 90       	pop	r13
    1090:	cf 90       	pop	r12
    1092:	bf 90       	pop	r11
    1094:	af 90       	pop	r10
    1096:	08 95       	ret

Disassembly of section .text.config_machine:

00000c80 <config_machine>:
 c80:	bf 92       	push	r11
 c82:	cf 92       	push	r12
 c84:	df 92       	push	r13
 c86:	ef 92       	push	r14
 c88:	ff 92       	push	r15
 c8a:	0f 93       	push	r16
 c8c:	1f 93       	push	r17
 c8e:	cf 93       	push	r28
 c90:	df 93       	push	r29
 c92:	cd b7       	in	r28, 0x3d	; 61
 c94:	de b7       	in	r29, 0x3e	; 62
 c96:	c8 55       	subi	r28, 0x58	; 88
 c98:	d1 09       	sbc	r29, r1
 c9a:	0f b6       	in	r0, 0x3f	; 63
 c9c:	f8 94       	cli
 c9e:	de bf       	out	0x3e, r29	; 62
 ca0:	0f be       	out	0x3f, r0	; 63
 ca2:	cd bf       	out	0x3d, r28	; 61
 ca4:	6c 01       	movw	r12, r24
 ca6:	7b 01       	movw	r14, r22
 ca8:	20 e5       	ldi	r18, 0x50	; 80
 caa:	31 e0       	ldi	r19, 0x01	; 1
 cac:	40 e0       	ldi	r20, 0x00	; 0
 cae:	86 e0       	ldi	r24, 0x06	; 6
 cb0:	f9 01       	movw	r30, r18
 cb2:	de 01       	movw	r26, r28
 cb4:	11 96       	adiw	r26, 0x01	; 1
 cb6:	74 2f       	mov	r23, r20
 cb8:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 cbc:	26 e5       	ldi	r18, 0x56	; 86
 cbe:	31 e0       	ldi	r19, 0x01	; 1
 cc0:	40 e0       	ldi	r20, 0x00	; 0
 cc2:	81 e3       	ldi	r24, 0x31	; 49
 cc4:	f9 01       	movw	r30, r18
 cc6:	de 01       	movw	r26, r28
 cc8:	17 96       	adiw	r26, 0x07	; 7
 cca:	74 2f       	mov	r23, r20
 ccc:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 cd0:	fe 01       	movw	r30, r28
 cd2:	f8 96       	adiw	r30, 0x38	; 56
 cd4:	8b e0       	ldi	r24, 0x0B	; 11
 cd6:	df 01       	movw	r26, r30
 cd8:	1d 92       	st	X+, r1
 cda:	8a 95       	dec	r24
 cdc:	e9 f7       	brne	.-6      	; 0xcd8 <config_machine+0x58>
 cde:	9e 01       	movw	r18, r28
 ce0:	29 5f       	subi	r18, 0xF9	; 249
 ce2:	3f 4f       	sbci	r19, 0xFF	; 255
 ce4:	40 e0       	ldi	r20, 0x00	; 0
 ce6:	50 e0       	ldi	r21, 0x00	; 0
 ce8:	60 e0       	ldi	r22, 0x00	; 0
 cea:	70 e0       	ldi	r23, 0x00	; 0
 cec:	c6 01       	movw	r24, r12
 cee:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 cf2:	c6 01       	movw	r24, r12
 cf4:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
 cf8:	9e 01       	movw	r18, r28
 cfa:	2d 5b       	subi	r18, 0xBD	; 189
 cfc:	3f 4f       	sbci	r19, 0xFF	; 255
 cfe:	87 e0       	ldi	r24, 0x07	; 7
 d00:	f9 01       	movw	r30, r18
 d02:	11 92       	st	Z+, r1
 d04:	8a 95       	dec	r24
 d06:	e9 f7       	brne	.-6      	; 0xd02 <config_machine+0x82>
 d08:	45 e0       	ldi	r20, 0x05	; 5
 d0a:	50 e0       	ldi	r21, 0x00	; 0
 d0c:	61 e0       	ldi	r22, 0x01	; 1
 d0e:	70 e0       	ldi	r23, 0x00	; 0
 d10:	c6 01       	movw	r24, r12
 d12:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 d16:	00 e0       	ldi	r16, 0x00	; 0
 d18:	10 e0       	ldi	r17, 0x00	; 0
 d1a:	b1 2c       	mov	r11, r1
 d1c:	a5 c0       	rjmp	.+330    	; 0xe68 <config_machine+0x1e8>
 d1e:	c7 01       	movw	r24, r14
 d20:	0e 94 02 12 	call	0x2404	; 0x2404 <KEYPAD_get_input>
 d24:	e3 e4       	ldi	r30, 0x43	; 67
 d26:	f0 e0       	ldi	r31, 0x00	; 0
 d28:	ec 0f       	add	r30, r28
 d2a:	fd 1f       	adc	r31, r29
 d2c:	e0 0f       	add	r30, r16
 d2e:	f1 1f       	adc	r31, r17
 d30:	80 83       	st	Z, r24
 d32:	e3 e4       	ldi	r30, 0x43	; 67
 d34:	f0 e0       	ldi	r31, 0x00	; 0
 d36:	ec 0f       	add	r30, r28
 d38:	fd 1f       	adc	r31, r29
 d3a:	e0 0f       	add	r30, r16
 d3c:	f1 1f       	adc	r31, r17
 d3e:	80 81       	ld	r24, Z
 d40:	88 23       	and	r24, r24
 d42:	69 f3       	breq	.-38     	; 0xd1e <config_machine+0x9e>
 d44:	ff ef       	ldi	r31, 0xFF	; 255
 d46:	21 ee       	ldi	r18, 0xE1	; 225
 d48:	84 e0       	ldi	r24, 0x04	; 4
 d4a:	f1 50       	subi	r31, 0x01	; 1
 d4c:	20 40       	sbci	r18, 0x00	; 0
 d4e:	80 40       	sbci	r24, 0x00	; 0
 d50:	e1 f7       	brne	.-8      	; 0xd4a <config_machine+0xca>
 d52:	00 c0       	rjmp	.+0      	; 0xd54 <config_machine+0xd4>
 d54:	00 00       	nop
 d56:	9e 01       	movw	r18, r28
 d58:	2d 5b       	subi	r18, 0xBD	; 189
 d5a:	3f 4f       	sbci	r19, 0xFF	; 255
 d5c:	45 e0       	ldi	r20, 0x05	; 5
 d5e:	50 e0       	ldi	r21, 0x00	; 0
 d60:	61 e0       	ldi	r22, 0x01	; 1
 d62:	70 e0       	ldi	r23, 0x00	; 0
 d64:	c6 01       	movw	r24, r12
 d66:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 d6a:	e1 e0       	ldi	r30, 0x01	; 1
 d6c:	f0 e0       	ldi	r31, 0x00	; 0
 d6e:	ec 0f       	add	r30, r28
 d70:	fd 1f       	adc	r31, r29
 d72:	e0 0f       	add	r30, r16
 d74:	f1 1f       	adc	r31, r17
 d76:	90 81       	ld	r25, Z
 d78:	e3 e4       	ldi	r30, 0x43	; 67
 d7a:	f0 e0       	ldi	r31, 0x00	; 0
 d7c:	ec 0f       	add	r30, r28
 d7e:	fd 1f       	adc	r31, r29
 d80:	e0 0f       	add	r30, r16
 d82:	f1 1f       	adc	r31, r17
 d84:	80 81       	ld	r24, Z
 d86:	98 13       	cpse	r25, r24
 d88:	02 c0       	rjmp	.+4      	; 0xd8e <config_machine+0x10e>
 d8a:	b3 94       	inc	r11
 d8c:	01 c0       	rjmp	.+2      	; 0xd90 <config_machine+0x110>
 d8e:	b1 2c       	mov	r11, r1
 d90:	04 30       	cpi	r16, 0x04	; 4
 d92:	11 05       	cpc	r17, r1
 d94:	09 f0       	breq	.+2      	; 0xd98 <config_machine+0x118>
 d96:	66 c0       	rjmp	.+204    	; 0xe64 <config_machine+0x1e4>
 d98:	60 e1       	ldi	r22, 0x10	; 16
 d9a:	c6 01       	movw	r24, r12
 d9c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <lcd_delete>
 da0:	c6 01       	movw	r24, r12
 da2:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
 da6:	95 e0       	ldi	r25, 0x05	; 5
 da8:	b9 16       	cp	r11, r25
 daa:	a9 f1       	breq	.+106    	; 0xe16 <config_machine+0x196>
 dac:	22 e9       	ldi	r18, 0x92	; 146
 dae:	31 e0       	ldi	r19, 0x01	; 1
 db0:	40 e0       	ldi	r20, 0x00	; 0
 db2:	8f e0       	ldi	r24, 0x0F	; 15
 db4:	f9 01       	movw	r30, r18
 db6:	de 01       	movw	r26, r28
 db8:	a6 5b       	subi	r26, 0xB6	; 182
 dba:	bf 4f       	sbci	r27, 0xFF	; 255
 dbc:	74 2f       	mov	r23, r20
 dbe:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 dc2:	9e 01       	movw	r18, r28
 dc4:	26 5b       	subi	r18, 0xB6	; 182
 dc6:	3f 4f       	sbci	r19, 0xFF	; 255
 dc8:	41 e0       	ldi	r20, 0x01	; 1
 dca:	50 e0       	ldi	r21, 0x00	; 0
 dcc:	61 e0       	ldi	r22, 0x01	; 1
 dce:	70 e0       	ldi	r23, 0x00	; 0
 dd0:	c6 01       	movw	r24, r12
 dd2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 dd6:	c6 01       	movw	r24, r12
 dd8:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
 ddc:	80 e0       	ldi	r24, 0x00	; 0
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	08 c0       	rjmp	.+16     	; 0xdf2 <config_machine+0x172>
 de2:	e3 e4       	ldi	r30, 0x43	; 67
 de4:	f0 e0       	ldi	r31, 0x00	; 0
 de6:	ec 0f       	add	r30, r28
 de8:	fd 1f       	adc	r31, r29
 dea:	e8 0f       	add	r30, r24
 dec:	f9 1f       	adc	r31, r25
 dee:	10 82       	st	Z, r1
 df0:	01 96       	adiw	r24, 0x01	; 1
 df2:	85 30       	cpi	r24, 0x05	; 5
 df4:	91 05       	cpc	r25, r1
 df6:	ac f3       	brlt	.-22     	; 0xde2 <config_machine+0x162>
 df8:	9e 01       	movw	r18, r28
 dfa:	29 5f       	subi	r18, 0xF9	; 249
 dfc:	3f 4f       	sbci	r19, 0xFF	; 255
 dfe:	45 e0       	ldi	r20, 0x05	; 5
 e00:	50 e0       	ldi	r21, 0x00	; 0
 e02:	61 e0       	ldi	r22, 0x01	; 1
 e04:	70 e0       	ldi	r23, 0x00	; 0
 e06:	c6 01       	movw	r24, r12
 e08:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 e0c:	c6 01       	movw	r24, r12
 e0e:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
 e12:	00 e0       	ldi	r16, 0x00	; 0
 e14:	10 e0       	ldi	r17, 0x00	; 0
 e16:	a5 e0       	ldi	r26, 0x05	; 5
 e18:	ba 12       	cpse	r11, r26
 e1a:	24 c0       	rjmp	.+72     	; 0xe64 <config_machine+0x1e4>
 e1c:	21 ea       	ldi	r18, 0xA1	; 161
 e1e:	31 e0       	ldi	r19, 0x01	; 1
 e20:	40 e0       	ldi	r20, 0x00	; 0
 e22:	8f e0       	ldi	r24, 0x0F	; 15
 e24:	f9 01       	movw	r30, r18
 e26:	de 01       	movw	r26, r28
 e28:	a6 5b       	subi	r26, 0xB6	; 182
 e2a:	bf 4f       	sbci	r27, 0xFF	; 255
 e2c:	74 2f       	mov	r23, r20
 e2e:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 e32:	9e 01       	movw	r18, r28
 e34:	26 5b       	subi	r18, 0xB6	; 182
 e36:	3f 4f       	sbci	r19, 0xFF	; 255
 e38:	41 e0       	ldi	r20, 0x01	; 1
 e3a:	50 e0       	ldi	r21, 0x00	; 0
 e3c:	61 e0       	ldi	r22, 0x01	; 1
 e3e:	70 e0       	ldi	r23, 0x00	; 0
 e40:	c6 01       	movw	r24, r12
 e42:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 e46:	c6 01       	movw	r24, r12
 e48:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
 e4c:	66 e0       	ldi	r22, 0x06	; 6
 e4e:	70 e0       	ldi	r23, 0x00	; 0
 e50:	84 e4       	ldi	r24, 0x44	; 68
 e52:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <EEPROM_WRITE_BYTE>
 e56:	c6 01       	movw	r24, r12
 e58:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
 e5c:	b7 01       	movw	r22, r14
 e5e:	c6 01       	movw	r24, r12
 e60:	0e 94 49 07 	call	0xe92	; 0xe92 <user_add_product>
 e64:	0f 5f       	subi	r16, 0xFF	; 255
 e66:	1f 4f       	sbci	r17, 0xFF	; 255
 e68:	05 30       	cpi	r16, 0x05	; 5
 e6a:	11 05       	cpc	r17, r1
 e6c:	0c f4       	brge	.+2      	; 0xe70 <config_machine+0x1f0>
 e6e:	61 cf       	rjmp	.-318    	; 0xd32 <config_machine+0xb2>
 e70:	c8 5a       	subi	r28, 0xA8	; 168
 e72:	df 4f       	sbci	r29, 0xFF	; 255
 e74:	0f b6       	in	r0, 0x3f	; 63
 e76:	f8 94       	cli
 e78:	de bf       	out	0x3e, r29	; 62
 e7a:	0f be       	out	0x3f, r0	; 63
 e7c:	cd bf       	out	0x3d, r28	; 61
 e7e:	df 91       	pop	r29
 e80:	cf 91       	pop	r28
 e82:	1f 91       	pop	r17
 e84:	0f 91       	pop	r16
 e86:	ff 90       	pop	r15
 e88:	ef 90       	pop	r14
 e8a:	df 90       	pop	r13
 e8c:	cf 90       	pop	r12
 e8e:	bf 90       	pop	r11
 e90:	08 95       	ret

Disassembly of section .text.frist_setup:

00002ff4 <frist_setup>:
	lcd_string(LCD,str);
	enter_bottun(LCD);
}

void frist_setup(LCD_ID* LCD,KEYPAD_ID* KEYPAD)
{
    2ff4:	ef 92       	push	r14
    2ff6:	ff 92       	push	r15
    2ff8:	0f 93       	push	r16
    2ffa:	1f 93       	push	r17
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	aa 97       	sbiw	r28, 0x2a	; 42
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	8c 01       	movw	r16, r24
    3012:	7b 01       	movw	r14, r22
	
	EEPROM_WRITE_BYTE(0,BYTE_PRODUCT_COUNT); // product list counter
    3014:	67 e0       	ldi	r22, 0x07	; 7
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <EEPROM_WRITE_BYTE>
	
	char str[] = "the machine needto setup for    frist use";
    301e:	20 eb       	ldi	r18, 0xB0	; 176
    3020:	31 e0       	ldi	r19, 0x01	; 1
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	8a e2       	ldi	r24, 0x2A	; 42
    3026:	f9 01       	movw	r30, r18
    3028:	de 01       	movw	r26, r28
    302a:	11 96       	adiw	r26, 0x01	; 1
    302c:	74 2f       	mov	r23, r20
    302e:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
	lcd_string(LCD,str);
    3032:	be 01       	movw	r22, r28
    3034:	6f 5f       	subi	r22, 0xFF	; 255
    3036:	7f 4f       	sbci	r23, 0xFF	; 255
    3038:	c8 01       	movw	r24, r16
    303a:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
	enter_bottun(LCD);
    303e:	c8 01       	movw	r24, r16
    3040:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
	config_machine(LCD,KEYPAD);
    3044:	b7 01       	movw	r22, r14
    3046:	c8 01       	movw	r24, r16
    3048:	0e 94 40 06 	call	0xc80	; 0xc80 <config_machine>
}
    304c:	aa 96       	adiw	r28, 0x2a	; 42
    304e:	0f b6       	in	r0, 0x3f	; 63
    3050:	f8 94       	cli
    3052:	de bf       	out	0x3e, r29	; 62
    3054:	0f be       	out	0x3f, r0	; 63
    3056:	cd bf       	out	0x3d, r28	; 61
    3058:	df 91       	pop	r29
    305a:	cf 91       	pop	r28
    305c:	1f 91       	pop	r17
    305e:	0f 91       	pop	r16
    3060:	ff 90       	pop	r15
    3062:	ef 90       	pop	r14
    3064:	08 95       	ret

Disassembly of section .text.pay_screen:

00000766 <pay_screen>:

//static int count=BYTE_PRODUCT_COUNT;
void delete_product()
{
	EEPROM_WRITE_BYTE(EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT)-1,EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT));
}
 766:	8f 92       	push	r8
 768:	9f 92       	push	r9
 76a:	af 92       	push	r10
 76c:	bf 92       	push	r11
 76e:	cf 92       	push	r12
 770:	df 92       	push	r13
 772:	ef 92       	push	r14
 774:	ff 92       	push	r15
 776:	0f 93       	push	r16
 778:	1f 93       	push	r17
 77a:	cf 93       	push	r28
 77c:	df 93       	push	r29
 77e:	cd b7       	in	r28, 0x3d	; 61
 780:	de b7       	in	r29, 0x3e	; 62
 782:	cf 54       	subi	r28, 0x4F	; 79
 784:	d1 09       	sbc	r29, r1
 786:	0f b6       	in	r0, 0x3f	; 63
 788:	f8 94       	cli
 78a:	de bf       	out	0x3e, r29	; 62
 78c:	0f be       	out	0x3f, r0	; 63
 78e:	cd bf       	out	0x3d, r28	; 61
 790:	5c 01       	movw	r10, r24
 792:	7b 01       	movw	r14, r22
 794:	4a 01       	movw	r8, r20
 796:	07 e0       	ldi	r16, 0x07	; 7
 798:	21 e0       	ldi	r18, 0x01	; 1
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	66 e2       	ldi	r22, 0x26	; 38
 79e:	ce 01       	movw	r24, r28
 7a0:	01 96       	adiw	r24, 0x01	; 1
 7a2:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <init_DCMOTOR>
 7a6:	23 e0       	ldi	r18, 0x03	; 3
 7a8:	42 e0       	ldi	r20, 0x02	; 2
 7aa:	66 e2       	ldi	r22, 0x26	; 38
 7ac:	ce 01       	movw	r24, r28
 7ae:	05 96       	adiw	r24, 0x05	; 5
 7b0:	0e 94 63 1c 	call	0x38c6	; 0x38c6 <init_DCMOTOR>
 7b4:	c1 2c       	mov	r12, r1
 7b6:	d1 2c       	mov	r13, r1
 7b8:	17 c0       	rjmp	.+46     	; 0x7e8 <pay_screen+0x82>
 7ba:	96 01       	movw	r18, r12
 7bc:	2a 5e       	subi	r18, 0xEA	; 234
 7be:	3f 4f       	sbci	r19, 0xFF	; 255
 7c0:	44 e1       	ldi	r20, 0x14	; 20
 7c2:	48 9d       	mul	r20, r8
 7c4:	c0 01       	movw	r24, r0
 7c6:	49 9d       	mul	r20, r9
 7c8:	90 0d       	add	r25, r0
 7ca:	11 24       	eor	r1, r1
 7cc:	82 0f       	add	r24, r18
 7ce:	93 1f       	adc	r25, r19
 7d0:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
 7d4:	e9 e0       	ldi	r30, 0x09	; 9
 7d6:	f0 e0       	ldi	r31, 0x00	; 0
 7d8:	ec 0f       	add	r30, r28
 7da:	fd 1f       	adc	r31, r29
 7dc:	ec 0d       	add	r30, r12
 7de:	fd 1d       	adc	r31, r13
 7e0:	80 83       	st	Z, r24
 7e2:	2f ef       	ldi	r18, 0xFF	; 255
 7e4:	c2 1a       	sub	r12, r18
 7e6:	d2 0a       	sbc	r13, r18
 7e8:	83 e0       	ldi	r24, 0x03	; 3
 7ea:	c8 16       	cp	r12, r24
 7ec:	d1 04       	cpc	r13, r1
 7ee:	2c f3       	brlt	.-54     	; 0x7ba <pay_screen+0x54>
 7f0:	be 01       	movw	r22, r28
 7f2:	67 5f       	subi	r22, 0xF7	; 247
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	80 e8       	ldi	r24, 0x80	; 128
 7f8:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <atoi>
 7fc:	4c 01       	movw	r8, r24
 7fe:	2a ed       	ldi	r18, 0xDA	; 218
 800:	31 e0       	ldi	r19, 0x01	; 1
 802:	40 e0       	ldi	r20, 0x00	; 0
 804:	80 e2       	ldi	r24, 0x20	; 32
 806:	f9 01       	movw	r30, r18
 808:	de 01       	movw	r26, r28
 80a:	1d 96       	adiw	r26, 0x0d	; 13
 80c:	74 2f       	mov	r23, r20
 80e:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 812:	fe 01       	movw	r30, r28
 814:	bd 96       	adiw	r30, 0x2d	; 45
 816:	86 e0       	ldi	r24, 0x06	; 6
 818:	df 01       	movw	r26, r30
 81a:	1d 92       	st	X+, r1
 81c:	8a 95       	dec	r24
 81e:	e9 f7       	brne	.-6      	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
 820:	c5 01       	movw	r24, r10
 822:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
 826:	c1 2c       	mov	r12, r1
 828:	d1 2c       	mov	r13, r1
 82a:	3b c0       	rjmp	.+118    	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
 82c:	9e 01       	movw	r18, r28
 82e:	23 5f       	subi	r18, 0xF3	; 243
 830:	3f 4f       	sbci	r19, 0xFF	; 255
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	50 e0       	ldi	r21, 0x00	; 0
 836:	61 e0       	ldi	r22, 0x01	; 1
 838:	70 e0       	ldi	r23, 0x00	; 0
 83a:	c5 01       	movw	r24, r10
 83c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 840:	9e 01       	movw	r18, r28
 842:	23 5d       	subi	r18, 0xD3	; 211
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	46 e0       	ldi	r20, 0x06	; 6
 848:	50 e0       	ldi	r21, 0x00	; 0
 84a:	63 e0       	ldi	r22, 0x03	; 3
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	c5 01       	movw	r24, r10
 850:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
 854:	10 e0       	ldi	r17, 0x00	; 0
 856:	13 c0       	rjmp	.+38     	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
 858:	c7 01       	movw	r24, r14
 85a:	0e 94 02 12 	call	0x2404	; 0x2404 <KEYPAD_get_input>
 85e:	18 2f       	mov	r17, r24
 860:	bf ef       	ldi	r27, 0xFF	; 255
 862:	21 ee       	ldi	r18, 0xE1	; 225
 864:	84 e0       	ldi	r24, 0x04	; 4
 866:	b1 50       	subi	r27, 0x01	; 1
 868:	20 40       	sbci	r18, 0x00	; 0
 86a:	80 40       	sbci	r24, 0x00	; 0
 86c:	e1 f7       	brne	.-8      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
 86e:	00 c0       	rjmp	.+0      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 870:	00 00       	nop
 872:	67 e0       	ldi	r22, 0x07	; 7
 874:	83 e2       	ldi	r24, 0x23	; 35
 876:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <GPIO_readPIN_value>
 87a:	88 23       	and	r24, r24
 87c:	19 f0       	breq	.+6      	; 0x884 <__DATA_REGION_LENGTH__+0x84>
 87e:	11 23       	and	r17, r17
 880:	59 f3       	breq	.-42     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 882:	05 c0       	rjmp	.+10     	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 884:	0f 2e       	mov	r0, r31
 886:	f3 e0       	ldi	r31, 0x03	; 3
 888:	cf 2e       	mov	r12, r31
 88a:	d1 2c       	mov	r13, r1
 88c:	f0 2d       	mov	r31, r0
 88e:	ed e2       	ldi	r30, 0x2D	; 45
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	ec 0f       	add	r30, r28
 894:	fd 1f       	adc	r31, r29
 896:	ec 0d       	add	r30, r12
 898:	fd 1d       	adc	r31, r13
 89a:	10 83       	st	Z, r17
 89c:	9f ef       	ldi	r25, 0xFF	; 255
 89e:	c9 1a       	sub	r12, r25
 8a0:	d9 0a       	sbc	r13, r25
 8a2:	a4 e0       	ldi	r26, 0x04	; 4
 8a4:	ca 16       	cp	r12, r26
 8a6:	d1 04       	cpc	r13, r1
 8a8:	0c f2       	brlt	.-126    	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 8aa:	61 e0       	ldi	r22, 0x01	; 1
 8ac:	ce 01       	movw	r24, r28
 8ae:	01 96       	adiw	r24, 0x01	; 1
 8b0:	0e 94 80 1c 	call	0x3900	; 0x3900 <MOTOR_MOVE>
 8b4:	bf ef       	ldi	r27, 0xFF	; 255
 8b6:	23 ed       	ldi	r18, 0xD3	; 211
 8b8:	80 e3       	ldi	r24, 0x30	; 48
 8ba:	b1 50       	subi	r27, 0x01	; 1
 8bc:	20 40       	sbci	r18, 0x00	; 0
 8be:	80 40       	sbci	r24, 0x00	; 0
 8c0:	e1 f7       	brne	.-8      	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
 8c2:	00 c0       	rjmp	.+0      	; 0x8c4 <__DATA_REGION_LENGTH__+0xc4>
 8c4:	00 00       	nop
 8c6:	ce 01       	movw	r24, r28
 8c8:	01 96       	adiw	r24, 0x01	; 1
 8ca:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <MOTOR_STOP>
 8ce:	c5 01       	movw	r24, r10
 8d0:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
 8d4:	be 01       	movw	r22, r28
 8d6:	63 5d       	subi	r22, 0xD3	; 211
 8d8:	7f 4f       	sbci	r23, 0xFF	; 255
 8da:	80 e8       	ldi	r24, 0x80	; 128
 8dc:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <atoi>
 8e0:	9c 01       	movw	r18, r24
 8e2:	8f 3f       	cpi	r24, 0xFF	; 255
 8e4:	91 05       	cpc	r25, r1
 8e6:	19 f0       	breq	.+6      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8e8:	14 f0       	brlt	.+4      	; 0x8ee <__DATA_REGION_LENGTH__+0xee>
 8ea:	2f ef       	ldi	r18, 0xFF	; 255
 8ec:	30 e0       	ldi	r19, 0x00	; 0
 8ee:	28 15       	cp	r18, r8
 8f0:	39 05       	cpc	r19, r9
 8f2:	ac f4       	brge	.+42     	; 0x91e <__stack+0x1f>
 8f4:	2a ef       	ldi	r18, 0xFA	; 250
 8f6:	31 e0       	ldi	r19, 0x01	; 1
 8f8:	40 e0       	ldi	r20, 0x00	; 0
 8fa:	87 e1       	ldi	r24, 0x17	; 23
 8fc:	f9 01       	movw	r30, r18
 8fe:	de 01       	movw	r26, r28
 900:	d3 96       	adiw	r26, 0x33	; 51
 902:	74 2f       	mov	r23, r20
 904:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 908:	be 01       	movw	r22, r28
 90a:	6d 5c       	subi	r22, 0xCD	; 205
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	c5 01       	movw	r24, r10
 910:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
 914:	c5 01       	movw	r24, r10
 916:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
 91a:	83 e0       	ldi	r24, 0x03	; 3
 91c:	7f c0       	rjmp	.+254    	; 0xa1c <__stack+0x11d>
 91e:	82 16       	cp	r8, r18
 920:	93 06       	cpc	r9, r19
 922:	0c f0       	brlt	.+2      	; 0x926 <__stack+0x27>
 924:	55 c0       	rjmp	.+170    	; 0x9d0 <__stack+0xd1>
 926:	0f 2e       	mov	r0, r31
 928:	f1 e1       	ldi	r31, 0x11	; 17
 92a:	cf 2e       	mov	r12, r31
 92c:	f2 e0       	ldi	r31, 0x02	; 2
 92e:	df 2e       	mov	r13, r31
 930:	f0 e0       	ldi	r31, 0x00	; 0
 932:	ef 2e       	mov	r14, r31
 934:	f0 2d       	mov	r31, r0
 936:	8b e0       	ldi	r24, 0x0B	; 11
 938:	f6 01       	movw	r30, r12
 93a:	de 01       	movw	r26, r28
 93c:	d3 96       	adiw	r26, 0x33	; 51
 93e:	7e 2d       	mov	r23, r14
 940:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 944:	28 19       	sub	r18, r8
 946:	39 09       	sbc	r19, r9
 948:	3f 93       	push	r19
 94a:	2f 93       	push	r18
 94c:	84 ed       	ldi	r24, 0xD4	; 212
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	a0 e0       	ldi	r26, 0x00	; 0
 952:	af 93       	push	r26
 954:	9f 93       	push	r25
 956:	8f 93       	push	r24
 958:	7e 01       	movw	r14, r28
 95a:	9a e4       	ldi	r25, 0x4A	; 74
 95c:	e9 0e       	add	r14, r25
 95e:	f1 1c       	adc	r15, r1
 960:	ff 92       	push	r15
 962:	ef 92       	push	r14
 964:	0e 94 15 1d 	call	0x3a2a	; 0x3a2a <_sprintf_cdopuxX>
 968:	be 01       	movw	r22, r28
 96a:	6d 5c       	subi	r22, 0xCD	; 205
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	c5 01       	movw	r24, r10
 970:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
 974:	b7 01       	movw	r22, r14
 976:	c5 01       	movw	r24, r10
 978:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	ce 01       	movw	r24, r28
 980:	01 96       	adiw	r24, 0x01	; 1
 982:	0e 94 80 1c 	call	0x3900	; 0x3900 <MOTOR_MOVE>
 986:	af ef       	ldi	r26, 0xFF	; 255
 988:	b3 ed       	ldi	r27, 0xD3	; 211
 98a:	20 e3       	ldi	r18, 0x30	; 48
 98c:	a1 50       	subi	r26, 0x01	; 1
 98e:	b0 40       	sbci	r27, 0x00	; 0
 990:	20 40       	sbci	r18, 0x00	; 0
 992:	e1 f7       	brne	.-8      	; 0x98c <__stack+0x8d>
 994:	00 c0       	rjmp	.+0      	; 0x996 <__stack+0x97>
 996:	00 00       	nop
 998:	ce 01       	movw	r24, r28
 99a:	01 96       	adiw	r24, 0x01	; 1
 99c:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <MOTOR_STOP>
 9a0:	60 e0       	ldi	r22, 0x00	; 0
 9a2:	ce 01       	movw	r24, r28
 9a4:	05 96       	adiw	r24, 0x05	; 5
 9a6:	0e 94 80 1c 	call	0x3900	; 0x3900 <MOTOR_MOVE>
 9aa:	8f ef       	ldi	r24, 0xFF	; 255
 9ac:	93 ed       	ldi	r25, 0xD3	; 211
 9ae:	a0 e3       	ldi	r26, 0x30	; 48
 9b0:	81 50       	subi	r24, 0x01	; 1
 9b2:	90 40       	sbci	r25, 0x00	; 0
 9b4:	a0 40       	sbci	r26, 0x00	; 0
 9b6:	e1 f7       	brne	.-8      	; 0x9b0 <__stack+0xb1>
 9b8:	00 c0       	rjmp	.+0      	; 0x9ba <__stack+0xbb>
 9ba:	00 00       	nop
 9bc:	ce 01       	movw	r24, r28
 9be:	05 96       	adiw	r24, 0x05	; 5
 9c0:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <MOTOR_STOP>
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	22 c0       	rjmp	.+68     	; 0xa14 <__stack+0x115>
 9d0:	2c e1       	ldi	r18, 0x1C	; 28
 9d2:	32 e0       	ldi	r19, 0x02	; 2
 9d4:	40 e0       	ldi	r20, 0x00	; 0
 9d6:	84 e1       	ldi	r24, 0x14	; 20
 9d8:	f9 01       	movw	r30, r18
 9da:	de 01       	movw	r26, r28
 9dc:	d3 96       	adiw	r26, 0x33	; 51
 9de:	74 2f       	mov	r23, r20
 9e0:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
 9e4:	be 01       	movw	r22, r28
 9e6:	6d 5c       	subi	r22, 0xCD	; 205
 9e8:	7f 4f       	sbci	r23, 0xFF	; 255
 9ea:	c5 01       	movw	r24, r10
 9ec:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
 9f0:	60 e0       	ldi	r22, 0x00	; 0
 9f2:	ce 01       	movw	r24, r28
 9f4:	05 96       	adiw	r24, 0x05	; 5
 9f6:	0e 94 80 1c 	call	0x3900	; 0x3900 <MOTOR_MOVE>
 9fa:	9f ef       	ldi	r25, 0xFF	; 255
 9fc:	a3 ed       	ldi	r26, 0xD3	; 211
 9fe:	b0 e3       	ldi	r27, 0x30	; 48
 a00:	91 50       	subi	r25, 0x01	; 1
 a02:	a0 40       	sbci	r26, 0x00	; 0
 a04:	b0 40       	sbci	r27, 0x00	; 0
 a06:	e1 f7       	brne	.-8      	; 0xa00 <__stack+0x101>
 a08:	00 c0       	rjmp	.+0      	; 0xa0a <__stack+0x10b>
 a0a:	00 00       	nop
 a0c:	ce 01       	movw	r24, r28
 a0e:	05 96       	adiw	r24, 0x05	; 5
 a10:	0e 94 28 1d 	call	0x3a50	; 0x3a50 <MOTOR_STOP>
 a14:	c5 01       	movw	r24, r10
 a16:	0e 94 42 14 	call	0x2884	; 0x2884 <enter_bottun>
 a1a:	80 e0       	ldi	r24, 0x00	; 0
 a1c:	c1 5b       	subi	r28, 0xB1	; 177
 a1e:	df 4f       	sbci	r29, 0xFF	; 255
 a20:	0f b6       	in	r0, 0x3f	; 63
 a22:	f8 94       	cli
 a24:	de bf       	out	0x3e, r29	; 62
 a26:	0f be       	out	0x3f, r0	; 63
 a28:	cd bf       	out	0x3d, r28	; 61
 a2a:	df 91       	pop	r29
 a2c:	cf 91       	pop	r28
 a2e:	1f 91       	pop	r17
 a30:	0f 91       	pop	r16
 a32:	ff 90       	pop	r15
 a34:	ef 90       	pop	r14
 a36:	df 90       	pop	r13
 a38:	cf 90       	pop	r12
 a3a:	bf 90       	pop	r11
 a3c:	af 90       	pop	r10
 a3e:	9f 90       	pop	r9
 a40:	8f 90       	pop	r8
 a42:	08 95       	ret

Disassembly of section .text.move_on_screen:

00001fa2 <move_on_screen>:
	enter_bottun(LCD);
	return 0;
}

void move_on_screen(LCD_ID* LCD,KEYPAD_ID* KEYPAD)
{
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	00 d0       	rcall	.+0      	; 0x1fa8 <move_on_screen+0x6>
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <move_on_screen+0x8>
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <move_on_screen+0xa>
    1fac:	cd b7       	in	r28, 0x3d	; 61
    1fae:	de b7       	in	r29, 0x3e	; 62
    1fb0:	6c 01       	movw	r12, r24
    1fb2:	7b 01       	movw	r14, r22
	char mover = 0;
	
		
		char s[2]={3,'\0'};
		char none[]={' ','\0'};
		char str2 []="enter";
    1fb4:	27 ed       	ldi	r18, 0xD7	; 215
    1fb6:	30 e0       	ldi	r19, 0x00	; 0
    1fb8:	40 e0       	ldi	r20, 0x00	; 0
    1fba:	86 e0       	ldi	r24, 0x06	; 6
    1fbc:	f9 01       	movw	r30, r18
    1fbe:	de 01       	movw	r26, r28
    1fc0:	11 96       	adiw	r26, 0x01	; 1
    1fc2:	74 2f       	mov	r23, r20
    1fc4:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
		
		char want_to_buy = 0;
		
		product_on_screen_list(LCD,0);
    1fc8:	60 e0       	ldi	r22, 0x00	; 0
    1fca:	70 e0       	ldi	r23, 0x00	; 0
    1fcc:	c6 01       	movw	r24, r12
    1fce:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <product_on_screen_list>
		
		char s[2]={3,'\0'};
		char none[]={' ','\0'};
		char str2 []="enter";
		
		char want_to_buy = 0;
    1fd2:	00 e0       	ldi	r16, 0x00	; 0

void move_on_screen(LCD_ID* LCD,KEYPAD_ID* KEYPAD)
{
	
	char input =0 ;
	char mover = 0;
    1fd4:	b1 2c       	mov	r11, r1
		char want_to_buy = 0;
		
		product_on_screen_list(LCD,0);
		while(1)
		{
			lcd_string_pos(LCD,3,11,str2);
    1fd6:	9e 01       	movw	r18, r28
    1fd8:	2f 5f       	subi	r18, 0xFF	; 255
    1fda:	3f 4f       	sbci	r19, 0xFF	; 255
    1fdc:	4b e0       	ldi	r20, 0x0B	; 11
    1fde:	50 e0       	ldi	r21, 0x00	; 0
    1fe0:	63 e0       	ldi	r22, 0x03	; 3
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	c6 01       	movw	r24, r12
    1fe6:	0e 94 1a 0c 	call	0x1834	; 0x1834 <lcd_string_pos>
			while(input == 0 && want_to_buy == 0)
    1fea:	10 e0       	ldi	r17, 0x00	; 0
    1fec:	0b c0       	rjmp	.+22     	; 0x2004 <move_on_screen+0x62>
			{
				input = KEYPAD_get_input(KEYPAD);
    1fee:	c7 01       	movw	r24, r14
    1ff0:	0e 94 02 12 	call	0x2404	; 0x2404 <KEYPAD_get_input>
    1ff4:	18 2f       	mov	r17, r24
				
				if (GPIO_readPIN_value(GPIO_PORTB,7) == 0)
    1ff6:	67 e0       	ldi	r22, 0x07	; 7
    1ff8:	83 e2       	ldi	r24, 0x23	; 35
    1ffa:	0e 94 02 1d 	call	0x3a04	; 0x3a04 <GPIO_readPIN_value>
    1ffe:	81 11       	cpse	r24, r1
    2000:	01 c0       	rjmp	.+2      	; 0x2004 <move_on_screen+0x62>
				want_to_buy = 3;
    2002:	03 e0       	ldi	r16, 0x03	; 3
		
		product_on_screen_list(LCD,0);
		while(1)
		{
			lcd_string_pos(LCD,3,11,str2);
			while(input == 0 && want_to_buy == 0)
    2004:	11 11       	cpse	r17, r1
    2006:	02 c0       	rjmp	.+4      	; 0x200c <move_on_screen+0x6a>
    2008:	00 23       	and	r16, r16
    200a:	89 f3       	breq	.-30     	; 0x1fee <move_on_screen+0x4c>
				
				if (GPIO_readPIN_value(GPIO_PORTB,7) == 0)
				want_to_buy = 3;
			}
			
			if (want_to_buy == 3)
    200c:	03 30       	cpi	r16, 0x03	; 3
    200e:	71 f4       	brne	.+28     	; 0x202c <move_on_screen+0x8a>
			{
				want_to_buy=pay_screen(LCD,KEYPAD,mover);
    2010:	4b 2d       	mov	r20, r11
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	b7 01       	movw	r22, r14
    2016:	c6 01       	movw	r24, r12
    2018:	0e 94 b3 03 	call	0x766	; 0x766 <pay_screen>
    201c:	08 2f       	mov	r16, r24
				if (want_to_buy !=3)
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	29 f0       	breq	.+10     	; 0x202c <move_on_screen+0x8a>
				{
					product_on_screen_list(LCD,0);
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	70 e0       	ldi	r23, 0x00	; 0
    2026:	c6 01       	movw	r24, r12
    2028:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <product_on_screen_list>
				}
				
			}
			
			if (input =='*')
    202c:	1a 32       	cpi	r17, 0x2A	; 42
    202e:	49 f4       	brne	.+18     	; 0x2042 <move_on_screen+0xa0>
			{
				config_machine(LCD,KEYPAD);
    2030:	b7 01       	movw	r22, r14
    2032:	c6 01       	movw	r24, r12
    2034:	0e 94 40 06 	call	0xc80	; 0xc80 <config_machine>
				product_on_screen_list(LCD,mover);
    2038:	6b 2d       	mov	r22, r11
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	c6 01       	movw	r24, r12
    203e:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <product_on_screen_list>
			}
			
			if (input == '2')
    2042:	12 33       	cpi	r17, 0x32	; 50
    2044:	51 f4       	brne	.+20     	; 0x205a <move_on_screen+0xb8>
			{
				if (mover >0)
    2046:	b1 10       	cpse	r11, r1
				{
					mover--;
    2048:	ba 94       	dec	r11
				}
				lcd_clear(LCD);	
    204a:	c6 01       	movw	r24, r12
    204c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
				product_on_screen_list(LCD,mover);
    2050:	6b 2d       	mov	r22, r11
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	c6 01       	movw	r24, r12
    2056:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <product_on_screen_list>
			}
			if (input == '8')
    205a:	18 33       	cpi	r17, 0x38	; 56
    205c:	09 f0       	breq	.+2      	; 0x2060 <move_on_screen+0xbe>
    205e:	bb cf       	rjmp	.-138    	; 0x1fd6 <move_on_screen+0x34>
			{
				if (mover <EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT)-1)
    2060:	8b 2c       	mov	r8, r11
    2062:	91 2c       	mov	r9, r1
    2064:	87 e0       	ldi	r24, 0x07	; 7
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	01 97       	sbiw	r24, 0x01	; 1
    2070:	88 16       	cp	r8, r24
    2072:	99 06       	cpc	r9, r25
    2074:	0c f4       	brge	.+2      	; 0x2078 <move_on_screen+0xd6>
				{
					mover++;
    2076:	b3 94       	inc	r11
				}
				lcd_clear(LCD);	
    2078:	c6 01       	movw	r24, r12
    207a:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
				product_on_screen_list(LCD,mover);
    207e:	6b 2d       	mov	r22, r11
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	c6 01       	movw	r24, r12
    2084:	0e 94 c5 0e 	call	0x1d8a	; 0x1d8a <product_on_screen_list>
    2088:	a6 cf       	rjmp	.-180    	; 0x1fd6 <move_on_screen+0x34>

Disassembly of section .text.main:

00001098 <main>:

//static int count=BYTE_PRODUCT_COUNT;
void delete_product()
{
	EEPROM_WRITE_BYTE(EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT)-1,EEPROM_READ_BYTE(BYTE_PRODUCT_COUNT));
}
    1098:	cf 93       	push	r28
    109a:	df 93       	push	r29
    109c:	cd b7       	in	r28, 0x3d	; 61
    109e:	de b7       	in	r29, 0x3e	; 62
    10a0:	c6 56       	subi	r28, 0x66	; 102
    10a2:	d1 09       	sbc	r29, r1
    10a4:	0f b6       	in	r0, 0x3f	; 63
    10a6:	f8 94       	cli
    10a8:	de bf       	out	0x3e, r29	; 62
    10aa:	0f be       	out	0x3f, r0	; 63
    10ac:	cd bf       	out	0x3d, r28	; 61
    10ae:	67 e0       	ldi	r22, 0x07	; 7
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	80 e0       	ldi	r24, 0x00	; 0
    10b4:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <EEPROM_WRITE_BYTE>
    10b8:	fe 01       	movw	r30, r28
    10ba:	31 96       	adiw	r30, 0x01	; 1
    10bc:	8a e0       	ldi	r24, 0x0A	; 10
    10be:	df 01       	movw	r26, r30
    10c0:	1d 92       	st	X+, r1
    10c2:	8a 95       	dec	r24
    10c4:	e9 f7       	brne	.-6      	; 0x10c0 <main+0x28>
    10c6:	80 e7       	ldi	r24, 0x70	; 112
    10c8:	89 83       	std	Y+1, r24	; 0x01
    10ca:	82 e7       	ldi	r24, 0x72	; 114
    10cc:	8a 83       	std	Y+2, r24	; 0x02
    10ce:	8f e6       	ldi	r24, 0x6F	; 111
    10d0:	8b 83       	std	Y+3, r24	; 0x03
    10d2:	84 e6       	ldi	r24, 0x64	; 100
    10d4:	8c 83       	std	Y+4, r24	; 0x04
    10d6:	85 e7       	ldi	r24, 0x75	; 117
    10d8:	8d 83       	std	Y+5, r24	; 0x05
    10da:	83 e6       	ldi	r24, 0x63	; 99
    10dc:	8e 83       	std	Y+6, r24	; 0x06
    10de:	84 e7       	ldi	r24, 0x74	; 116
    10e0:	8f 83       	std	Y+7, r24	; 0x07
    10e2:	81 e3       	ldi	r24, 0x31	; 49
    10e4:	88 87       	std	Y+8, r24	; 0x08
    10e6:	00 e0       	ldi	r16, 0x00	; 0
    10e8:	10 e0       	ldi	r17, 0x00	; 0
    10ea:	09 c0       	rjmp	.+18     	; 0x10fe <main+0x66>
    10ec:	b8 01       	movw	r22, r16
    10ee:	68 53       	subi	r22, 0x38	; 56
    10f0:	7f 4f       	sbci	r23, 0xFF	; 255
    10f2:	ce 01       	movw	r24, r28
    10f4:	01 96       	adiw	r24, 0x01	; 1
    10f6:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <add_product>
    10fa:	0f 5f       	subi	r16, 0xFF	; 255
    10fc:	1f 4f       	sbci	r17, 0xFF	; 255
    10fe:	0a 30       	cpi	r16, 0x0A	; 10
    1100:	11 05       	cpc	r17, r1
    1102:	a4 f3       	brlt	.-24     	; 0x10ec <main+0x54>
    1104:	88 e0       	ldi	r24, 0x08	; 8
    1106:	ec e0       	ldi	r30, 0x0C	; 12
    1108:	f1 e0       	ldi	r31, 0x01	; 1
    110a:	de 01       	movw	r26, r28
    110c:	1b 96       	adiw	r26, 0x0b	; 11
    110e:	01 90       	ld	r0, Z+
    1110:	0d 92       	st	X+, r0
    1112:	8a 95       	dec	r24
    1114:	e1 f7       	brne	.-8      	; 0x110e <main+0x76>
    1116:	68 94       	set
    1118:	cc 24       	eor	r12, r12
    111a:	c2 f8       	bld	r12, 2
    111c:	cb 8a       	std	Y+19, r12	; 0x13
    111e:	0f 2e       	mov	r0, r31
    1120:	f5 e0       	ldi	r31, 0x05	; 5
    1122:	df 2e       	mov	r13, r31
    1124:	f0 2d       	mov	r31, r0
    1126:	dc 8a       	std	Y+20, r13	; 0x14
    1128:	16 e0       	ldi	r17, 0x06	; 6
    112a:	1d 8b       	std	Y+21, r17	; 0x15
    112c:	87 e0       	ldi	r24, 0x07	; 7
    112e:	8e 8b       	std	Y+22, r24	; 0x16
    1130:	aa 24       	eor	r10, r10
    1132:	a3 94       	inc	r10
    1134:	af 8a       	std	Y+23, r10	; 0x17
    1136:	68 94       	set
    1138:	99 24       	eor	r9, r9
    113a:	91 f8       	bld	r9, 1
    113c:	98 8e       	std	Y+24, r9	; 0x18
    113e:	0f 2e       	mov	r0, r31
    1140:	f3 e0       	ldi	r31, 0x03	; 3
    1142:	bf 2e       	mov	r11, r31
    1144:	f0 2d       	mov	r31, r0
    1146:	b9 8e       	std	Y+25, r11	; 0x19
    1148:	ce 01       	movw	r24, r28
    114a:	47 96       	adiw	r24, 0x17	; 23
    114c:	7c 01       	movw	r14, r24
    114e:	09 e2       	ldi	r16, 0x29	; 41
    1150:	9e 01       	movw	r18, r28
    1152:	2d 5e       	subi	r18, 0xED	; 237
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	49 e2       	ldi	r20, 0x29	; 41
    1158:	60 e0       	ldi	r22, 0x00	; 0
    115a:	03 96       	adiw	r24, 0x03	; 3
    115c:	0e 94 8d 13 	call	0x271a	; 0x271a <init_lcd>
    1160:	ae 01       	movw	r20, r28
    1162:	45 5f       	subi	r20, 0xF5	; 245
    1164:	5f 4f       	sbci	r21, 0xFF	; 255
    1166:	63 e0       	ldi	r22, 0x03	; 3
    1168:	ce 01       	movw	r24, r28
    116a:	4a 96       	adiw	r24, 0x1a	; 26
    116c:	0e 94 30 13 	call	0x2660	; 0x2660 <lcd_custom_char>
    1170:	ce 01       	movw	r24, r28
    1172:	4a 96       	adiw	r24, 0x1a	; 26
    1174:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
    1178:	9b a6       	std	Y+43, r9	; 0x2b
    117a:	ac a6       	std	Y+44, r10	; 0x2c
    117c:	1d a6       	std	Y+45, r1	; 0x2d
    117e:	be a6       	std	Y+46, r11	; 0x2e
    1180:	cf a6       	std	Y+47, r12	; 0x2f
    1182:	d8 aa       	std	Y+48, r13	; 0x30
    1184:	19 ab       	std	Y+49, r17	; 0x31
    1186:	8c e0       	ldi	r24, 0x0C	; 12
    1188:	e4 e1       	ldi	r30, 0x14	; 20
    118a:	f1 e0       	ldi	r31, 0x01	; 1
    118c:	de 01       	movw	r26, r28
    118e:	d2 96       	adiw	r26, 0x32	; 50
    1190:	01 90       	ld	r0, Z+
    1192:	0d 92       	st	X+, r0
    1194:	8a 95       	dec	r24
    1196:	e1 f7       	brne	.-8      	; 0x1190 <main+0xf8>
    1198:	de 01       	movw	r26, r28
    119a:	d2 96       	adiw	r26, 0x32	; 50
    119c:	5d 01       	movw	r10, r26
    119e:	0f 2e       	mov	r0, r31
    11a0:	f3 e0       	ldi	r31, 0x03	; 3
    11a2:	ef 2e       	mov	r14, r31
    11a4:	f0 2d       	mov	r31, r0
    11a6:	8e 01       	movw	r16, r28
    11a8:	02 5d       	subi	r16, 0xD2	; 210
    11aa:	1f 4f       	sbci	r17, 0xFF	; 255
    11ac:	23 e2       	ldi	r18, 0x23	; 35
    11ae:	ae 01       	movw	r20, r28
    11b0:	45 5d       	subi	r20, 0xD5	; 213
    11b2:	5f 4f       	sbci	r21, 0xFF	; 255
    11b4:	63 e2       	ldi	r22, 0x23	; 35
    11b6:	ce 01       	movw	r24, r28
    11b8:	ce 96       	adiw	r24, 0x3e	; 62
    11ba:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <init_KEYPAD>
    11be:	42 e0       	ldi	r20, 0x02	; 2
    11c0:	67 e0       	ldi	r22, 0x07	; 7
    11c2:	83 e2       	ldi	r24, 0x23	; 35
    11c4:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
    11c8:	42 e0       	ldi	r20, 0x02	; 2
    11ca:	60 e0       	ldi	r22, 0x00	; 0
    11cc:	89 e2       	ldi	r24, 0x29	; 41
    11ce:	0e 94 33 18 	call	0x3066	; 0x3066 <GPIO_PIN_mode>
    11d2:	ce 01       	movw	r24, r28
    11d4:	4a 96       	adiw	r24, 0x1a	; 26
    11d6:	0e 94 b2 19 	call	0x3364	; 0x3364 <program_start_menu>
    11da:	07 c0       	rjmp	.+14     	; 0x11ea <main+0x152>
    11dc:	be 01       	movw	r22, r28
    11de:	62 5c       	subi	r22, 0xC2	; 194
    11e0:	7f 4f       	sbci	r23, 0xFF	; 255
    11e2:	ce 01       	movw	r24, r28
    11e4:	4a 96       	adiw	r24, 0x1a	; 26
    11e6:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <frist_setup>
    11ea:	86 e0       	ldi	r24, 0x06	; 6
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    11f2:	84 34       	cpi	r24, 0x44	; 68
    11f4:	99 f7       	brne	.-26     	; 0x11dc <main+0x144>
    11f6:	86 e0       	ldi	r24, 0x06	; 6
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    11fe:	84 34       	cpi	r24, 0x44	; 68
    1200:	f9 f4       	brne	.+62     	; 0x1240 <main+0x1a8>
    1202:	20 e3       	ldi	r18, 0x30	; 48
    1204:	32 e0       	ldi	r19, 0x02	; 2
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	8f e1       	ldi	r24, 0x1F	; 31
    120a:	f9 01       	movw	r30, r18
    120c:	de 01       	movw	r26, r28
    120e:	a8 5b       	subi	r26, 0xB8	; 184
    1210:	bf 4f       	sbci	r27, 0xFF	; 255
    1212:	74 2f       	mov	r23, r20
    1214:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
    1218:	be 01       	movw	r22, r28
    121a:	68 5b       	subi	r22, 0xB8	; 184
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	ce 01       	movw	r24, r28
    1220:	4a 96       	adiw	r24, 0x1a	; 26
    1222:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
    1226:	bf ef       	ldi	r27, 0xFF	; 255
    1228:	29 e6       	ldi	r18, 0x69	; 105
    122a:	88 e1       	ldi	r24, 0x18	; 24
    122c:	b1 50       	subi	r27, 0x01	; 1
    122e:	20 40       	sbci	r18, 0x00	; 0
    1230:	80 40       	sbci	r24, 0x00	; 0
    1232:	e1 f7       	brne	.-8      	; 0x122c <main+0x194>
    1234:	00 c0       	rjmp	.+0      	; 0x1236 <main+0x19e>
    1236:	00 00       	nop
    1238:	ce 01       	movw	r24, r28
    123a:	4a 96       	adiw	r24, 0x1a	; 26
    123c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <lcd_clear>
    1240:	ce 01       	movw	r24, r28
    1242:	4a 96       	adiw	r24, 0x1a	; 26
    1244:	0e 94 87 19 	call	0x330e	; 0x330e <help_screen>
    1248:	87 e0       	ldi	r24, 0x07	; 7
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	0e 94 48 1d 	call	0x3a90	; 0x3a90 <EEPROM_READ_BYTE>
    1250:	81 11       	cpse	r24, r1
    1252:	12 c0       	rjmp	.+36     	; 0x1278 <main+0x1e0>
    1254:	2f e4       	ldi	r18, 0x4F	; 79
    1256:	32 e0       	ldi	r19, 0x02	; 2
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	8b e1       	ldi	r24, 0x1B	; 27
    125c:	f9 01       	movw	r30, r18
    125e:	de 01       	movw	r26, r28
    1260:	a8 5b       	subi	r26, 0xB8	; 184
    1262:	bf 4f       	sbci	r27, 0xFF	; 255
    1264:	74 2f       	mov	r23, r20
    1266:	0e 94 57 1d 	call	0x3aae	; 0x3aae <__movmemx_qi>
    126a:	be 01       	movw	r22, r28
    126c:	68 5b       	subi	r22, 0xB8	; 184
    126e:	7f 4f       	sbci	r23, 0xFF	; 255
    1270:	ce 01       	movw	r24, r28
    1272:	4a 96       	adiw	r24, 0x1a	; 26
    1274:	0e 94 38 0a 	call	0x1470	; 0x1470 <lcd_string>
    1278:	be 01       	movw	r22, r28
    127a:	62 5c       	subi	r22, 0xC2	; 194
    127c:	7f 4f       	sbci	r23, 0xFF	; 255
    127e:	ce 01       	movw	r24, r28
    1280:	4a 96       	adiw	r24, 0x1a	; 26
    1282:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <move_on_screen>

Disassembly of section .text.__vector_21:

00003b26 <__vector_21>:
u16 ADC_anlogRead16BIT(ADC_channel_ID ADC_channel)
{

}
void  ADC_vector (void)
{
    3b26:	1f 92       	push	r1
    3b28:	0f 92       	push	r0
    3b2a:	0f b6       	in	r0, 0x3f	; 63
    3b2c:	0f 92       	push	r0
    3b2e:	11 24       	eor	r1, r1
		return;
	}
	//callback_ADC(ADC_result);
	
	
}
    3b30:	0f 90       	pop	r0
    3b32:	0f be       	out	0x3f, r0	; 63
    3b34:	0f 90       	pop	r0
    3b36:	1f 90       	pop	r1
    3b38:	18 95       	reti

Disassembly of section .text.EEPROM_WRITE_BYTE:

00003a70 <EEPROM_WRITE_BYTE>:
#include "EEPROM.h"
#define EEPROM  ((volatile EEPROM_id*) (0x3F))

void EEPROM_WRITE_BYTE(u8 value,u16 adress)
{
	if (adress >EEPROM_MAX_ADDRESS)
    3a70:	61 15       	cp	r22, r1
    3a72:	94 e0       	ldi	r25, 0x04	; 4
    3a74:	79 07       	cpc	r23, r25
    3a76:	58 f4       	brcc	.+22     	; 0x3a8e <EEPROM_WRITE_BYTE+0x1e>
	{
		return ;
	}
	//EEPROM_id* EEPROM = (volatile EEPROM_id*) 0x3F;
	/* Wait for completion of previous write */
	while(EEPROM->EECR & (1<<EEPE));
    3a78:	f9 99       	sbic	0x1f, 1	; 31
    3a7a:	fe cf       	rjmp	.-4      	; 0x3a78 <EEPROM_WRITE_BYTE+0x8>
	/* Set up address and Data Registers */
	EEPROM->EEARH = (adress & 0xFF00)>>8 ;
    3a7c:	72 bd       	out	0x22, r23	; 34
	EEPROM->EEARL = (adress & 0x00FF);
    3a7e:	61 bd       	out	0x21, r22	; 33
	EEPROM->EEDR = value;
    3a80:	80 bd       	out	0x20, r24	; 32
	/* Write logical one to EEMPE */
	EEPROM->EECR |= (1<<EEMPE);
    3a82:	8f b3       	in	r24, 0x1f	; 31
    3a84:	84 60       	ori	r24, 0x04	; 4
    3a86:	8f bb       	out	0x1f, r24	; 31
	/* Start eeprom write by setting EEPE */
	EEPROM->EECR |= (1<<EEPE);	
    3a88:	8f b3       	in	r24, 0x1f	; 31
    3a8a:	82 60       	ori	r24, 0x02	; 2
    3a8c:	8f bb       	out	0x1f, r24	; 31
    3a8e:	08 95       	ret

Disassembly of section .text.EEPROM_READ_BYTE:

00003a90 <EEPROM_READ_BYTE>:
	
}
u8 EEPROM_READ_BYTE(u16 adress)
{
	if (adress >EEPROM_MAX_ADDRESS)
    3a90:	81 15       	cp	r24, r1
    3a92:	24 e0       	ldi	r18, 0x04	; 4
    3a94:	92 07       	cpc	r25, r18
    3a96:	48 f4       	brcc	.+18     	; 0x3aaa <EEPROM_READ_BYTE+0x1a>
	{
		return 0;
	}	
	//EEPROM_id* EEPROM = ( volatile EEPROM_id*)(0x3F);
	/* Wait for completion of previous write */
	while(EEPROM->EECR & (1<<EEPE))
    3a98:	f9 99       	sbic	0x1f, 1	; 31
    3a9a:	fe cf       	rjmp	.-4      	; 0x3a98 <EEPROM_READ_BYTE+0x8>
	;
	/* Set up address register */
	EEPROM->EEARH = (adress & 0xFF00)>>8 ;
    3a9c:	92 bd       	out	0x22, r25	; 34
	EEPROM->EEARL = (adress & 0x00FF);
    3a9e:	81 bd       	out	0x21, r24	; 33
	/* Start eeprom read by writing EERE */
	EEPROM->EECR |= (1<<EERE);
    3aa0:	8f b3       	in	r24, 0x1f	; 31
    3aa2:	81 60       	ori	r24, 0x01	; 1
    3aa4:	8f bb       	out	0x1f, r24	; 31
	/* Return data from Data Register */
	return EEPROM->EEDR;
    3aa6:	80 b5       	in	r24, 0x20	; 32
    3aa8:	08 95       	ret
}
u8 EEPROM_READ_BYTE(u16 adress)
{
	if (adress >EEPROM_MAX_ADDRESS)
	{
		return 0;
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
	EEPROM->EEARL = (adress & 0x00FF);
	/* Start eeprom read by writing EERE */
	EEPROM->EECR |= (1<<EERE);
	/* Return data from Data Register */
	return EEPROM->EEDR;
    3aac:	08 95       	ret

Disassembly of section .text.__vector_1:

000033ba <__vector_1>:




void EXTI_INT0_vector(void)
{
    33ba:	1f 92       	push	r1
    33bc:	0f 92       	push	r0
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	0f 92       	push	r0
    33c2:	11 24       	eor	r1, r1
    33c4:	2f 93       	push	r18
    33c6:	3f 93       	push	r19
    33c8:	4f 93       	push	r20
    33ca:	5f 93       	push	r21
    33cc:	6f 93       	push	r22
    33ce:	7f 93       	push	r23
    33d0:	8f 93       	push	r24
    33d2:	9f 93       	push	r25
    33d4:	af 93       	push	r26
    33d6:	bf 93       	push	r27
    33d8:	ef 93       	push	r30
    33da:	ff 93       	push	r31
	if (EXTI_FUNC[0] ==0)
    33dc:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <EXTI_FUNC>
    33e0:	f0 91 33 01 	lds	r31, 0x0133	; 0x800133 <EXTI_FUNC+0x1>
    33e4:	30 97       	sbiw	r30, 0x00	; 0
    33e6:	09 f0       	breq	.+2      	; 0x33ea <__vector_1+0x30>
	{
		return;
	}
	EXTI_FUNC[0]();	
    33e8:	09 95       	icall
}
    33ea:	ff 91       	pop	r31
    33ec:	ef 91       	pop	r30
    33ee:	bf 91       	pop	r27
    33f0:	af 91       	pop	r26
    33f2:	9f 91       	pop	r25
    33f4:	8f 91       	pop	r24
    33f6:	7f 91       	pop	r23
    33f8:	6f 91       	pop	r22
    33fa:	5f 91       	pop	r21
    33fc:	4f 91       	pop	r20
    33fe:	3f 91       	pop	r19
    3400:	2f 91       	pop	r18
    3402:	0f 90       	pop	r0
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	0f 90       	pop	r0
    3408:	1f 90       	pop	r1
    340a:	18 95       	reti

Disassembly of section .text.__vector_2:

0000340c <__vector_2>:
void EXTI_INT1_vector(void)
{
    340c:	1f 92       	push	r1
    340e:	0f 92       	push	r0
    3410:	0f b6       	in	r0, 0x3f	; 63
    3412:	0f 92       	push	r0
    3414:	11 24       	eor	r1, r1
    3416:	2f 93       	push	r18
    3418:	3f 93       	push	r19
    341a:	4f 93       	push	r20
    341c:	5f 93       	push	r21
    341e:	6f 93       	push	r22
    3420:	7f 93       	push	r23
    3422:	8f 93       	push	r24
    3424:	9f 93       	push	r25
    3426:	af 93       	push	r26
    3428:	bf 93       	push	r27
    342a:	ef 93       	push	r30
    342c:	ff 93       	push	r31
	
	if (EXTI_FUNC[1] ==0)
    342e:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <EXTI_FUNC+0x2>
    3432:	f0 91 35 01 	lds	r31, 0x0135	; 0x800135 <EXTI_FUNC+0x3>
    3436:	30 97       	sbiw	r30, 0x00	; 0
    3438:	09 f0       	breq	.+2      	; 0x343c <__vector_2+0x30>
	{
		return;
	}	
	EXTI_FUNC[1]();
    343a:	09 95       	icall
}
    343c:	ff 91       	pop	r31
    343e:	ef 91       	pop	r30
    3440:	bf 91       	pop	r27
    3442:	af 91       	pop	r26
    3444:	9f 91       	pop	r25
    3446:	8f 91       	pop	r24
    3448:	7f 91       	pop	r23
    344a:	6f 91       	pop	r22
    344c:	5f 91       	pop	r21
    344e:	4f 91       	pop	r20
    3450:	3f 91       	pop	r19
    3452:	2f 91       	pop	r18
    3454:	0f 90       	pop	r0
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	0f 90       	pop	r0
    345a:	1f 90       	pop	r1
    345c:	18 95       	reti

Disassembly of section .text.__vector_3:

0000345e <__vector_3>:
void EXTI_PCINT0_vector(void){
    345e:	1f 92       	push	r1
    3460:	0f 92       	push	r0
    3462:	0f b6       	in	r0, 0x3f	; 63
    3464:	0f 92       	push	r0
    3466:	11 24       	eor	r1, r1
    3468:	2f 93       	push	r18
    346a:	3f 93       	push	r19
    346c:	4f 93       	push	r20
    346e:	5f 93       	push	r21
    3470:	6f 93       	push	r22
    3472:	7f 93       	push	r23
    3474:	8f 93       	push	r24
    3476:	9f 93       	push	r25
    3478:	af 93       	push	r26
    347a:	bf 93       	push	r27
    347c:	ef 93       	push	r30
    347e:	ff 93       	push	r31


	if (EXTI_FUNC[2] ==0)
    3480:	e0 91 36 01 	lds	r30, 0x0136	; 0x800136 <EXTI_FUNC+0x4>
    3484:	f0 91 37 01 	lds	r31, 0x0137	; 0x800137 <EXTI_FUNC+0x5>
    3488:	30 97       	sbiw	r30, 0x00	; 0
    348a:	09 f0       	breq	.+2      	; 0x348e <__vector_3+0x30>
	{
		return;
	}
	EXTI_FUNC[2]();
    348c:	09 95       	icall
}
    348e:	ff 91       	pop	r31
    3490:	ef 91       	pop	r30
    3492:	bf 91       	pop	r27
    3494:	af 91       	pop	r26
    3496:	9f 91       	pop	r25
    3498:	8f 91       	pop	r24
    349a:	7f 91       	pop	r23
    349c:	6f 91       	pop	r22
    349e:	5f 91       	pop	r21
    34a0:	4f 91       	pop	r20
    34a2:	3f 91       	pop	r19
    34a4:	2f 91       	pop	r18
    34a6:	0f 90       	pop	r0
    34a8:	0f be       	out	0x3f, r0	; 63
    34aa:	0f 90       	pop	r0
    34ac:	1f 90       	pop	r1
    34ae:	18 95       	reti

Disassembly of section .text.__vector_4:

000034b0 <__vector_4>:
void EXTI_PCINT1_vector(void)
{
    34b0:	1f 92       	push	r1
    34b2:	0f 92       	push	r0
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	0f 92       	push	r0
    34b8:	11 24       	eor	r1, r1
    34ba:	2f 93       	push	r18
    34bc:	3f 93       	push	r19
    34be:	4f 93       	push	r20
    34c0:	5f 93       	push	r21
    34c2:	6f 93       	push	r22
    34c4:	7f 93       	push	r23
    34c6:	8f 93       	push	r24
    34c8:	9f 93       	push	r25
    34ca:	af 93       	push	r26
    34cc:	bf 93       	push	r27
    34ce:	ef 93       	push	r30
    34d0:	ff 93       	push	r31
	if (EXTI_FUNC[3] == 0)
    34d2:	e0 91 38 01 	lds	r30, 0x0138	; 0x800138 <EXTI_FUNC+0x6>
    34d6:	f0 91 39 01 	lds	r31, 0x0139	; 0x800139 <EXTI_FUNC+0x7>
    34da:	30 97       	sbiw	r30, 0x00	; 0
    34dc:	09 f0       	breq	.+2      	; 0x34e0 <__vector_4+0x30>
	{
		return;
	}
	EXTI_FUNC[3]();	
    34de:	09 95       	icall
}
    34e0:	ff 91       	pop	r31
    34e2:	ef 91       	pop	r30
    34e4:	bf 91       	pop	r27
    34e6:	af 91       	pop	r26
    34e8:	9f 91       	pop	r25
    34ea:	8f 91       	pop	r24
    34ec:	7f 91       	pop	r23
    34ee:	6f 91       	pop	r22
    34f0:	5f 91       	pop	r21
    34f2:	4f 91       	pop	r20
    34f4:	3f 91       	pop	r19
    34f6:	2f 91       	pop	r18
    34f8:	0f 90       	pop	r0
    34fa:	0f be       	out	0x3f, r0	; 63
    34fc:	0f 90       	pop	r0
    34fe:	1f 90       	pop	r1
    3500:	18 95       	reti

Disassembly of section .text.__vector_5:

00003502 <__vector_5>:
void EXTI_PCINT2_vector(void)
{
    3502:	1f 92       	push	r1
    3504:	0f 92       	push	r0
    3506:	0f b6       	in	r0, 0x3f	; 63
    3508:	0f 92       	push	r0
    350a:	11 24       	eor	r1, r1
    350c:	2f 93       	push	r18
    350e:	3f 93       	push	r19
    3510:	4f 93       	push	r20
    3512:	5f 93       	push	r21
    3514:	6f 93       	push	r22
    3516:	7f 93       	push	r23
    3518:	8f 93       	push	r24
    351a:	9f 93       	push	r25
    351c:	af 93       	push	r26
    351e:	bf 93       	push	r27
    3520:	ef 93       	push	r30
    3522:	ff 93       	push	r31
	if (EXTI_FUNC[4] == 0)
    3524:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <EXTI_FUNC+0x8>
    3528:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <EXTI_FUNC+0x9>
    352c:	30 97       	sbiw	r30, 0x00	; 0
    352e:	09 f0       	breq	.+2      	; 0x3532 <__vector_5+0x30>
	{
		return;
	}	
	EXTI_FUNC[4]();
    3530:	09 95       	icall
	
}
    3532:	ff 91       	pop	r31
    3534:	ef 91       	pop	r30
    3536:	bf 91       	pop	r27
    3538:	af 91       	pop	r26
    353a:	9f 91       	pop	r25
    353c:	8f 91       	pop	r24
    353e:	7f 91       	pop	r23
    3540:	6f 91       	pop	r22
    3542:	5f 91       	pop	r21
    3544:	4f 91       	pop	r20
    3546:	3f 91       	pop	r19
    3548:	2f 91       	pop	r18
    354a:	0f 90       	pop	r0
    354c:	0f be       	out	0x3f, r0	; 63
    354e:	0f 90       	pop	r0
    3550:	1f 90       	pop	r1
    3552:	18 95       	reti

Disassembly of section .text.PGPIO_PORT_get_register:

00003b72 <PGPIO_PORT_get_register>:
GPIO_PORT_ID* PGPIO_PORT_get_register(GPIO_PORT PORT_adress)
{
	GPIO_PORT_ID* PORT = (GPIO_PORT_ID*) PORT_adress;
	return PORT;

}
    3b72:	90 e0       	ldi	r25, 0x00	; 0
    3b74:	08 95       	ret

Disassembly of section .text.GPIO_PIN_mode:

00003066 <GPIO_PIN_mode>:
}
void GPIO_togglePIN_value(GPIO_PORT PORT_adress,u8 PIN )
{
	GPIO_PORT_ID* PORT = PGPIO_PORT_get_register(PORT_adress);
	togglebit(PORT->PORT_ID,PIN);
}
    3066:	cf 93       	push	r28
    3068:	df 93       	push	r29
    306a:	d6 2f       	mov	r29, r22
    306c:	c4 2f       	mov	r28, r20
    306e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
    3072:	c1 30       	cpi	r28, 0x01	; 1
    3074:	89 f0       	breq	.+34     	; 0x3098 <GPIO_PIN_mode+0x32>
    3076:	18 f0       	brcs	.+6      	; 0x307e <GPIO_PIN_mode+0x18>
    3078:	c2 30       	cpi	r28, 0x02	; 2
    307a:	d1 f0       	breq	.+52     	; 0x30b0 <GPIO_PIN_mode+0x4a>
    307c:	29 c0       	rjmp	.+82     	; 0x30d0 <GPIO_PIN_mode+0x6a>
    307e:	fc 01       	movw	r30, r24
    3080:	41 81       	ldd	r20, Z+1	; 0x01
    3082:	21 e0       	ldi	r18, 0x01	; 1
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	02 c0       	rjmp	.+4      	; 0x308c <GPIO_PIN_mode+0x26>
    3088:	22 0f       	add	r18, r18
    308a:	33 1f       	adc	r19, r19
    308c:	da 95       	dec	r29
    308e:	e2 f7       	brpl	.-8      	; 0x3088 <GPIO_PIN_mode+0x22>
    3090:	20 95       	com	r18
    3092:	24 23       	and	r18, r20
    3094:	21 83       	std	Z+1, r18	; 0x01
    3096:	1c c0       	rjmp	.+56     	; 0x30d0 <GPIO_PIN_mode+0x6a>
    3098:	fc 01       	movw	r30, r24
    309a:	41 81       	ldd	r20, Z+1	; 0x01
    309c:	21 e0       	ldi	r18, 0x01	; 1
    309e:	30 e0       	ldi	r19, 0x00	; 0
    30a0:	02 c0       	rjmp	.+4      	; 0x30a6 <GPIO_PIN_mode+0x40>
    30a2:	22 0f       	add	r18, r18
    30a4:	33 1f       	adc	r19, r19
    30a6:	da 95       	dec	r29
    30a8:	e2 f7       	brpl	.-8      	; 0x30a2 <GPIO_PIN_mode+0x3c>
    30aa:	24 2b       	or	r18, r20
    30ac:	21 83       	std	Z+1, r18	; 0x01
    30ae:	10 c0       	rjmp	.+32     	; 0x30d0 <GPIO_PIN_mode+0x6a>
    30b0:	fc 01       	movw	r30, r24
    30b2:	41 81       	ldd	r20, Z+1	; 0x01
    30b4:	21 e0       	ldi	r18, 0x01	; 1
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	02 c0       	rjmp	.+4      	; 0x30be <GPIO_PIN_mode+0x58>
    30ba:	22 0f       	add	r18, r18
    30bc:	33 1f       	adc	r19, r19
    30be:	da 95       	dec	r29
    30c0:	e2 f7       	brpl	.-8      	; 0x30ba <GPIO_PIN_mode+0x54>
    30c2:	32 2f       	mov	r19, r18
    30c4:	30 95       	com	r19
    30c6:	34 23       	and	r19, r20
    30c8:	31 83       	std	Z+1, r19	; 0x01
    30ca:	32 81       	ldd	r19, Z+2	; 0x02
    30cc:	23 2b       	or	r18, r19
    30ce:	22 83       	std	Z+2, r18	; 0x02
    30d0:	df 91       	pop	r29
    30d2:	cf 91       	pop	r28
    30d4:	08 95       	ret

Disassembly of section .text.GPIO_writePIN_value:

00003836 <GPIO_writePIN_value>:
    3836:	cf 93       	push	r28
    3838:	df 93       	push	r29
    383a:	d6 2f       	mov	r29, r22
    383c:	c4 2f       	mov	r28, r20
    383e:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
    3842:	cc 23       	and	r28, r28
    3844:	19 f0       	breq	.+6      	; 0x384c <GPIO_writePIN_value+0x16>
    3846:	c1 30       	cpi	r28, 0x01	; 1
    3848:	71 f0       	breq	.+28     	; 0x3866 <GPIO_writePIN_value+0x30>
    384a:	18 c0       	rjmp	.+48     	; 0x387c <GPIO_writePIN_value+0x46>
    384c:	fc 01       	movw	r30, r24
    384e:	42 81       	ldd	r20, Z+2	; 0x02
    3850:	21 e0       	ldi	r18, 0x01	; 1
    3852:	30 e0       	ldi	r19, 0x00	; 0
    3854:	02 c0       	rjmp	.+4      	; 0x385a <GPIO_writePIN_value+0x24>
    3856:	22 0f       	add	r18, r18
    3858:	33 1f       	adc	r19, r19
    385a:	da 95       	dec	r29
    385c:	e2 f7       	brpl	.-8      	; 0x3856 <GPIO_writePIN_value+0x20>
    385e:	20 95       	com	r18
    3860:	24 23       	and	r18, r20
    3862:	22 83       	std	Z+2, r18	; 0x02
    3864:	0b c0       	rjmp	.+22     	; 0x387c <GPIO_writePIN_value+0x46>
    3866:	fc 01       	movw	r30, r24
    3868:	42 81       	ldd	r20, Z+2	; 0x02
    386a:	21 e0       	ldi	r18, 0x01	; 1
    386c:	30 e0       	ldi	r19, 0x00	; 0
    386e:	02 c0       	rjmp	.+4      	; 0x3874 <GPIO_writePIN_value+0x3e>
    3870:	22 0f       	add	r18, r18
    3872:	33 1f       	adc	r19, r19
    3874:	da 95       	dec	r29
    3876:	e2 f7       	brpl	.-8      	; 0x3870 <GPIO_writePIN_value+0x3a>
    3878:	24 2b       	or	r18, r20
    387a:	22 83       	std	Z+2, r18	; 0x02
    387c:	df 91       	pop	r29
    387e:	cf 91       	pop	r28
    3880:	08 95       	ret

Disassembly of section .text.GPIO_readPIN_value:

00003a04 <GPIO_readPIN_value>:
u8 GPIO_readPIN_value(GPIO_PORT PORT_adress,u8 PIN )
{
    3a04:	cf 93       	push	r28
    3a06:	c6 2f       	mov	r28, r22
	volatile GPIO_PORT_ID* PORT = PGPIO_PORT_get_register(PORT_adress);
    3a08:	0e 94 b9 1d 	call	0x3b72	; 0x3b72 <PGPIO_PORT_get_register>
	
	if (PIN > 7)
    3a0c:	c8 30       	cpi	r28, 0x08	; 8
    3a0e:	50 f4       	brcc	.+20     	; 0x3a24 <GPIO_readPIN_value+0x20>
	{
		return 255;
	}
	return readbit(PORT->PIN_ID,PIN);
    3a10:	fc 01       	movw	r30, r24
    3a12:	80 81       	ld	r24, Z
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	02 c0       	rjmp	.+4      	; 0x3a1c <GPIO_readPIN_value+0x18>
    3a18:	95 95       	asr	r25
    3a1a:	87 95       	ror	r24
    3a1c:	ca 95       	dec	r28
    3a1e:	e2 f7       	brpl	.-8      	; 0x3a18 <GPIO_readPIN_value+0x14>
    3a20:	81 70       	andi	r24, 0x01	; 1
    3a22:	01 c0       	rjmp	.+2      	; 0x3a26 <GPIO_readPIN_value+0x22>
{
	volatile GPIO_PORT_ID* PORT = PGPIO_PORT_get_register(PORT_adress);
	
	if (PIN > 7)
	{
		return 255;
    3a24:	8f ef       	ldi	r24, 0xFF	; 255
	}
	return readbit(PORT->PIN_ID,PIN);
}
    3a26:	cf 91       	pop	r28
    3a28:	08 95       	ret

Disassembly of section .text.__vector_16:

00003554 <__vector_16>:
	
}


void TIMER0_OVF(void) 
{
    3554:	1f 92       	push	r1
    3556:	0f 92       	push	r0
    3558:	0f b6       	in	r0, 0x3f	; 63
    355a:	0f 92       	push	r0
    355c:	11 24       	eor	r1, r1
    355e:	2f 93       	push	r18
    3560:	3f 93       	push	r19
    3562:	4f 93       	push	r20
    3564:	5f 93       	push	r21
    3566:	6f 93       	push	r22
    3568:	7f 93       	push	r23
    356a:	8f 93       	push	r24
    356c:	9f 93       	push	r25
    356e:	af 93       	push	r26
    3570:	bf 93       	push	r27
    3572:	ef 93       	push	r30
    3574:	ff 93       	push	r31
	
	if (timer_call_back[0] == 0)
    3576:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <timer_call_back>
    357a:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <timer_call_back+0x1>
    357e:	30 97       	sbiw	r30, 0x00	; 0
    3580:	09 f0       	breq	.+2      	; 0x3584 <__vector_16+0x30>
	{
		return;
	}
	timer_call_back[0]();	
    3582:	09 95       	icall
	
}
    3584:	ff 91       	pop	r31
    3586:	ef 91       	pop	r30
    3588:	bf 91       	pop	r27
    358a:	af 91       	pop	r26
    358c:	9f 91       	pop	r25
    358e:	8f 91       	pop	r24
    3590:	7f 91       	pop	r23
    3592:	6f 91       	pop	r22
    3594:	5f 91       	pop	r21
    3596:	4f 91       	pop	r20
    3598:	3f 91       	pop	r19
    359a:	2f 91       	pop	r18
    359c:	0f 90       	pop	r0
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	0f 90       	pop	r0
    35a2:	1f 90       	pop	r1
    35a4:	18 95       	reti

Disassembly of section .text.__vector_15:

000035a6 <__vector_15>:
void TIMER0_COMPB(void) {
    35a6:	1f 92       	push	r1
    35a8:	0f 92       	push	r0
    35aa:	0f b6       	in	r0, 0x3f	; 63
    35ac:	0f 92       	push	r0
    35ae:	11 24       	eor	r1, r1
    35b0:	2f 93       	push	r18
    35b2:	3f 93       	push	r19
    35b4:	4f 93       	push	r20
    35b6:	5f 93       	push	r21
    35b8:	6f 93       	push	r22
    35ba:	7f 93       	push	r23
    35bc:	8f 93       	push	r24
    35be:	9f 93       	push	r25
    35c0:	af 93       	push	r26
    35c2:	bf 93       	push	r27
    35c4:	ef 93       	push	r30
    35c6:	ff 93       	push	r31
	
	if (timer_call_back[1] == 0)
    35c8:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <timer_call_back+0x2>
    35cc:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <timer_call_back+0x3>
    35d0:	30 97       	sbiw	r30, 0x00	; 0
    35d2:	09 f0       	breq	.+2      	; 0x35d6 <__vector_15+0x30>
	{
		return;
	}
	timer_call_back[1]();	
    35d4:	09 95       	icall
	
	
}
    35d6:	ff 91       	pop	r31
    35d8:	ef 91       	pop	r30
    35da:	bf 91       	pop	r27
    35dc:	af 91       	pop	r26
    35de:	9f 91       	pop	r25
    35e0:	8f 91       	pop	r24
    35e2:	7f 91       	pop	r23
    35e4:	6f 91       	pop	r22
    35e6:	5f 91       	pop	r21
    35e8:	4f 91       	pop	r20
    35ea:	3f 91       	pop	r19
    35ec:	2f 91       	pop	r18
    35ee:	0f 90       	pop	r0
    35f0:	0f be       	out	0x3f, r0	; 63
    35f2:	0f 90       	pop	r0
    35f4:	1f 90       	pop	r1
    35f6:	18 95       	reti

Disassembly of section .text.__vector_14:

000035f8 <__vector_14>:
void TIMER0_COMPA(void)  {
    35f8:	1f 92       	push	r1
    35fa:	0f 92       	push	r0
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	0f 92       	push	r0
    3600:	11 24       	eor	r1, r1
    3602:	2f 93       	push	r18
    3604:	3f 93       	push	r19
    3606:	4f 93       	push	r20
    3608:	5f 93       	push	r21
    360a:	6f 93       	push	r22
    360c:	7f 93       	push	r23
    360e:	8f 93       	push	r24
    3610:	9f 93       	push	r25
    3612:	af 93       	push	r26
    3614:	bf 93       	push	r27
    3616:	ef 93       	push	r30
    3618:	ff 93       	push	r31
	
	if (timer_call_back[2] == 0)
    361a:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <timer_call_back+0x4>
    361e:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <timer_call_back+0x5>
    3622:	30 97       	sbiw	r30, 0x00	; 0
    3624:	09 f0       	breq	.+2      	; 0x3628 <__vector_14+0x30>
	{
		return;
	}
	timer_call_back[2]();	
    3626:	09 95       	icall
	
}
    3628:	ff 91       	pop	r31
    362a:	ef 91       	pop	r30
    362c:	bf 91       	pop	r27
    362e:	af 91       	pop	r26
    3630:	9f 91       	pop	r25
    3632:	8f 91       	pop	r24
    3634:	7f 91       	pop	r23
    3636:	6f 91       	pop	r22
    3638:	5f 91       	pop	r21
    363a:	4f 91       	pop	r20
    363c:	3f 91       	pop	r19
    363e:	2f 91       	pop	r18
    3640:	0f 90       	pop	r0
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	0f 90       	pop	r0
    3646:	1f 90       	pop	r1
    3648:	18 95       	reti

Disassembly of section .text.__vector_13:

0000364a <__vector_13>:

void TIMER1_OVF(void)   {
    364a:	1f 92       	push	r1
    364c:	0f 92       	push	r0
    364e:	0f b6       	in	r0, 0x3f	; 63
    3650:	0f 92       	push	r0
    3652:	11 24       	eor	r1, r1
    3654:	2f 93       	push	r18
    3656:	3f 93       	push	r19
    3658:	4f 93       	push	r20
    365a:	5f 93       	push	r21
    365c:	6f 93       	push	r22
    365e:	7f 93       	push	r23
    3660:	8f 93       	push	r24
    3662:	9f 93       	push	r25
    3664:	af 93       	push	r26
    3666:	bf 93       	push	r27
    3668:	ef 93       	push	r30
    366a:	ff 93       	push	r31
	
	
	if (timer_call_back[3] == 0)
    366c:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <timer_call_back+0x6>
    3670:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <timer_call_back+0x7>
    3674:	30 97       	sbiw	r30, 0x00	; 0
    3676:	09 f0       	breq	.+2      	; 0x367a <__vector_13+0x30>
	{
		return;
	}
	timer_call_back[3]();	
    3678:	09 95       	icall
	
	
}
    367a:	ff 91       	pop	r31
    367c:	ef 91       	pop	r30
    367e:	bf 91       	pop	r27
    3680:	af 91       	pop	r26
    3682:	9f 91       	pop	r25
    3684:	8f 91       	pop	r24
    3686:	7f 91       	pop	r23
    3688:	6f 91       	pop	r22
    368a:	5f 91       	pop	r21
    368c:	4f 91       	pop	r20
    368e:	3f 91       	pop	r19
    3690:	2f 91       	pop	r18
    3692:	0f 90       	pop	r0
    3694:	0f be       	out	0x3f, r0	; 63
    3696:	0f 90       	pop	r0
    3698:	1f 90       	pop	r1
    369a:	18 95       	reti

Disassembly of section .text.__vector_12:

0000369c <__vector_12>:

void TIMER1_COMPB(void) {
    369c:	1f 92       	push	r1
    369e:	0f 92       	push	r0
    36a0:	0f b6       	in	r0, 0x3f	; 63
    36a2:	0f 92       	push	r0
    36a4:	11 24       	eor	r1, r1
    36a6:	2f 93       	push	r18
    36a8:	3f 93       	push	r19
    36aa:	4f 93       	push	r20
    36ac:	5f 93       	push	r21
    36ae:	6f 93       	push	r22
    36b0:	7f 93       	push	r23
    36b2:	8f 93       	push	r24
    36b4:	9f 93       	push	r25
    36b6:	af 93       	push	r26
    36b8:	bf 93       	push	r27
    36ba:	ef 93       	push	r30
    36bc:	ff 93       	push	r31
	
	
	if (timer_call_back[4] == 0)
    36be:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <timer_call_back+0x8>
    36c2:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <timer_call_back+0x9>
    36c6:	30 97       	sbiw	r30, 0x00	; 0
    36c8:	09 f0       	breq	.+2      	; 0x36cc <__vector_12+0x30>
	{
		return;
	}
	timer_call_back[4]();	
    36ca:	09 95       	icall
	
	
}
    36cc:	ff 91       	pop	r31
    36ce:	ef 91       	pop	r30
    36d0:	bf 91       	pop	r27
    36d2:	af 91       	pop	r26
    36d4:	9f 91       	pop	r25
    36d6:	8f 91       	pop	r24
    36d8:	7f 91       	pop	r23
    36da:	6f 91       	pop	r22
    36dc:	5f 91       	pop	r21
    36de:	4f 91       	pop	r20
    36e0:	3f 91       	pop	r19
    36e2:	2f 91       	pop	r18
    36e4:	0f 90       	pop	r0
    36e6:	0f be       	out	0x3f, r0	; 63
    36e8:	0f 90       	pop	r0
    36ea:	1f 90       	pop	r1
    36ec:	18 95       	reti

Disassembly of section .text.__vector_11:

000036ee <__vector_11>:

void TIMER1_COMPA(void)  {
    36ee:	1f 92       	push	r1
    36f0:	0f 92       	push	r0
    36f2:	0f b6       	in	r0, 0x3f	; 63
    36f4:	0f 92       	push	r0
    36f6:	11 24       	eor	r1, r1
    36f8:	2f 93       	push	r18
    36fa:	3f 93       	push	r19
    36fc:	4f 93       	push	r20
    36fe:	5f 93       	push	r21
    3700:	6f 93       	push	r22
    3702:	7f 93       	push	r23
    3704:	8f 93       	push	r24
    3706:	9f 93       	push	r25
    3708:	af 93       	push	r26
    370a:	bf 93       	push	r27
    370c:	ef 93       	push	r30
    370e:	ff 93       	push	r31
	
	
	if (timer_call_back[5] == 0)
    3710:	e0 91 2a 01 	lds	r30, 0x012A	; 0x80012a <timer_call_back+0xa>
    3714:	f0 91 2b 01 	lds	r31, 0x012B	; 0x80012b <timer_call_back+0xb>
    3718:	30 97       	sbiw	r30, 0x00	; 0
    371a:	09 f0       	breq	.+2      	; 0x371e <__vector_11+0x30>
	{
		return;
	}
	timer_call_back[5]();	
    371c:	09 95       	icall
	
}
    371e:	ff 91       	pop	r31
    3720:	ef 91       	pop	r30
    3722:	bf 91       	pop	r27
    3724:	af 91       	pop	r26
    3726:	9f 91       	pop	r25
    3728:	8f 91       	pop	r24
    372a:	7f 91       	pop	r23
    372c:	6f 91       	pop	r22
    372e:	5f 91       	pop	r21
    3730:	4f 91       	pop	r20
    3732:	3f 91       	pop	r19
    3734:	2f 91       	pop	r18
    3736:	0f 90       	pop	r0
    3738:	0f be       	out	0x3f, r0	; 63
    373a:	0f 90       	pop	r0
    373c:	1f 90       	pop	r1
    373e:	18 95       	reti

Disassembly of section .text.__vector_10:

000031ac <__vector_10>:
		resetbit(TIMSK_BASE_ADRESS[1],INT_SOURCE);
		
	
		case TIMER2:
	
		resetbit(TIMSK_BASE_ADRESS[2],INT_SOURCE);
    31ac:	1f 92       	push	r1
    31ae:	0f 92       	push	r0
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	0f 92       	push	r0
    31b4:	11 24       	eor	r1, r1
    31b6:	2f 93       	push	r18
    31b8:	3f 93       	push	r19
    31ba:	4f 93       	push	r20
    31bc:	5f 93       	push	r21
    31be:	6f 93       	push	r22
    31c0:	7f 93       	push	r23
    31c2:	8f 93       	push	r24
    31c4:	9f 93       	push	r25
    31c6:	af 93       	push	r26
    31c8:	bf 93       	push	r27
    31ca:	ef 93       	push	r30
    31cc:	ff 93       	push	r31
    31ce:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <timer_call_back_CAP>
    31d2:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <timer_call_back_CAP+0x1>
    31d6:	30 97       	sbiw	r30, 0x00	; 0
    31d8:	29 f0       	breq	.+10     	; 0x31e4 <__vector_10+0x38>
    31da:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
    31de:	90 91 87 00 	lds	r25, 0x0087	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
    31e2:	09 95       	icall
    31e4:	ff 91       	pop	r31
    31e6:	ef 91       	pop	r30
    31e8:	bf 91       	pop	r27
    31ea:	af 91       	pop	r26
    31ec:	9f 91       	pop	r25
    31ee:	8f 91       	pop	r24
    31f0:	7f 91       	pop	r23
    31f2:	6f 91       	pop	r22
    31f4:	5f 91       	pop	r21
    31f6:	4f 91       	pop	r20
    31f8:	3f 91       	pop	r19
    31fa:	2f 91       	pop	r18
    31fc:	0f 90       	pop	r0
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	0f 90       	pop	r0
    3202:	1f 90       	pop	r1
    3204:	18 95       	reti

Disassembly of section .text.__vector_9:

00003740 <__vector_9>:
	
}



void TIMER2_OVF(void)  {
    3740:	1f 92       	push	r1
    3742:	0f 92       	push	r0
    3744:	0f b6       	in	r0, 0x3f	; 63
    3746:	0f 92       	push	r0
    3748:	11 24       	eor	r1, r1
    374a:	2f 93       	push	r18
    374c:	3f 93       	push	r19
    374e:	4f 93       	push	r20
    3750:	5f 93       	push	r21
    3752:	6f 93       	push	r22
    3754:	7f 93       	push	r23
    3756:	8f 93       	push	r24
    3758:	9f 93       	push	r25
    375a:	af 93       	push	r26
    375c:	bf 93       	push	r27
    375e:	ef 93       	push	r30
    3760:	ff 93       	push	r31
	
	
	if (timer_call_back[6] == 0)
    3762:	e0 91 2c 01 	lds	r30, 0x012C	; 0x80012c <timer_call_back+0xc>
    3766:	f0 91 2d 01 	lds	r31, 0x012D	; 0x80012d <timer_call_back+0xd>
    376a:	30 97       	sbiw	r30, 0x00	; 0
    376c:	09 f0       	breq	.+2      	; 0x3770 <__vector_9+0x30>
	{
		return;
	}
	timer_call_back[6]();	
    376e:	09 95       	icall
	
	
}
    3770:	ff 91       	pop	r31
    3772:	ef 91       	pop	r30
    3774:	bf 91       	pop	r27
    3776:	af 91       	pop	r26
    3778:	9f 91       	pop	r25
    377a:	8f 91       	pop	r24
    377c:	7f 91       	pop	r23
    377e:	6f 91       	pop	r22
    3780:	5f 91       	pop	r21
    3782:	4f 91       	pop	r20
    3784:	3f 91       	pop	r19
    3786:	2f 91       	pop	r18
    3788:	0f 90       	pop	r0
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	0f 90       	pop	r0
    378e:	1f 90       	pop	r1
    3790:	18 95       	reti

Disassembly of section .text.__vector_8:

00003792 <__vector_8>:

void TIMER2_COMPB(void) {
    3792:	1f 92       	push	r1
    3794:	0f 92       	push	r0
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	0f 92       	push	r0
    379a:	11 24       	eor	r1, r1
    379c:	2f 93       	push	r18
    379e:	3f 93       	push	r19
    37a0:	4f 93       	push	r20
    37a2:	5f 93       	push	r21
    37a4:	6f 93       	push	r22
    37a6:	7f 93       	push	r23
    37a8:	8f 93       	push	r24
    37aa:	9f 93       	push	r25
    37ac:	af 93       	push	r26
    37ae:	bf 93       	push	r27
    37b0:	ef 93       	push	r30
    37b2:	ff 93       	push	r31
	
	
	if (timer_call_back[7] == 0)
    37b4:	e0 91 2e 01 	lds	r30, 0x012E	; 0x80012e <timer_call_back+0xe>
    37b8:	f0 91 2f 01 	lds	r31, 0x012F	; 0x80012f <timer_call_back+0xf>
    37bc:	30 97       	sbiw	r30, 0x00	; 0
    37be:	09 f0       	breq	.+2      	; 0x37c2 <__vector_8+0x30>
	{
		return;
	}
	timer_call_back[7]();	
    37c0:	09 95       	icall
	
	
}
    37c2:	ff 91       	pop	r31
    37c4:	ef 91       	pop	r30
    37c6:	bf 91       	pop	r27
    37c8:	af 91       	pop	r26
    37ca:	9f 91       	pop	r25
    37cc:	8f 91       	pop	r24
    37ce:	7f 91       	pop	r23
    37d0:	6f 91       	pop	r22
    37d2:	5f 91       	pop	r21
    37d4:	4f 91       	pop	r20
    37d6:	3f 91       	pop	r19
    37d8:	2f 91       	pop	r18
    37da:	0f 90       	pop	r0
    37dc:	0f be       	out	0x3f, r0	; 63
    37de:	0f 90       	pop	r0
    37e0:	1f 90       	pop	r1
    37e2:	18 95       	reti

Disassembly of section .text.__vector_7:

000037e4 <__vector_7>:

void TIMER2_COMPA(void) {
    37e4:	1f 92       	push	r1
    37e6:	0f 92       	push	r0
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	0f 92       	push	r0
    37ec:	11 24       	eor	r1, r1
    37ee:	2f 93       	push	r18
    37f0:	3f 93       	push	r19
    37f2:	4f 93       	push	r20
    37f4:	5f 93       	push	r21
    37f6:	6f 93       	push	r22
    37f8:	7f 93       	push	r23
    37fa:	8f 93       	push	r24
    37fc:	9f 93       	push	r25
    37fe:	af 93       	push	r26
    3800:	bf 93       	push	r27
    3802:	ef 93       	push	r30
    3804:	ff 93       	push	r31
	
	
	if (timer_call_back[8] == 0)
    3806:	e0 91 30 01 	lds	r30, 0x0130	; 0x800130 <timer_call_back+0x10>
    380a:	f0 91 31 01 	lds	r31, 0x0131	; 0x800131 <timer_call_back+0x11>
    380e:	30 97       	sbiw	r30, 0x00	; 0
    3810:	09 f0       	breq	.+2      	; 0x3814 <__vector_7+0x30>
	{
		return;
	}
	timer_call_back[8]();	
    3812:	09 95       	icall
	
	
	
	
}
    3814:	ff 91       	pop	r31
    3816:	ef 91       	pop	r30
    3818:	bf 91       	pop	r27
    381a:	af 91       	pop	r26
    381c:	9f 91       	pop	r25
    381e:	8f 91       	pop	r24
    3820:	7f 91       	pop	r23
    3822:	6f 91       	pop	r22
    3824:	5f 91       	pop	r21
    3826:	4f 91       	pop	r20
    3828:	3f 91       	pop	r19
    382a:	2f 91       	pop	r18
    382c:	0f 90       	pop	r0
    382e:	0f be       	out	0x3f, r0	; 63
    3830:	0f 90       	pop	r0
    3832:	1f 90       	pop	r1
    3834:	18 95       	reti

Disassembly of section .text.__vector_18:

00003206 <__vector_18>:
	return (UCSR0A & (1<<RXC0)); // check for data available in buffer 
}


void USART_RX_vector (void)
{
    3206:	1f 92       	push	r1
    3208:	0f 92       	push	r0
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	0f 92       	push	r0
    320e:	11 24       	eor	r1, r1
    3210:	2f 93       	push	r18
    3212:	3f 93       	push	r19
    3214:	4f 93       	push	r20
    3216:	5f 93       	push	r21
    3218:	6f 93       	push	r22
    321a:	7f 93       	push	r23
    321c:	8f 93       	push	r24
    321e:	9f 93       	push	r25
    3220:	af 93       	push	r26
    3222:	bf 93       	push	r27
    3224:	ef 93       	push	r30
    3226:	ff 93       	push	r31
	if (USART_INT_callback[0] == 0)
    3228:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <USART_INT_callback>
    322c:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <USART_INT_callback+0x1>
    3230:	30 97       	sbiw	r30, 0x00	; 0
    3232:	21 f0       	breq	.+8      	; 0x323c <__vector_18+0x36>
	{
		return;
	}
	
	USART_INT_callback[0](UDR0);
    3234:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	09 95       	icall
}	
    323c:	ff 91       	pop	r31
    323e:	ef 91       	pop	r30
    3240:	bf 91       	pop	r27
    3242:	af 91       	pop	r26
    3244:	9f 91       	pop	r25
    3246:	8f 91       	pop	r24
    3248:	7f 91       	pop	r23
    324a:	6f 91       	pop	r22
    324c:	5f 91       	pop	r21
    324e:	4f 91       	pop	r20
    3250:	3f 91       	pop	r19
    3252:	2f 91       	pop	r18
    3254:	0f 90       	pop	r0
    3256:	0f be       	out	0x3f, r0	; 63
    3258:	0f 90       	pop	r0
    325a:	1f 90       	pop	r1
    325c:	18 95       	reti

Disassembly of section .text.__vector_19:

0000325e <__vector_19>:

void USART_UDRE_vector (void)
{
    325e:	1f 92       	push	r1
    3260:	0f 92       	push	r0
    3262:	0f b6       	in	r0, 0x3f	; 63
    3264:	0f 92       	push	r0
    3266:	11 24       	eor	r1, r1
    3268:	2f 93       	push	r18
    326a:	3f 93       	push	r19
    326c:	4f 93       	push	r20
    326e:	5f 93       	push	r21
    3270:	6f 93       	push	r22
    3272:	7f 93       	push	r23
    3274:	8f 93       	push	r24
    3276:	9f 93       	push	r25
    3278:	af 93       	push	r26
    327a:	bf 93       	push	r27
    327c:	ef 93       	push	r30
    327e:	ff 93       	push	r31
	if (USART_INT_callback[1] == 0)
    3280:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <USART_INT_callback+0x2>
    3284:	f0 91 05 01 	lds	r31, 0x0105	; 0x800105 <USART_INT_callback+0x3>
    3288:	30 97       	sbiw	r30, 0x00	; 0
    328a:	21 f0       	breq	.+8      	; 0x3294 <__vector_19+0x36>
	{
		return;
	}
	
	USART_INT_callback[1](UDR0);	
    328c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	09 95       	icall
}
    3294:	ff 91       	pop	r31
    3296:	ef 91       	pop	r30
    3298:	bf 91       	pop	r27
    329a:	af 91       	pop	r26
    329c:	9f 91       	pop	r25
    329e:	8f 91       	pop	r24
    32a0:	7f 91       	pop	r23
    32a2:	6f 91       	pop	r22
    32a4:	5f 91       	pop	r21
    32a6:	4f 91       	pop	r20
    32a8:	3f 91       	pop	r19
    32aa:	2f 91       	pop	r18
    32ac:	0f 90       	pop	r0
    32ae:	0f be       	out	0x3f, r0	; 63
    32b0:	0f 90       	pop	r0
    32b2:	1f 90       	pop	r1
    32b4:	18 95       	reti

Disassembly of section .text.__vector_20:

000032b6 <__vector_20>:

void USART_TX_vector (void)
{
    32b6:	1f 92       	push	r1
    32b8:	0f 92       	push	r0
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	0f 92       	push	r0
    32be:	11 24       	eor	r1, r1
    32c0:	2f 93       	push	r18
    32c2:	3f 93       	push	r19
    32c4:	4f 93       	push	r20
    32c6:	5f 93       	push	r21
    32c8:	6f 93       	push	r22
    32ca:	7f 93       	push	r23
    32cc:	8f 93       	push	r24
    32ce:	9f 93       	push	r25
    32d0:	af 93       	push	r26
    32d2:	bf 93       	push	r27
    32d4:	ef 93       	push	r30
    32d6:	ff 93       	push	r31
	if (USART_INT_callback[2] == 0)
    32d8:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <USART_INT_callback+0x4>
    32dc:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <USART_INT_callback+0x5>
    32e0:	30 97       	sbiw	r30, 0x00	; 0
    32e2:	21 f0       	breq	.+8      	; 0x32ec <__vector_20+0x36>
	{
		return;
	}
	
	USART_INT_callback[2](UDR0);	
    32e4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	09 95       	icall
}
    32ec:	ff 91       	pop	r31
    32ee:	ef 91       	pop	r30
    32f0:	bf 91       	pop	r27
    32f2:	af 91       	pop	r26
    32f4:	9f 91       	pop	r25
    32f6:	8f 91       	pop	r24
    32f8:	7f 91       	pop	r23
    32fa:	6f 91       	pop	r22
    32fc:	5f 91       	pop	r21
    32fe:	4f 91       	pop	r20
    3300:	3f 91       	pop	r19
    3302:	2f 91       	pop	r18
    3304:	0f 90       	pop	r0
    3306:	0f be       	out	0x3f, r0	; 63
    3308:	0f 90       	pop	r0
    330a:	1f 90       	pop	r1
    330c:	18 95       	reti

Disassembly of section .text.libgcc.div:

00003882 <__udivmodsi4>:
    3882:	a1 e2       	ldi	r26, 0x21	; 33
    3884:	1a 2e       	mov	r1, r26
    3886:	aa 1b       	sub	r26, r26
    3888:	bb 1b       	sub	r27, r27
    388a:	fd 01       	movw	r30, r26
    388c:	0d c0       	rjmp	.+26     	; 0x38a8 <__udivmodsi4_ep>

0000388e <__udivmodsi4_loop>:
    388e:	aa 1f       	adc	r26, r26
    3890:	bb 1f       	adc	r27, r27
    3892:	ee 1f       	adc	r30, r30
    3894:	ff 1f       	adc	r31, r31
    3896:	a2 17       	cp	r26, r18
    3898:	b3 07       	cpc	r27, r19
    389a:	e4 07       	cpc	r30, r20
    389c:	f5 07       	cpc	r31, r21
    389e:	20 f0       	brcs	.+8      	; 0x38a8 <__udivmodsi4_ep>
    38a0:	a2 1b       	sub	r26, r18
    38a2:	b3 0b       	sbc	r27, r19
    38a4:	e4 0b       	sbc	r30, r20
    38a6:	f5 0b       	sbc	r31, r21

000038a8 <__udivmodsi4_ep>:
    38a8:	66 1f       	adc	r22, r22
    38aa:	77 1f       	adc	r23, r23
    38ac:	88 1f       	adc	r24, r24
    38ae:	99 1f       	adc	r25, r25
    38b0:	1a 94       	dec	r1
    38b2:	69 f7       	brne	.-38     	; 0x388e <__udivmodsi4_loop>
    38b4:	60 95       	com	r22
    38b6:	70 95       	com	r23
    38b8:	80 95       	com	r24
    38ba:	90 95       	com	r25
    38bc:	9b 01       	movw	r18, r22
    38be:	ac 01       	movw	r20, r24
    38c0:	bd 01       	movw	r22, r26
    38c2:	cf 01       	movw	r24, r30
    38c4:	08 95       	ret

Disassembly of section .text.libgcc:

00003aae <__movmemx_qi>:
    3aae:	99 27       	eor	r25, r25

00003ab0 <__movmemx_hi>:
    3ab0:	77 fd       	sbrc	r23, 7
    3ab2:	05 c0       	rjmp	.+10     	; 0x3abe <__movmemx_hi+0xe>
    3ab4:	05 90       	lpm	r0, Z+
    3ab6:	0d 92       	st	X+, r0
    3ab8:	01 97       	sbiw	r24, 0x01	; 1
    3aba:	e1 f7       	brne	.-8      	; 0x3ab4 <__movmemx_hi+0x4>
    3abc:	08 95       	ret
    3abe:	01 90       	ld	r0, Z+
    3ac0:	0d 92       	st	X+, r0
    3ac2:	01 97       	sbiw	r24, 0x01	; 1
    3ac4:	e1 f7       	brne	.-8      	; 0x3abe <__movmemx_hi+0xe>
    3ac6:	08 95       	ret

Disassembly of section .text.libgcc:

00003ac8 <__adddi3_s8>:
    3ac8:	00 24       	eor	r0, r0
    3aca:	a7 fd       	sbrc	r26, 7
    3acc:	00 94       	com	r0
    3ace:	2a 0f       	add	r18, r26
    3ad0:	30 1d       	adc	r19, r0
    3ad2:	40 1d       	adc	r20, r0
    3ad4:	50 1d       	adc	r21, r0
    3ad6:	60 1d       	adc	r22, r0
    3ad8:	70 1d       	adc	r23, r0
    3ada:	80 1d       	adc	r24, r0
    3adc:	90 1d       	adc	r25, r0
    3ade:	08 95       	ret

Disassembly of section .text.libgcc:

00003b3a <__subdi3>:
    3b3a:	2a 19       	sub	r18, r10
    3b3c:	3b 09       	sbc	r19, r11
    3b3e:	4c 09       	sbc	r20, r12
    3b40:	5d 09       	sbc	r21, r13
    3b42:	6e 09       	sbc	r22, r14
    3b44:	7f 09       	sbc	r23, r15
    3b46:	80 0b       	sbc	r24, r16
    3b48:	91 0b       	sbc	r25, r17
    3b4a:	08 95       	ret

Disassembly of section .text.libgcc:

00003ae0 <__cmpdi2_s8>:
    3ae0:	00 24       	eor	r0, r0
    3ae2:	a7 fd       	sbrc	r26, 7
    3ae4:	00 94       	com	r0
    3ae6:	2a 17       	cp	r18, r26
    3ae8:	30 05       	cpc	r19, r0
    3aea:	40 05       	cpc	r20, r0
    3aec:	50 05       	cpc	r21, r0
    3aee:	60 05       	cpc	r22, r0
    3af0:	70 05       	cpc	r23, r0
    3af2:	80 05       	cpc	r24, r0
    3af4:	90 05       	cpc	r25, r0
    3af6:	08 95       	ret

Disassembly of section .text.__dummy_fini:

00003b7a <_fini>:
    3b7a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00003b7c <__funcs_on_exit>:
    3b7c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

00003b7e <__simulator_exit>:
    3b7e:	08 95       	ret

Disassembly of section .text.exit:

00003b10 <exit>:
    3b10:	ec 01       	movw	r28, r24
    3b12:	0e 94 be 1d 	call	0x3b7c	; 0x3b7c <__funcs_on_exit>
    3b16:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <_fini>
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <__simulator_exit>
    3b20:	ce 01       	movw	r24, r28
    3b22:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <_Exit>

Disassembly of section .text.__simple_search_fl:

00002170 <__simple_search_fl>:
    2170:	ef 92       	push	r14
    2172:	ff 92       	push	r15
    2174:	0f 93       	push	r16
    2176:	1f 93       	push	r17
    2178:	cf 93       	push	r28
    217a:	df 93       	push	r29
    217c:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <__freelist>
    2180:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <__freelist+0x1>
    2184:	61 15       	cp	r22, r1
    2186:	71 05       	cpc	r23, r1
    2188:	09 f4       	brne	.+2      	; 0x218c <__simple_search_fl+0x1c>
    218a:	5b c0       	rjmp	.+182    	; 0x2242 <__simple_search_fl+0xd2>
    218c:	fb 01       	movw	r30, r22
    218e:	a0 e0       	ldi	r26, 0x00	; 0
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	40 e0       	ldi	r20, 0x00	; 0
    2194:	50 e0       	ldi	r21, 0x00	; 0
    2196:	c0 e0       	ldi	r28, 0x00	; 0
    2198:	d0 e0       	ldi	r29, 0x00	; 0
    219a:	00 81       	ld	r16, Z
    219c:	11 81       	ldd	r17, Z+1	; 0x01
    219e:	22 81       	ldd	r18, Z+2	; 0x02
    21a0:	33 81       	ldd	r19, Z+3	; 0x03
    21a2:	08 17       	cp	r16, r24
    21a4:	19 07       	cpc	r17, r25
    21a6:	71 f4       	brne	.+28     	; 0x21c4 <__simple_search_fl+0x54>
    21a8:	10 97       	sbiw	r26, 0x00	; 0
    21aa:	29 f0       	breq	.+10     	; 0x21b6 <__simple_search_fl+0x46>
    21ac:	13 96       	adiw	r26, 0x03	; 3
    21ae:	3c 93       	st	X, r19
    21b0:	2e 93       	st	-X, r18
    21b2:	12 97       	sbiw	r26, 0x02	; 2
    21b4:	04 c0       	rjmp	.+8      	; 0x21be <__simple_search_fl+0x4e>
    21b6:	30 93 3f 01 	sts	0x013F, r19	; 0x80013f <__freelist+0x1>
    21ba:	20 93 3e 01 	sts	0x013E, r18	; 0x80013e <__freelist>
    21be:	cf 01       	movw	r24, r30
    21c0:	02 96       	adiw	r24, 0x02	; 2
    21c2:	41 c0       	rjmp	.+130    	; 0x2246 <__simple_search_fl+0xd6>
    21c4:	80 17       	cp	r24, r16
    21c6:	91 07       	cpc	r25, r17
    21c8:	48 f4       	brcc	.+18     	; 0x21dc <__simple_search_fl+0x6c>
    21ca:	20 97       	sbiw	r28, 0x00	; 0
    21cc:	29 f0       	breq	.+10     	; 0x21d8 <__simple_search_fl+0x68>
    21ce:	e8 80       	ld	r14, Y
    21d0:	f9 80       	ldd	r15, Y+1	; 0x01
    21d2:	0e 15       	cp	r16, r14
    21d4:	1f 05       	cpc	r17, r15
    21d6:	10 f4       	brcc	.+4      	; 0x21dc <__simple_search_fl+0x6c>
    21d8:	ad 01       	movw	r20, r26
    21da:	ef 01       	movw	r28, r30
    21dc:	df 01       	movw	r26, r30
    21de:	21 15       	cp	r18, r1
    21e0:	31 05       	cpc	r19, r1
    21e2:	11 f0       	breq	.+4      	; 0x21e8 <__simple_search_fl+0x78>
    21e4:	f9 01       	movw	r30, r18
    21e6:	d9 cf       	rjmp	.-78     	; 0x219a <__simple_search_fl+0x2a>
    21e8:	20 97       	sbiw	r28, 0x00	; 0
    21ea:	59 f1       	breq	.+86     	; 0x2242 <__simple_search_fl+0xd2>
    21ec:	0a 81       	ldd	r16, Y+2	; 0x02
    21ee:	1b 81       	ldd	r17, Y+3	; 0x03
    21f0:	fe 01       	movw	r30, r28
    21f2:	21 91       	ld	r18, Z+
    21f4:	31 91       	ld	r19, Z+
    21f6:	28 1b       	sub	r18, r24
    21f8:	39 0b       	sbc	r19, r25
    21fa:	25 30       	cpi	r18, 0x05	; 5
    21fc:	31 05       	cpc	r19, r1
    21fe:	88 f0       	brcs	.+34     	; 0x2222 <__simple_search_fl+0xb2>
    2200:	99 83       	std	Y+1, r25	; 0x01
    2202:	88 83       	st	Y, r24
    2204:	df 01       	movw	r26, r30
    2206:	a8 0f       	add	r26, r24
    2208:	b9 1f       	adc	r27, r25
    220a:	22 50       	subi	r18, 0x02	; 2
    220c:	31 09       	sbc	r19, r1
    220e:	11 96       	adiw	r26, 0x01	; 1
    2210:	3c 93       	st	X, r19
    2212:	2e 93       	st	-X, r18
    2214:	12 96       	adiw	r26, 0x02	; 2
    2216:	0c 93       	st	X, r16
    2218:	12 97       	sbiw	r26, 0x02	; 2
    221a:	13 96       	adiw	r26, 0x03	; 3
    221c:	1c 93       	st	X, r17
    221e:	13 97       	sbiw	r26, 0x03	; 3
    2220:	8d 01       	movw	r16, r26
    2222:	c6 17       	cp	r28, r22
    2224:	d7 07       	cpc	r29, r23
    2226:	29 f4       	brne	.+10     	; 0x2232 <__simple_search_fl+0xc2>
    2228:	00 93 3e 01 	sts	0x013E, r16	; 0x80013e <__freelist>
    222c:	10 93 3f 01 	sts	0x013F, r17	; 0x80013f <__freelist+0x1>
    2230:	06 c0       	rjmp	.+12     	; 0x223e <__simple_search_fl+0xce>
    2232:	da 01       	movw	r26, r20
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	0c 93       	st	X, r16
    2238:	12 97       	sbiw	r26, 0x02	; 2
    223a:	13 96       	adiw	r26, 0x03	; 3
    223c:	1c 93       	st	X, r17
    223e:	cf 01       	movw	r24, r30
    2240:	02 c0       	rjmp	.+4      	; 0x2246 <__simple_search_fl+0xd6>
    2242:	80 e0       	ldi	r24, 0x00	; 0
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	e6 e0       	ldi	r30, 0x06	; 6
    224c:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__epilogue_restores__+0x18>

Disassembly of section .text.__simple_free:

00002f04 <__simple_free>:
    2f04:	00 97       	sbiw	r24, 0x00	; 0
    2f06:	c9 f1       	breq	.+114    	; 0x2f7a <__simple_free+0x76>
    2f08:	fc 01       	movw	r30, r24
    2f0a:	32 97       	sbiw	r30, 0x02	; 2
    2f0c:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <__freelist>
    2f10:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <__freelist+0x1>
    2f14:	10 97       	sbiw	r26, 0x00	; 0
    2f16:	59 f1       	breq	.+86     	; 0x2f6e <__simple_free+0x6a>
    2f18:	40 81       	ld	r20, Z
    2f1a:	51 81       	ldd	r21, Z+1	; 0x01
    2f1c:	9c 01       	movw	r18, r24
    2f1e:	24 0f       	add	r18, r20
    2f20:	35 1f       	adc	r19, r21
    2f22:	a2 17       	cp	r26, r18
    2f24:	b3 07       	cpc	r27, r19
    2f26:	79 f4       	brne	.+30     	; 0x2f46 <__simple_free+0x42>
    2f28:	12 96       	adiw	r26, 0x02	; 2
    2f2a:	8d 91       	ld	r24, X+
    2f2c:	9c 91       	ld	r25, X
    2f2e:	13 97       	sbiw	r26, 0x03	; 3
    2f30:	93 83       	std	Z+3, r25	; 0x03
    2f32:	82 83       	std	Z+2, r24	; 0x02
    2f34:	2d 91       	ld	r18, X+
    2f36:	3c 91       	ld	r19, X
    2f38:	ca 01       	movw	r24, r20
    2f3a:	82 0f       	add	r24, r18
    2f3c:	93 1f       	adc	r25, r19
    2f3e:	02 96       	adiw	r24, 0x02	; 2
    2f40:	91 83       	std	Z+1, r25	; 0x01
    2f42:	80 83       	st	Z, r24
    2f44:	16 c0       	rjmp	.+44     	; 0x2f72 <__simple_free+0x6e>
    2f46:	8d 91       	ld	r24, X+
    2f48:	9c 91       	ld	r25, X
    2f4a:	11 97       	sbiw	r26, 0x01	; 1
    2f4c:	9c 01       	movw	r18, r24
    2f4e:	2e 5f       	subi	r18, 0xFE	; 254
    2f50:	3f 4f       	sbci	r19, 0xFF	; 255
    2f52:	2a 0f       	add	r18, r26
    2f54:	3b 1f       	adc	r19, r27
    2f56:	e2 17       	cp	r30, r18
    2f58:	f3 07       	cpc	r31, r19
    2f5a:	31 f4       	brne	.+12     	; 0x2f68 <__simple_free+0x64>
    2f5c:	84 0f       	add	r24, r20
    2f5e:	95 1f       	adc	r25, r21
    2f60:	02 96       	adiw	r24, 0x02	; 2
    2f62:	8d 93       	st	X+, r24
    2f64:	9c 93       	st	X, r25
    2f66:	08 95       	ret
    2f68:	b3 83       	std	Z+3, r27	; 0x03
    2f6a:	a2 83       	std	Z+2, r26	; 0x02
    2f6c:	02 c0       	rjmp	.+4      	; 0x2f72 <__simple_free+0x6e>
    2f6e:	13 82       	std	Z+3, r1	; 0x03
    2f70:	12 82       	std	Z+2, r1	; 0x02
    2f72:	f0 93 3f 01 	sts	0x013F, r31	; 0x80013f <__freelist+0x1>
    2f76:	e0 93 3e 01 	sts	0x013E, r30	; 0x80013e <__freelist>
    2f7a:	08 95       	ret

Disassembly of section .text.__simple_malloc:

00002250 <__simple_malloc>:
    2250:	a2 e0       	ldi	r26, 0x02	; 2
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e2       	ldi	r30, 0x2E	; 46
    2256:	f1 e1       	ldi	r31, 0x11	; 17
    2258:	0c 94 a7 1c 	jmp	0x394e	; 0x394e <__prologue_saves__+0x14>
    225c:	8c 01       	movw	r16, r24
    225e:	82 e8       	ldi	r24, 0x82	; 130
    2260:	97 e1       	ldi	r25, 0x17	; 23
    2262:	01 15       	cp	r16, r1
    2264:	11 05       	cpc	r17, r1
    2266:	09 f4       	brne	.+2      	; 0x226a <__simple_malloc+0x1a>
    2268:	55 c0       	rjmp	.+170    	; 0x2314 <__simple_malloc+0xc4>
    226a:	89 2b       	or	r24, r25
    226c:	79 f0       	breq	.+30     	; 0x228c <__simple_malloc+0x3c>
    226e:	02 30       	cpi	r16, 0x02	; 2
    2270:	11 05       	cpc	r17, r1
    2272:	10 f4       	brcc	.+4      	; 0x2278 <__simple_malloc+0x28>
    2274:	02 e0       	ldi	r16, 0x02	; 2
    2276:	10 e0       	ldi	r17, 0x00	; 0
    2278:	c8 01       	movw	r24, r16
    227a:	0e 94 b8 10 	call	0x2170	; 0x2170 <__simple_search_fl>
    227e:	00 97       	sbiw	r24, 0x00	; 0
    2280:	09 f0       	breq	.+2      	; 0x2284 <__simple_malloc+0x34>
    2282:	4f c0       	rjmp	.+158    	; 0x2322 <__simple_malloc+0xd2>
    2284:	92 e0       	ldi	r25, 0x02	; 2
    2286:	e9 2e       	mov	r14, r25
    2288:	f1 2c       	mov	r15, r1
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <__simple_malloc+0x44>
    228c:	82 e8       	ldi	r24, 0x82	; 130
    228e:	e8 2e       	mov	r14, r24
    2290:	87 e1       	ldi	r24, 0x17	; 23
    2292:	f8 2e       	mov	r15, r24
    2294:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <end.1483>
    2298:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <end.1483+0x1>
    229c:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <cur.1482>
    22a0:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <cur.1482+0x1>
    22a4:	82 1b       	sub	r24, r18
    22a6:	93 0b       	sbc	r25, r19
    22a8:	67 01       	movw	r12, r14
    22aa:	c0 0e       	add	r12, r16
    22ac:	d1 1e       	adc	r13, r17
    22ae:	80 17       	cp	r24, r16
    22b0:	91 07       	cpc	r25, r17
    22b2:	f0 f4       	brcc	.+60     	; 0x22f0 <__simple_malloc+0xa0>
    22b4:	da 82       	std	Y+2, r13	; 0x02
    22b6:	c9 82       	std	Y+1, r12	; 0x01
    22b8:	ce 01       	movw	r24, r28
    22ba:	01 96       	adiw	r24, 0x01	; 1
    22bc:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <__expand_heap>
    22c0:	00 97       	sbiw	r24, 0x00	; 0
    22c2:	19 f4       	brne	.+6      	; 0x22ca <__simple_malloc+0x7a>
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	2c c0       	rjmp	.+88     	; 0x2322 <__simple_malloc+0xd2>
    22ca:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <end.1483>
    22ce:	30 91 41 01 	lds	r19, 0x0141	; 0x800141 <end.1483+0x1>
    22d2:	82 17       	cp	r24, r18
    22d4:	93 07       	cpc	r25, r19
    22d6:	21 f0       	breq	.+8      	; 0x22e0 <__simple_malloc+0x90>
    22d8:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <cur.1482+0x1>
    22dc:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <cur.1482>
    22e0:	29 81       	ldd	r18, Y+1	; 0x01
    22e2:	3a 81       	ldd	r19, Y+2	; 0x02
    22e4:	82 0f       	add	r24, r18
    22e6:	93 1f       	adc	r25, r19
    22e8:	90 93 41 01 	sts	0x0141, r25	; 0x800141 <end.1483+0x1>
    22ec:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <end.1483>
    22f0:	e0 91 42 01 	lds	r30, 0x0142	; 0x800142 <cur.1482>
    22f4:	f0 91 43 01 	lds	r31, 0x0143	; 0x800143 <cur.1482+0x1>
    22f8:	cf 01       	movw	r24, r30
    22fa:	e1 14       	cp	r14, r1
    22fc:	f1 04       	cpc	r15, r1
    22fe:	19 f0       	breq	.+6      	; 0x2306 <__simple_malloc+0xb6>
    2300:	02 96       	adiw	r24, 0x02	; 2
    2302:	11 83       	std	Z+1, r17	; 0x01
    2304:	00 83       	st	Z, r16
    2306:	ce 0e       	add	r12, r30
    2308:	df 1e       	adc	r13, r31
    230a:	d0 92 43 01 	sts	0x0143, r13	; 0x800143 <cur.1482+0x1>
    230e:	c0 92 42 01 	sts	0x0142, r12	; 0x800142 <cur.1482>
    2312:	07 c0       	rjmp	.+14     	; 0x2322 <__simple_malloc+0xd2>
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	09 f0       	breq	.+2      	; 0x231a <__simple_malloc+0xca>
    2318:	ad cf       	rjmp	.-166    	; 0x2274 <__simple_malloc+0x24>
    231a:	7c 01       	movw	r14, r24
    231c:	01 e0       	ldi	r16, 0x01	; 1
    231e:	10 e0       	ldi	r17, 0x00	; 0
    2320:	b9 cf       	rjmp	.-142    	; 0x2294 <__simple_malloc+0x44>
    2322:	22 96       	adiw	r28, 0x02	; 2
    2324:	e8 e0       	ldi	r30, 0x08	; 8
    2326:	0c 94 c3 1c 	jmp	0x3986	; 0x3986 <__epilogue_restores__+0x14>

Disassembly of section .text.__wrap_sprintf:

00003a2a <_sprintf_cdopuxX>:
    3a2a:	a0 e0       	ldi	r26, 0x00	; 0
    3a2c:	b0 e0       	ldi	r27, 0x00	; 0
    3a2e:	eb e1       	ldi	r30, 0x1B	; 27
    3a30:	fd e1       	ldi	r31, 0x1D	; 29
    3a32:	0c 94 ad 1c 	jmp	0x395a	; 0x395a <__prologue_saves__+0x20>
    3a36:	9e 01       	movw	r18, r28
    3a38:	26 5f       	subi	r18, 0xF6	; 246
    3a3a:	3f 4f       	sbci	r19, 0xFF	; 255
    3a3c:	4f 81       	ldd	r20, Y+7	; 0x07
    3a3e:	58 85       	ldd	r21, Y+8	; 0x08
    3a40:	69 85       	ldd	r22, Y+9	; 0x09
    3a42:	8d 81       	ldd	r24, Y+5	; 0x05
    3a44:	9e 81       	ldd	r25, Y+6	; 0x06
    3a46:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <__vsprintf>
    3a4a:	e2 e0       	ldi	r30, 0x02	; 2
    3a4c:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__epilogue_restores__+0x20>

Disassembly of section .text.__fmt_d:

0000208a <__fmt_d>:
    208a:	a2 e0       	ldi	r26, 0x02	; 2
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	eb e4       	ldi	r30, 0x4B	; 75
    2090:	f0 e1       	ldi	r31, 0x10	; 16
    2092:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__>
    2096:	4c 01       	movw	r8, r24
    2098:	6b 01       	movw	r12, r22
    209a:	fb 01       	movw	r30, r22
    209c:	22 81       	ldd	r18, Z+2	; 0x02
    209e:	33 81       	ldd	r19, Z+3	; 0x03
    20a0:	a4 80       	ldd	r10, Z+4	; 0x04
    20a2:	b5 80       	ldd	r11, Z+5	; 0x05
    20a4:	80 81       	ld	r24, Z
    20a6:	91 81       	ldd	r25, Z+1	; 0x01
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	66 80       	ldd	r6, Z+6	; 0x06
    20ae:	77 80       	ldd	r7, Z+7	; 0x07
    20b0:	fa 01       	movw	r30, r20
    20b2:	20 80       	ld	r2, Z
    20b4:	31 80       	ldd	r3, Z+1	; 0x01
    20b6:	42 80       	ldd	r4, Z+2	; 0x02
    20b8:	53 80       	ldd	r5, Z+3	; 0x03
    20ba:	b2 01       	movw	r22, r4
    20bc:	a1 01       	movw	r20, r2
    20be:	57 fe       	sbrs	r5, 7
    20c0:	07 c0       	rjmp	.+14     	; 0x20d0 <__fmt_d+0x46>
    20c2:	44 27       	eor	r20, r20
    20c4:	55 27       	eor	r21, r21
    20c6:	ba 01       	movw	r22, r20
    20c8:	42 19       	sub	r20, r2
    20ca:	53 09       	sbc	r21, r3
    20cc:	64 09       	sbc	r22, r4
    20ce:	75 09       	sbc	r23, r5
    20d0:	37 fd       	sbrc	r19, 7
    20d2:	03 c0       	rjmp	.+6      	; 0x20da <__fmt_d+0x50>
    20d4:	8d 7f       	andi	r24, 0xFD	; 253
    20d6:	9a 83       	std	Y+2, r25	; 0x02
    20d8:	89 83       	std	Y+1, r24	; 0x01
    20da:	95 01       	movw	r18, r10
    20dc:	57 fc       	sbrc	r5, 7
    20de:	05 c0       	rjmp	.+10     	; 0x20ea <__fmt_d+0x60>
    20e0:	89 81       	ldd	r24, Y+1	; 0x01
    20e2:	82 fd       	sbrc	r24, 2
    20e4:	02 c0       	rjmp	.+4      	; 0x20ea <__fmt_d+0x60>
    20e6:	83 ff       	sbrs	r24, 3
    20e8:	02 c0       	rjmp	.+4      	; 0x20ee <__fmt_d+0x64>
    20ea:	21 50       	subi	r18, 0x01	; 1
    20ec:	31 09       	sbc	r19, r1
    20ee:	ce 01       	movw	r24, r28
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	7c 01       	movw	r14, r24
    20f4:	0a e0       	ldi	r16, 0x0A	; 10
    20f6:	10 e0       	ldi	r17, 0x00	; 0
    20f8:	c6 01       	movw	r24, r12
    20fa:	0e 94 6d 12 	call	0x24da	; 0x24da <__cvt_u>
    20fe:	57 fc       	sbrc	r5, 7
    2100:	03 c0       	rjmp	.+6      	; 0x2108 <__fmt_d+0x7e>
    2102:	29 81       	ldd	r18, Y+1	; 0x01
    2104:	22 ff       	sbrs	r18, 2
    2106:	0a c0       	rjmp	.+20     	; 0x211c <__fmt_d+0x92>
    2108:	01 97       	sbiw	r24, 0x01	; 1
    210a:	f3 01       	movw	r30, r6
    210c:	e8 0f       	add	r30, r24
    210e:	f9 1f       	adc	r31, r25
    2110:	57 fc       	sbrc	r5, 7
    2112:	02 c0       	rjmp	.+4      	; 0x2118 <__fmt_d+0x8e>
    2114:	2b e2       	ldi	r18, 0x2B	; 43
    2116:	09 c0       	rjmp	.+18     	; 0x212a <__fmt_d+0xa0>
    2118:	2d e2       	ldi	r18, 0x2D	; 45
    211a:	07 c0       	rjmp	.+14     	; 0x212a <__fmt_d+0xa0>
    211c:	23 ff       	sbrs	r18, 3
    211e:	06 c0       	rjmp	.+12     	; 0x212c <__fmt_d+0xa2>
    2120:	01 97       	sbiw	r24, 0x01	; 1
    2122:	f3 01       	movw	r30, r6
    2124:	e8 0f       	add	r30, r24
    2126:	f9 1f       	adc	r31, r25
    2128:	20 e2       	ldi	r18, 0x20	; 32
    212a:	20 83       	st	Z, r18
    212c:	e9 80       	ldd	r14, Y+1	; 0x01
    212e:	fa 80       	ldd	r15, Y+2	; 0x02
    2130:	f6 01       	movw	r30, r12
    2132:	20 85       	ldd	r18, Z+8	; 0x08
    2134:	31 85       	ldd	r19, Z+9	; 0x09
    2136:	21 50       	subi	r18, 0x01	; 1
    2138:	31 09       	sbc	r19, r1
    213a:	28 1b       	sub	r18, r24
    213c:	39 0b       	sbc	r19, r25
    213e:	86 0d       	add	r24, r6
    2140:	97 1d       	adc	r25, r7
    2142:	ac 01       	movw	r20, r24
    2144:	60 e8       	ldi	r22, 0x80	; 128
    2146:	85 01       	movw	r16, r10
    2148:	c4 01       	movw	r24, r8
    214a:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__pad>
    214e:	9c 01       	movw	r18, r24
    2150:	f4 01       	movw	r30, r8
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	90 ff       	sbrs	r25, 0
    2158:	06 c0       	rjmp	.+12     	; 0x2166 <__fmt_d+0xdc>
    215a:	f6 01       	movw	r30, r12
    215c:	82 81       	ldd	r24, Z+2	; 0x02
    215e:	93 81       	ldd	r25, Z+3	; 0x03
    2160:	82 17       	cp	r24, r18
    2162:	93 07       	cpc	r25, r19
    2164:	0c f4       	brge	.+2      	; 0x2168 <__fmt_d+0xde>
    2166:	c9 01       	movw	r24, r18
    2168:	22 96       	adiw	r28, 0x02	; 2
    216a:	e2 e1       	ldi	r30, 0x12	; 18
    216c:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__>

Disassembly of section .text.__fmt_o:

000027d0 <__fmt_o>:
    27d0:	a2 e0       	ldi	r26, 0x02	; 2
    27d2:	b0 e0       	ldi	r27, 0x00	; 0
    27d4:	ee ee       	ldi	r30, 0xEE	; 238
    27d6:	f3 e1       	ldi	r31, 0x13	; 19
    27d8:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__prologue_saves__+0x8>
    27dc:	5c 01       	movw	r10, r24
    27de:	6b 01       	movw	r12, r22
    27e0:	fb 01       	movw	r30, r22
    27e2:	22 81       	ldd	r18, Z+2	; 0x02
    27e4:	33 81       	ldd	r19, Z+3	; 0x03
    27e6:	84 80       	ldd	r8, Z+4	; 0x04
    27e8:	95 80       	ldd	r9, Z+5	; 0x05
    27ea:	80 81       	ld	r24, Z
    27ec:	91 81       	ldd	r25, Z+1	; 0x01
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	66 80       	ldd	r6, Z+6	; 0x06
    27f4:	77 80       	ldd	r7, Z+7	; 0x07
    27f6:	37 fd       	sbrc	r19, 7
    27f8:	03 c0       	rjmp	.+6      	; 0x2800 <__fmt_o+0x30>
    27fa:	8d 7f       	andi	r24, 0xFD	; 253
    27fc:	9a 83       	std	Y+2, r25	; 0x02
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	fa 01       	movw	r30, r20
    2802:	40 81       	ld	r20, Z
    2804:	51 81       	ldd	r21, Z+1	; 0x01
    2806:	62 81       	ldd	r22, Z+2	; 0x02
    2808:	73 81       	ldd	r23, Z+3	; 0x03
    280a:	ce 01       	movw	r24, r28
    280c:	01 96       	adiw	r24, 0x01	; 1
    280e:	7c 01       	movw	r14, r24
    2810:	08 e0       	ldi	r16, 0x08	; 8
    2812:	10 e0       	ldi	r17, 0x00	; 0
    2814:	94 01       	movw	r18, r8
    2816:	c6 01       	movw	r24, r12
    2818:	0e 94 6d 12 	call	0x24da	; 0x24da <__cvt_u>
    281c:	29 81       	ldd	r18, Y+1	; 0x01
    281e:	24 ff       	sbrs	r18, 4
    2820:	06 c0       	rjmp	.+12     	; 0x282e <__fmt_o+0x5e>
    2822:	01 97       	sbiw	r24, 0x01	; 1
    2824:	f3 01       	movw	r30, r6
    2826:	e8 0f       	add	r30, r24
    2828:	f9 1f       	adc	r31, r25
    282a:	20 e3       	ldi	r18, 0x30	; 48
    282c:	20 83       	st	Z, r18
    282e:	29 81       	ldd	r18, Y+1	; 0x01
    2830:	23 ff       	sbrs	r18, 3
    2832:	06 c0       	rjmp	.+12     	; 0x2840 <__fmt_o+0x70>
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f3 01       	movw	r30, r6
    2838:	e8 0f       	add	r30, r24
    283a:	f9 1f       	adc	r31, r25
    283c:	20 e2       	ldi	r18, 0x20	; 32
    283e:	20 83       	st	Z, r18
    2840:	e9 80       	ldd	r14, Y+1	; 0x01
    2842:	fa 80       	ldd	r15, Y+2	; 0x02
    2844:	f6 01       	movw	r30, r12
    2846:	20 85       	ldd	r18, Z+8	; 0x08
    2848:	31 85       	ldd	r19, Z+9	; 0x09
    284a:	21 50       	subi	r18, 0x01	; 1
    284c:	31 09       	sbc	r19, r1
    284e:	28 1b       	sub	r18, r24
    2850:	39 0b       	sbc	r19, r25
    2852:	86 0d       	add	r24, r6
    2854:	97 1d       	adc	r25, r7
    2856:	ac 01       	movw	r20, r24
    2858:	60 e8       	ldi	r22, 0x80	; 128
    285a:	84 01       	movw	r16, r8
    285c:	c5 01       	movw	r24, r10
    285e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__pad>
    2862:	9c 01       	movw	r18, r24
    2864:	f5 01       	movw	r30, r10
    2866:	80 81       	ld	r24, Z
    2868:	91 81       	ldd	r25, Z+1	; 0x01
    286a:	90 ff       	sbrs	r25, 0
    286c:	06 c0       	rjmp	.+12     	; 0x287a <__fmt_o+0xaa>
    286e:	f6 01       	movw	r30, r12
    2870:	82 81       	ldd	r24, Z+2	; 0x02
    2872:	93 81       	ldd	r25, Z+3	; 0x03
    2874:	82 17       	cp	r24, r18
    2876:	93 07       	cpc	r25, r19
    2878:	0c f4       	brge	.+2      	; 0x287c <__fmt_o+0xac>
    287a:	c9 01       	movw	r24, r18
    287c:	22 96       	adiw	r28, 0x02	; 2
    287e:	ee e0       	ldi	r30, 0x0E	; 14
    2880:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__epilogue_restores__+0x8>

Disassembly of section .text.__fmt_s:

00002e8a <__fmt_s>:
    2e8a:	6f 92       	push	r6
    2e8c:	7f 92       	push	r7
    2e8e:	8f 92       	push	r8
    2e90:	cf 92       	push	r12
    2e92:	df 92       	push	r13
    2e94:	ef 92       	push	r14
    2e96:	ff 92       	push	r15
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	6c 01       	movw	r12, r24
    2ea2:	fb 01       	movw	r30, r22
    2ea4:	39 01       	movw	r6, r18
    2ea6:	84 2e       	mov	r8, r20
    2ea8:	c8 01       	movw	r24, r16
    2eaa:	c2 81       	ldd	r28, Z+2	; 0x02
    2eac:	d3 81       	ldd	r29, Z+3	; 0x03
    2eae:	04 81       	ldd	r16, Z+4	; 0x04
    2eb0:	15 81       	ldd	r17, Z+5	; 0x05
    2eb2:	e0 80       	ld	r14, Z
    2eb4:	f1 80       	ldd	r15, Z+1	; 0x01
    2eb6:	23 2b       	or	r18, r19
    2eb8:	24 2b       	or	r18, r20
    2eba:	31 f4       	brne	.+12     	; 0x2ec8 <__fmt_s+0x3e>
    2ebc:	20 e8       	ldi	r18, 0x80	; 128
    2ebe:	62 2e       	mov	r6, r18
    2ec0:	22 e0       	ldi	r18, 0x02	; 2
    2ec2:	72 2e       	mov	r7, r18
    2ec4:	20 e0       	ldi	r18, 0x00	; 0
    2ec6:	82 2e       	mov	r8, r18
    2ec8:	00 97       	sbiw	r24, 0x00	; 0
    2eca:	21 f4       	brne	.+8      	; 0x2ed4 <__fmt_s+0x4a>
    2ecc:	88 2d       	mov	r24, r8
    2ece:	b3 01       	movw	r22, r6
    2ed0:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <strlen>
    2ed4:	d7 fd       	sbrc	r29, 7
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <__fmt_s+0x56>
    2ed8:	c8 17       	cp	r28, r24
    2eda:	d9 07       	cpc	r29, r25
    2edc:	08 f4       	brcc	.+2      	; 0x2ee0 <__fmt_s+0x56>
    2ede:	ce 01       	movw	r24, r28
    2ee0:	9c 01       	movw	r18, r24
    2ee2:	68 2d       	mov	r22, r8
    2ee4:	a3 01       	movw	r20, r6
    2ee6:	c6 01       	movw	r24, r12
    2ee8:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__pad>
    2eec:	df 91       	pop	r29
    2eee:	cf 91       	pop	r28
    2ef0:	1f 91       	pop	r17
    2ef2:	0f 91       	pop	r16
    2ef4:	ff 90       	pop	r15
    2ef6:	ef 90       	pop	r14
    2ef8:	df 90       	pop	r13
    2efa:	cf 90       	pop	r12
    2efc:	8f 90       	pop	r8
    2efe:	7f 90       	pop	r7
    2f00:	6f 90       	pop	r6
    2f02:	08 95       	ret

Disassembly of section .text.__cvt_u:

000024da <__cvt_u>:
    24da:	a0 e0       	ldi	r26, 0x00	; 0
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e3 e7       	ldi	r30, 0x73	; 115
    24e0:	f2 e1       	ldi	r31, 0x12	; 18
    24e2:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <__prologue_saves__+0x4>
    24e6:	dc 01       	movw	r26, r24
    24e8:	28 01       	movw	r4, r16
    24ea:	16 96       	adiw	r26, 0x06	; 6
    24ec:	ad 90       	ld	r10, X+
    24ee:	bc 90       	ld	r11, X
    24f0:	17 97       	sbiw	r26, 0x07	; 7
    24f2:	f7 01       	movw	r30, r14
    24f4:	80 81       	ld	r24, Z
    24f6:	91 81       	ldd	r25, Z+1	; 0x01
    24f8:	12 96       	adiw	r26, 0x02	; 2
    24fa:	ed 91       	ld	r30, X+
    24fc:	fc 91       	ld	r31, X
    24fe:	13 97       	sbiw	r26, 0x03	; 3
    2500:	18 96       	adiw	r26, 0x08	; 8
    2502:	cd 91       	ld	r28, X+
    2504:	dc 91       	ld	r29, X
    2506:	19 97       	sbiw	r26, 0x09	; 9
    2508:	21 97       	sbiw	r28, 0x01	; 1
    250a:	f7 ff       	sbrs	r31, 7
    250c:	02 c0       	rjmp	.+4      	; 0x2512 <__cvt_u+0x38>
    250e:	e1 e0       	ldi	r30, 0x01	; 1
    2510:	f0 e0       	ldi	r31, 0x00	; 0
    2512:	ca 0d       	add	r28, r10
    2514:	db 1d       	adc	r29, r11
    2516:	18 82       	st	Y, r1
    2518:	69 01       	movw	r12, r18
    251a:	a1 e0       	ldi	r26, 0x01	; 1
    251c:	b0 e0       	ldi	r27, 0x00	; 0
    251e:	8f 01       	movw	r16, r30
    2520:	02 1b       	sub	r16, r18
    2522:	13 0b       	sbc	r17, r19
    2524:	4c 01       	movw	r8, r24
    2526:	f2 e0       	ldi	r31, 0x02	; 2
    2528:	8f 22       	and	r8, r31
    252a:	99 24       	eor	r9, r9
    252c:	05 2c       	mov	r0, r5
    252e:	00 0c       	add	r0, r0
    2530:	66 08       	sbc	r6, r6
    2532:	77 08       	sbc	r7, r7
    2534:	ce 01       	movw	r24, r28
    2536:	8a 19       	sub	r24, r10
    2538:	9b 09       	sbc	r25, r11
    253a:	ca 15       	cp	r28, r10
    253c:	db 05       	cpc	r29, r11
    253e:	19 f1       	breq	.+70     	; 0x2586 <__cvt_u+0xac>
    2540:	41 15       	cp	r20, r1
    2542:	51 05       	cpc	r21, r1
    2544:	61 05       	cpc	r22, r1
    2546:	71 05       	cpc	r23, r1
    2548:	89 f0       	breq	.+34     	; 0x256c <__cvt_u+0x92>
    254a:	cb 01       	movw	r24, r22
    254c:	ba 01       	movw	r22, r20
    254e:	a3 01       	movw	r20, r6
    2550:	92 01       	movw	r18, r4
    2552:	0e 94 41 1c 	call	0x3882	; 0x3882 <__udivmodsi4>
    2556:	ca 01       	movw	r24, r20
    2558:	a6 2f       	mov	r26, r22
    255a:	b7 2f       	mov	r27, r23
    255c:	60 5d       	subi	r22, 0xD0	; 208
    255e:	6a 93       	st	-Y, r22
    2560:	41 e0       	ldi	r20, 0x01	; 1
    2562:	c4 1a       	sub	r12, r20
    2564:	d1 08       	sbc	r13, r1
    2566:	a9 01       	movw	r20, r18
    2568:	bc 01       	movw	r22, r24
    256a:	e4 cf       	rjmp	.-56     	; 0x2534 <__cvt_u+0x5a>
    256c:	98 01       	movw	r18, r16
    256e:	2c 0d       	add	r18, r12
    2570:	3d 1d       	adc	r19, r13
    2572:	12 16       	cp	r1, r18
    2574:	13 06       	cpc	r1, r19
    2576:	4c f3       	brlt	.-46     	; 0x254a <__cvt_u+0x70>
    2578:	1c 14       	cp	r1, r12
    257a:	1d 04       	cpc	r1, r13
    257c:	34 f4       	brge	.+12     	; 0x258a <__cvt_u+0xb0>
    257e:	81 14       	cp	r8, r1
    2580:	91 04       	cpc	r9, r1
    2582:	19 f7       	brne	.-58     	; 0x254a <__cvt_u+0x70>
    2584:	02 c0       	rjmp	.+4      	; 0x258a <__cvt_u+0xb0>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	ab 2b       	or	r26, r27
    258c:	31 f4       	brne	.+12     	; 0x259a <__cvt_u+0xc0>
    258e:	f7 01       	movw	r30, r14
    2590:	20 81       	ld	r18, Z
    2592:	31 81       	ldd	r19, Z+1	; 0x01
    2594:	2f 7e       	andi	r18, 0xEF	; 239
    2596:	31 83       	std	Z+1, r19	; 0x01
    2598:	20 83       	st	Z, r18
    259a:	cd b7       	in	r28, 0x3d	; 61
    259c:	de b7       	in	r29, 0x3e	; 62
    259e:	e0 e1       	ldi	r30, 0x10	; 16
    25a0:	0c 94 bb 1c 	jmp	0x3976	; 0x3976 <__epilogue_restores__+0x4>

Disassembly of section .text.__fmt_u:

00002d6a <__fmt_u>:
    2d6a:	a2 e0       	ldi	r26, 0x02	; 2
    2d6c:	b0 e0       	ldi	r27, 0x00	; 0
    2d6e:	eb eb       	ldi	r30, 0xBB	; 187
    2d70:	f6 e1       	ldi	r31, 0x16	; 22
    2d72:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__prologue_saves__+0x8>
    2d76:	5c 01       	movw	r10, r24
    2d78:	6b 01       	movw	r12, r22
    2d7a:	fb 01       	movw	r30, r22
    2d7c:	22 81       	ldd	r18, Z+2	; 0x02
    2d7e:	33 81       	ldd	r19, Z+3	; 0x03
    2d80:	84 80       	ldd	r8, Z+4	; 0x04
    2d82:	95 80       	ldd	r9, Z+5	; 0x05
    2d84:	80 81       	ld	r24, Z
    2d86:	91 81       	ldd	r25, Z+1	; 0x01
    2d88:	9a 83       	std	Y+2, r25	; 0x02
    2d8a:	89 83       	std	Y+1, r24	; 0x01
    2d8c:	66 80       	ldd	r6, Z+6	; 0x06
    2d8e:	77 80       	ldd	r7, Z+7	; 0x07
    2d90:	37 fd       	sbrc	r19, 7
    2d92:	03 c0       	rjmp	.+6      	; 0x2d9a <__fmt_u+0x30>
    2d94:	8d 7f       	andi	r24, 0xFD	; 253
    2d96:	9a 83       	std	Y+2, r25	; 0x02
    2d98:	89 83       	std	Y+1, r24	; 0x01
    2d9a:	fa 01       	movw	r30, r20
    2d9c:	40 81       	ld	r20, Z
    2d9e:	51 81       	ldd	r21, Z+1	; 0x01
    2da0:	62 81       	ldd	r22, Z+2	; 0x02
    2da2:	73 81       	ldd	r23, Z+3	; 0x03
    2da4:	ce 01       	movw	r24, r28
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	7c 01       	movw	r14, r24
    2daa:	0a e0       	ldi	r16, 0x0A	; 10
    2dac:	10 e0       	ldi	r17, 0x00	; 0
    2dae:	94 01       	movw	r18, r8
    2db0:	c6 01       	movw	r24, r12
    2db2:	0e 94 6d 12 	call	0x24da	; 0x24da <__cvt_u>
    2db6:	e9 80       	ldd	r14, Y+1	; 0x01
    2db8:	fa 80       	ldd	r15, Y+2	; 0x02
    2dba:	f6 01       	movw	r30, r12
    2dbc:	20 85       	ldd	r18, Z+8	; 0x08
    2dbe:	31 85       	ldd	r19, Z+9	; 0x09
    2dc0:	21 50       	subi	r18, 0x01	; 1
    2dc2:	31 09       	sbc	r19, r1
    2dc4:	28 1b       	sub	r18, r24
    2dc6:	39 0b       	sbc	r19, r25
    2dc8:	86 0d       	add	r24, r6
    2dca:	97 1d       	adc	r25, r7
    2dcc:	ac 01       	movw	r20, r24
    2dce:	60 e8       	ldi	r22, 0x80	; 128
    2dd0:	84 01       	movw	r16, r8
    2dd2:	c5 01       	movw	r24, r10
    2dd4:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__pad>
    2dd8:	9c 01       	movw	r18, r24
    2dda:	f5 01       	movw	r30, r10
    2ddc:	80 81       	ld	r24, Z
    2dde:	91 81       	ldd	r25, Z+1	; 0x01
    2de0:	90 ff       	sbrs	r25, 0
    2de2:	06 c0       	rjmp	.+12     	; 0x2df0 <__fmt_u+0x86>
    2de4:	f6 01       	movw	r30, r12
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	82 17       	cp	r24, r18
    2dec:	93 07       	cpc	r25, r19
    2dee:	0c f4       	brge	.+2      	; 0x2df2 <__fmt_u+0x88>
    2df0:	c9 01       	movw	r24, r18
    2df2:	22 96       	adiw	r28, 0x02	; 2
    2df4:	ee e0       	ldi	r30, 0x0E	; 14
    2df6:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__epilogue_restores__+0x8>

Disassembly of section .text.__fmt_x:

0000165a <__fmt_x>:
    165a:	af e0       	ldi	r26, 0x0F	; 15
    165c:	b0 e0       	ldi	r27, 0x00	; 0
    165e:	e3 e3       	ldi	r30, 0x33	; 51
    1660:	fb e0       	ldi	r31, 0x0B	; 11
    1662:	0c 94 9d 1c 	jmp	0x393a	; 0x393a <__prologue_saves__>
    1666:	1c 01       	movw	r2, r24
    1668:	6b 01       	movw	r12, r22
    166a:	5a 83       	std	Y+2, r21	; 0x02
    166c:	49 83       	std	Y+1, r20	; 0x01
    166e:	2b 83       	std	Y+3, r18	; 0x03
    1670:	fb 01       	movw	r30, r22
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	84 80       	ldd	r8, Z+4	; 0x04
    1678:	95 80       	ldd	r9, Z+5	; 0x05
    167a:	e0 80       	ld	r14, Z
    167c:	f1 80       	ldd	r15, Z+1	; 0x01
    167e:	a6 80       	ldd	r10, Z+6	; 0x06
    1680:	b7 80       	ldd	r11, Z+7	; 0x07
    1682:	97 fd       	sbrc	r25, 7
    1684:	03 c0       	rjmp	.+6      	; 0x168c <__fmt_x+0x32>
    1686:	e8 94       	clt
    1688:	e1 f8       	bld	r14, 1
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <__fmt_x+0x36>
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	40 80       	ld	r4, Z
    1696:	51 80       	ldd	r5, Z+1	; 0x01
    1698:	62 80       	ldd	r6, Z+2	; 0x02
    169a:	73 80       	ldd	r7, Z+3	; 0x03
    169c:	97 01       	movw	r18, r14
    169e:	20 71       	andi	r18, 0x10	; 16
    16a0:	33 27       	eor	r19, r19
    16a2:	3d 83       	std	Y+5, r19	; 0x05
    16a4:	2c 83       	std	Y+4, r18	; 0x04
    16a6:	84 01       	movw	r16, r8
    16a8:	e4 fe       	sbrs	r14, 4
    16aa:	07 c0       	rjmp	.+14     	; 0x16ba <__fmt_x+0x60>
    16ac:	41 14       	cp	r4, r1
    16ae:	51 04       	cpc	r5, r1
    16b0:	61 04       	cpc	r6, r1
    16b2:	71 04       	cpc	r7, r1
    16b4:	11 f0       	breq	.+4      	; 0x16ba <__fmt_x+0x60>
    16b6:	02 50       	subi	r16, 0x02	; 2
    16b8:	11 09       	sbc	r17, r1
    16ba:	f7 01       	movw	r30, r14
    16bc:	e8 70       	andi	r30, 0x08	; 8
    16be:	ff 27       	eor	r31, r31
    16c0:	ff 83       	std	Y+7, r31	; 0x07
    16c2:	ee 83       	std	Y+6, r30	; 0x06
    16c4:	e3 fe       	sbrs	r14, 3
    16c6:	02 c0       	rjmp	.+4      	; 0x16cc <__fmt_x+0x72>
    16c8:	01 50       	subi	r16, 0x01	; 1
    16ca:	11 09       	sbc	r17, r1
    16cc:	f6 01       	movw	r30, r12
    16ce:	00 84       	ldd	r0, Z+8	; 0x08
    16d0:	f1 85       	ldd	r31, Z+9	; 0x09
    16d2:	e0 2d       	mov	r30, r0
    16d4:	31 97       	sbiw	r30, 0x01	; 1
    16d6:	ff 87       	std	Y+15, r31	; 0x0f
    16d8:	ee 87       	std	Y+14, r30	; 0x0e
    16da:	ea 0d       	add	r30, r10
    16dc:	fb 1d       	adc	r31, r11
    16de:	10 82       	st	Z, r1
    16e0:	9c 01       	movw	r18, r24
    16e2:	20 1b       	sub	r18, r16
    16e4:	31 0b       	sbc	r19, r17
    16e6:	39 87       	std	Y+9, r19	; 0x09
    16e8:	28 87       	std	Y+8, r18	; 0x08
    16ea:	c7 01       	movw	r24, r14
    16ec:	82 70       	andi	r24, 0x02	; 2
    16ee:	99 27       	eor	r25, r25
    16f0:	9b 87       	std	Y+11, r25	; 0x0b
    16f2:	8a 87       	std	Y+10, r24	; 0x0a
    16f4:	eb 81       	ldd	r30, Y+3	; 0x03
    16f6:	8e 2f       	mov	r24, r30
    16f8:	ee 0f       	add	r30, r30
    16fa:	99 0b       	sbc	r25, r25
    16fc:	9c 01       	movw	r18, r24
    16fe:	21 54       	subi	r18, 0x41	; 65
    1700:	31 09       	sbc	r19, r1
    1702:	3d 87       	std	Y+13, r19	; 0x0d
    1704:	2c 87       	std	Y+12, r18	; 0x0c
    1706:	2e 85       	ldd	r18, Y+14	; 0x0e
    1708:	3f 85       	ldd	r19, Y+15	; 0x0f
    170a:	22 30       	cpi	r18, 0x02	; 2
    170c:	31 05       	cpc	r19, r1
    170e:	30 f4       	brcc	.+12     	; 0x171c <__fmt_x+0xc2>
    1710:	8c 81       	ldd	r24, Y+4	; 0x04
    1712:	9d 81       	ldd	r25, Y+5	; 0x05
    1714:	89 2b       	or	r24, r25
    1716:	09 f0       	breq	.+2      	; 0x171a <__fmt_x+0xc0>
    1718:	41 c0       	rjmp	.+130    	; 0x179c <__fmt_x+0x142>
    171a:	5b c0       	rjmp	.+182    	; 0x17d2 <__fmt_x+0x178>
    171c:	41 14       	cp	r4, r1
    171e:	51 04       	cpc	r5, r1
    1720:	61 04       	cpc	r6, r1
    1722:	71 04       	cpc	r7, r1
    1724:	59 f1       	breq	.+86     	; 0x177c <__fmt_x+0x122>
    1726:	8e 85       	ldd	r24, Y+14	; 0x0e
    1728:	9f 85       	ldd	r25, Y+15	; 0x0f
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	9f 87       	std	Y+15, r25	; 0x0f
    172e:	8e 87       	std	Y+14, r24	; 0x0e
    1730:	c2 01       	movw	r24, r4
    1732:	8f 70       	andi	r24, 0x0F	; 15
    1734:	99 27       	eor	r25, r25
    1736:	8a 30       	cpi	r24, 0x0A	; 10
    1738:	91 05       	cpc	r25, r1
    173a:	14 f4       	brge	.+4      	; 0x1740 <__fmt_x+0xe6>
    173c:	c0 96       	adiw	r24, 0x30	; 48
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <__fmt_x+0xea>
    1740:	89 5a       	subi	r24, 0xA9	; 169
    1742:	9f 4f       	sbci	r25, 0xFF	; 255
    1744:	ec 85       	ldd	r30, Y+12	; 0x0c
    1746:	fd 85       	ldd	r31, Y+13	; 0x0d
    1748:	7a 97       	sbiw	r30, 0x1a	; 26
    174a:	48 f4       	brcc	.+18     	; 0x175e <__fmt_x+0x104>
    174c:	9c 01       	movw	r18, r24
    174e:	20 62       	ori	r18, 0x20	; 32
    1750:	21 56       	subi	r18, 0x61	; 97
    1752:	31 09       	sbc	r19, r1
    1754:	2a 31       	cpi	r18, 0x1A	; 26
    1756:	31 05       	cpc	r19, r1
    1758:	10 f4       	brcc	.+4      	; 0x175e <__fmt_x+0x104>
    175a:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <toupper>
    175e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1760:	ff 85       	ldd	r31, Y+15	; 0x0f
    1762:	ea 0d       	add	r30, r10
    1764:	fb 1d       	adc	r31, r11
    1766:	80 83       	st	Z, r24
    1768:	01 50       	subi	r16, 0x01	; 1
    176a:	11 09       	sbc	r17, r1
    176c:	84 e0       	ldi	r24, 0x04	; 4
    176e:	76 94       	lsr	r7
    1770:	67 94       	ror	r6
    1772:	57 94       	ror	r5
    1774:	47 94       	ror	r4
    1776:	8a 95       	dec	r24
    1778:	d1 f7       	brne	.-12     	; 0x176e <__fmt_x+0x114>
    177a:	c5 cf       	rjmp	.-118    	; 0x1706 <__fmt_x+0xac>
    177c:	88 85       	ldd	r24, Y+8	; 0x08
    177e:	99 85       	ldd	r25, Y+9	; 0x09
    1780:	80 0f       	add	r24, r16
    1782:	91 1f       	adc	r25, r17
    1784:	18 16       	cp	r1, r24
    1786:	19 06       	cpc	r1, r25
    1788:	74 f2       	brlt	.-100    	; 0x1726 <__fmt_x+0xcc>
    178a:	10 16       	cp	r1, r16
    178c:	11 06       	cpc	r1, r17
    178e:	0c f0       	brlt	.+2      	; 0x1792 <__fmt_x+0x138>
    1790:	bf cf       	rjmp	.-130    	; 0x1710 <__fmt_x+0xb6>
    1792:	ea 85       	ldd	r30, Y+10	; 0x0a
    1794:	fb 85       	ldd	r31, Y+11	; 0x0b
    1796:	ef 2b       	or	r30, r31
    1798:	31 f6       	brne	.-116    	; 0x1726 <__fmt_x+0xcc>
    179a:	ba cf       	rjmp	.-140    	; 0x1710 <__fmt_x+0xb6>
    179c:	e9 81       	ldd	r30, Y+1	; 0x01
    179e:	fa 81       	ldd	r31, Y+2	; 0x02
    17a0:	80 81       	ld	r24, Z
    17a2:	91 81       	ldd	r25, Z+1	; 0x01
    17a4:	a2 81       	ldd	r26, Z+2	; 0x02
    17a6:	b3 81       	ldd	r27, Z+3	; 0x03
    17a8:	89 2b       	or	r24, r25
    17aa:	8a 2b       	or	r24, r26
    17ac:	8b 2b       	or	r24, r27
    17ae:	89 f0       	breq	.+34     	; 0x17d2 <__fmt_x+0x178>
    17b0:	ee 85       	ldd	r30, Y+14	; 0x0e
    17b2:	ff 85       	ldd	r31, Y+15	; 0x0f
    17b4:	ea 0d       	add	r30, r10
    17b6:	fb 1d       	adc	r31, r11
    17b8:	31 97       	sbiw	r30, 0x01	; 1
    17ba:	2b 81       	ldd	r18, Y+3	; 0x03
    17bc:	20 83       	st	Z, r18
    17be:	8e 85       	ldd	r24, Y+14	; 0x0e
    17c0:	9f 85       	ldd	r25, Y+15	; 0x0f
    17c2:	02 97       	sbiw	r24, 0x02	; 2
    17c4:	9f 87       	std	Y+15, r25	; 0x0f
    17c6:	8e 87       	std	Y+14, r24	; 0x0e
    17c8:	fc 01       	movw	r30, r24
    17ca:	ea 0d       	add	r30, r10
    17cc:	fb 1d       	adc	r31, r11
    17ce:	80 e3       	ldi	r24, 0x30	; 48
    17d0:	80 83       	st	Z, r24
    17d2:	ee 81       	ldd	r30, Y+6	; 0x06
    17d4:	ff 81       	ldd	r31, Y+7	; 0x07
    17d6:	ef 2b       	or	r30, r31
    17d8:	59 f0       	breq	.+22     	; 0x17f0 <__fmt_x+0x196>
    17da:	2e 85       	ldd	r18, Y+14	; 0x0e
    17dc:	3f 85       	ldd	r19, Y+15	; 0x0f
    17de:	21 50       	subi	r18, 0x01	; 1
    17e0:	31 09       	sbc	r19, r1
    17e2:	3f 87       	std	Y+15, r19	; 0x0f
    17e4:	2e 87       	std	Y+14, r18	; 0x0e
    17e6:	f9 01       	movw	r30, r18
    17e8:	ea 0d       	add	r30, r10
    17ea:	fb 1d       	adc	r31, r11
    17ec:	80 e2       	ldi	r24, 0x20	; 32
    17ee:	80 83       	st	Z, r24
    17f0:	f6 01       	movw	r30, r12
    17f2:	20 85       	ldd	r18, Z+8	; 0x08
    17f4:	31 85       	ldd	r19, Z+9	; 0x09
    17f6:	21 50       	subi	r18, 0x01	; 1
    17f8:	31 09       	sbc	r19, r1
    17fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    17fc:	9f 85       	ldd	r25, Y+15	; 0x0f
    17fe:	28 1b       	sub	r18, r24
    1800:	39 0b       	sbc	r19, r25
    1802:	8a 0d       	add	r24, r10
    1804:	9b 1d       	adc	r25, r11
    1806:	ac 01       	movw	r20, r24
    1808:	60 e8       	ldi	r22, 0x80	; 128
    180a:	84 01       	movw	r16, r8
    180c:	c1 01       	movw	r24, r2
    180e:	0e 94 d7 15 	call	0x2bae	; 0x2bae <__pad>
    1812:	9c 01       	movw	r18, r24
    1814:	f1 01       	movw	r30, r2
    1816:	80 81       	ld	r24, Z
    1818:	91 81       	ldd	r25, Z+1	; 0x01
    181a:	90 ff       	sbrs	r25, 0
    181c:	06 c0       	rjmp	.+12     	; 0x182a <__fmt_x+0x1d0>
    181e:	f6 01       	movw	r30, r12
    1820:	82 81       	ldd	r24, Z+2	; 0x02
    1822:	93 81       	ldd	r25, Z+3	; 0x03
    1824:	82 17       	cp	r24, r18
    1826:	93 07       	cpc	r25, r19
    1828:	0c f4       	brge	.+2      	; 0x182c <__fmt_x+0x1d2>
    182a:	c9 01       	movw	r24, r18
    182c:	2f 96       	adiw	r28, 0x0f	; 15
    182e:	e2 e1       	ldi	r30, 0x12	; 18
    1830:	0c 94 b9 1c 	jmp	0x3972	; 0x3972 <__epilogue_restores__>

Disassembly of section .text.__pop_int:

0000232a <__pop_int>:
    232a:	cf 93       	push	r28
    232c:	df 93       	push	r29
    232e:	dc 01       	movw	r26, r24
    2330:	f9 01       	movw	r30, r18
    2332:	68 38       	cpi	r22, 0x88	; 136
    2334:	71 05       	cpc	r23, r1
    2336:	f1 f0       	breq	.+60     	; 0x2374 <__pop_int+0x4a>
    2338:	5c f4       	brge	.+22     	; 0x2350 <__pop_int+0x26>
    233a:	61 38       	cpi	r22, 0x81	; 129
    233c:	71 05       	cpc	r23, r1
    233e:	61 f1       	breq	.+88     	; 0x2398 <__pop_int+0x6e>
    2340:	64 38       	cpi	r22, 0x84	; 132
    2342:	71 05       	cpc	r23, r1
    2344:	c9 f1       	breq	.+114    	; 0x23b8 <__pop_int+0x8e>
    2346:	60 38       	cpi	r22, 0x80	; 128
    2348:	71 05       	cpc	r23, r1
    234a:	09 f0       	breq	.+2      	; 0x234e <__pop_int+0x24>
    234c:	56 c0       	rjmp	.+172    	; 0x23fa <__pop_int+0xd0>
    234e:	34 c0       	rjmp	.+104    	; 0x23b8 <__pop_int+0x8e>
    2350:	60 3c       	cpi	r22, 0xC0	; 192
    2352:	71 05       	cpc	r23, r1
    2354:	61 f1       	breq	.+88     	; 0x23ae <__pop_int+0x84>
    2356:	60 3f       	cpi	r22, 0xF0	; 240
    2358:	71 05       	cpc	r23, r1
    235a:	09 f4       	brne	.+2      	; 0x235e <__pop_int+0x34>
    235c:	43 c0       	rjmp	.+134    	; 0x23e4 <__pop_int+0xba>
    235e:	60 3a       	cpi	r22, 0xA0	; 160
    2360:	71 05       	cpc	r23, r1
    2362:	09 f0       	breq	.+2      	; 0x2366 <__pop_int+0x3c>
    2364:	4a c0       	rjmp	.+148    	; 0x23fa <__pop_int+0xd0>
    2366:	c0 81       	ld	r28, Z
    2368:	d1 81       	ldd	r29, Z+1	; 0x01
    236a:	ce 01       	movw	r24, r28
    236c:	02 96       	adiw	r24, 0x02	; 2
    236e:	91 83       	std	Z+1, r25	; 0x01
    2370:	80 83       	st	Z, r24
    2372:	2a c0       	rjmp	.+84     	; 0x23c8 <__pop_int+0x9e>
    2374:	c0 81       	ld	r28, Z
    2376:	d1 81       	ldd	r29, Z+1	; 0x01
    2378:	ce 01       	movw	r24, r28
    237a:	02 96       	adiw	r24, 0x02	; 2
    237c:	91 83       	std	Z+1, r25	; 0x01
    237e:	80 83       	st	Z, r24
    2380:	45 2b       	or	r20, r21
    2382:	39 f0       	breq	.+14     	; 0x2392 <__pop_int+0x68>
    2384:	48 81       	ld	r20, Y
    2386:	04 2e       	mov	r0, r20
    2388:	00 0c       	add	r0, r0
    238a:	55 0b       	sbc	r21, r21
    238c:	66 0b       	sbc	r22, r22
    238e:	77 0b       	sbc	r23, r23
    2390:	21 c0       	rjmp	.+66     	; 0x23d4 <__pop_int+0xaa>
    2392:	48 81       	ld	r20, Y
    2394:	50 e0       	ldi	r21, 0x00	; 0
    2396:	2e c0       	rjmp	.+92     	; 0x23f4 <__pop_int+0xca>
    2398:	c0 81       	ld	r28, Z
    239a:	d1 81       	ldd	r29, Z+1	; 0x01
    239c:	ce 01       	movw	r24, r28
    239e:	04 96       	adiw	r24, 0x04	; 4
    23a0:	91 83       	std	Z+1, r25	; 0x01
    23a2:	80 83       	st	Z, r24
    23a4:	48 81       	ld	r20, Y
    23a6:	59 81       	ldd	r21, Y+1	; 0x01
    23a8:	6a 81       	ldd	r22, Y+2	; 0x02
    23aa:	7b 81       	ldd	r23, Y+3	; 0x03
    23ac:	13 c0       	rjmp	.+38     	; 0x23d4 <__pop_int+0xaa>
    23ae:	c0 81       	ld	r28, Z
    23b0:	d1 81       	ldd	r29, Z+1	; 0x01
    23b2:	ce 01       	movw	r24, r28
    23b4:	02 96       	adiw	r24, 0x02	; 2
    23b6:	1a c0       	rjmp	.+52     	; 0x23ec <__pop_int+0xc2>
    23b8:	c0 81       	ld	r28, Z
    23ba:	d1 81       	ldd	r29, Z+1	; 0x01
    23bc:	ce 01       	movw	r24, r28
    23be:	02 96       	adiw	r24, 0x02	; 2
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	45 2b       	or	r20, r21
    23c6:	a1 f0       	breq	.+40     	; 0x23f0 <__pop_int+0xc6>
    23c8:	48 81       	ld	r20, Y
    23ca:	59 81       	ldd	r21, Y+1	; 0x01
    23cc:	05 2e       	mov	r0, r21
    23ce:	00 0c       	add	r0, r0
    23d0:	66 0b       	sbc	r22, r22
    23d2:	77 0b       	sbc	r23, r23
    23d4:	4d 93       	st	X+, r20
    23d6:	5d 93       	st	X+, r21
    23d8:	6d 93       	st	X+, r22
    23da:	7c 93       	st	X, r23
    23dc:	13 97       	sbiw	r26, 0x03	; 3
    23de:	81 e0       	ldi	r24, 0x01	; 1
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0d c0       	rjmp	.+26     	; 0x23fe <__pop_int+0xd4>
    23e4:	c0 81       	ld	r28, Z
    23e6:	d1 81       	ldd	r29, Z+1	; 0x01
    23e8:	ce 01       	movw	r24, r28
    23ea:	03 96       	adiw	r24, 0x03	; 3
    23ec:	91 83       	std	Z+1, r25	; 0x01
    23ee:	80 83       	st	Z, r24
    23f0:	48 81       	ld	r20, Y
    23f2:	59 81       	ldd	r21, Y+1	; 0x01
    23f4:	60 e0       	ldi	r22, 0x00	; 0
    23f6:	70 e0       	ldi	r23, 0x00	; 0
    23f8:	ed cf       	rjmp	.-38     	; 0x23d4 <__pop_int+0xaa>
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	df 91       	pop	r29
    2400:	cf 91       	pop	r28
    2402:	08 95       	ret

Disassembly of section .text.read_prec_or_width:

00002f7c <read_prec_or_width>:
    2f7c:	dc 01       	movw	r26, r24
    2f7e:	2d 91       	ld	r18, X+
    2f80:	3d 91       	ld	r19, X+
    2f82:	4c 91       	ld	r20, X
    2f84:	12 97       	sbiw	r26, 0x02	; 2
    2f86:	f9 01       	movw	r30, r18
    2f88:	84 91       	lpm	r24, Z
    2f8a:	47 fd       	sbrc	r20, 7
    2f8c:	80 81       	ld	r24, Z
    2f8e:	8a 32       	cpi	r24, 0x2A	; 42
    2f90:	21 f0       	breq	.+8      	; 0x2f9a <read_prec_or_width+0x1e>
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	7a e0       	ldi	r23, 0x0A	; 10
    2f98:	11 c0       	rjmp	.+34     	; 0x2fbc <read_prec_or_width+0x40>
    2f9a:	2f 5f       	subi	r18, 0xFF	; 255
    2f9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9e:	4f 4f       	sbci	r20, 0xFF	; 255
    2fa0:	2d 93       	st	X+, r18
    2fa2:	3d 93       	st	X+, r19
    2fa4:	4c 93       	st	X, r20
    2fa6:	db 01       	movw	r26, r22
    2fa8:	ed 91       	ld	r30, X+
    2faa:	fc 91       	ld	r31, X
    2fac:	11 97       	sbiw	r26, 0x01	; 1
    2fae:	cf 01       	movw	r24, r30
    2fb0:	02 96       	adiw	r24, 0x02	; 2
    2fb2:	8d 93       	st	X+, r24
    2fb4:	9c 93       	st	X, r25
    2fb6:	80 81       	ld	r24, Z
    2fb8:	91 81       	ldd	r25, Z+1	; 0x01
    2fba:	08 95       	ret
    2fbc:	2d 91       	ld	r18, X+
    2fbe:	3d 91       	ld	r19, X+
    2fc0:	4c 91       	ld	r20, X
    2fc2:	12 97       	sbiw	r26, 0x02	; 2
    2fc4:	f9 01       	movw	r30, r18
    2fc6:	54 91       	lpm	r21, Z
    2fc8:	47 fd       	sbrc	r20, 7
    2fca:	50 81       	ld	r21, Z
    2fcc:	50 53       	subi	r21, 0x30	; 48
    2fce:	5a 30       	cpi	r21, 0x0A	; 10
    2fd0:	80 f4       	brcc	.+32     	; 0x2ff2 <read_prec_or_width+0x76>
    2fd2:	78 9f       	mul	r23, r24
    2fd4:	f0 01       	movw	r30, r0
    2fd6:	79 9f       	mul	r23, r25
    2fd8:	f0 0d       	add	r31, r0
    2fda:	11 24       	eor	r1, r1
    2fdc:	cf 01       	movw	r24, r30
    2fde:	85 0f       	add	r24, r21
    2fe0:	91 1d       	adc	r25, r1
    2fe2:	2f 5f       	subi	r18, 0xFF	; 255
    2fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe6:	4f 4f       	sbci	r20, 0xFF	; 255
    2fe8:	2d 93       	st	X+, r18
    2fea:	3d 93       	st	X+, r19
    2fec:	4c 93       	st	X, r20
    2fee:	12 97       	sbiw	r26, 0x02	; 2
    2ff0:	e5 cf       	rjmp	.-54     	; 0x2fbc <read_prec_or_width+0x40>
    2ff2:	08 95       	ret

Disassembly of section .text.__out:

00003144 <__out>:
    3144:	6f 92       	push	r6
    3146:	7f 92       	push	r7
    3148:	8f 92       	push	r8
    314a:	cf 92       	push	r12
    314c:	df 92       	push	r13
    314e:	ef 92       	push	r14
    3150:	0f 93       	push	r16
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	8c 01       	movw	r16, r24
    315a:	6a 01       	movw	r12, r20
    315c:	e6 2e       	mov	r14, r22
    315e:	e9 01       	movw	r28, r18
    3160:	3a 01       	movw	r6, r20
    3162:	86 2e       	mov	r8, r22
    3164:	62 0e       	add	r6, r18
    3166:	73 1e       	adc	r7, r19
    3168:	81 1c       	adc	r8, r1
    316a:	37 fd       	sbrc	r19, 7
    316c:	8a 94       	dec	r8
    316e:	c6 14       	cp	r12, r6
    3170:	d7 04       	cpc	r13, r7
    3172:	e8 04       	cpc	r14, r8
    3174:	79 f0       	breq	.+30     	; 0x3194 <__out+0x50>
    3176:	f6 01       	movw	r30, r12
    3178:	84 91       	lpm	r24, Z
    317a:	e7 fc       	sbrc	r14, 7
    317c:	80 81       	ld	r24, Z
    317e:	b8 01       	movw	r22, r16
    3180:	08 2e       	mov	r0, r24
    3182:	00 0c       	add	r0, r0
    3184:	99 0b       	sbc	r25, r25
    3186:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <fputc>
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	c8 1a       	sub	r12, r24
    318e:	d8 0a       	sbc	r13, r24
    3190:	e8 0a       	sbc	r14, r24
    3192:	ed cf       	rjmp	.-38     	; 0x316e <__out+0x2a>
    3194:	ce 01       	movw	r24, r28
    3196:	df 91       	pop	r29
    3198:	cf 91       	pop	r28
    319a:	1f 91       	pop	r17
    319c:	0f 91       	pop	r16
    319e:	ef 90       	pop	r14
    31a0:	df 90       	pop	r13
    31a2:	cf 90       	pop	r12
    31a4:	8f 90       	pop	r8
    31a6:	7f 90       	pop	r7
    31a8:	6f 90       	pop	r6
    31aa:	08 95       	ret

Disassembly of section .text.__pad:

00002bae <__pad>:
    2bae:	6f 92       	push	r6
    2bb0:	7f 92       	push	r7
    2bb2:	8f 92       	push	r8
    2bb4:	af 92       	push	r10
    2bb6:	bf 92       	push	r11
    2bb8:	cf 92       	push	r12
    2bba:	df 92       	push	r13
    2bbc:	ef 92       	push	r14
    2bbe:	ff 92       	push	r15
    2bc0:	0f 93       	push	r16
    2bc2:	1f 93       	push	r17
    2bc4:	cf 93       	push	r28
    2bc6:	df 93       	push	r29
    2bc8:	5c 01       	movw	r10, r24
    2bca:	3a 01       	movw	r6, r20
    2bcc:	86 2e       	mov	r8, r22
    2bce:	e9 01       	movw	r28, r18
    2bd0:	67 01       	movw	r12, r14
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	c8 22       	and	r12, r24
    2bd6:	dd 24       	eor	r13, r13
    2bd8:	e0 fc       	sbrc	r14, 0
    2bda:	03 c0       	rjmp	.+6      	; 0x2be2 <__pad+0x34>
    2bdc:	20 17       	cp	r18, r16
    2bde:	31 07       	cpc	r19, r17
    2be0:	58 f0       	brcs	.+22     	; 0x2bf8 <__pad+0x4a>
    2be2:	9e 01       	movw	r18, r28
    2be4:	68 2d       	mov	r22, r8
    2be6:	a3 01       	movw	r20, r6
    2be8:	c5 01       	movw	r24, r10
    2bea:	0e 94 a2 18 	call	0x3144	; 0x3144 <__out>
    2bee:	c0 17       	cp	r28, r16
    2bf0:	d1 07       	cpc	r29, r17
    2bf2:	10 f0       	brcs	.+4      	; 0x2bf8 <__pad+0x4a>
    2bf4:	ce 01       	movw	r24, r28
    2bf6:	18 c0       	rjmp	.+48     	; 0x2c28 <__pad+0x7a>
    2bf8:	78 01       	movw	r14, r16
    2bfa:	ec 1a       	sub	r14, r28
    2bfc:	fd 0a       	sbc	r15, r29
    2bfe:	e1 14       	cp	r14, r1
    2c00:	f1 04       	cpc	r15, r1
    2c02:	49 f0       	breq	.+18     	; 0x2c16 <__pad+0x68>
    2c04:	b5 01       	movw	r22, r10
    2c06:	80 e2       	ldi	r24, 0x20	; 32
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <fputc>
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	e8 1a       	sub	r14, r24
    2c12:	f1 08       	sbc	r15, r1
    2c14:	f4 cf       	rjmp	.-24     	; 0x2bfe <__pad+0x50>
    2c16:	cd 28       	or	r12, r13
    2c18:	31 f4       	brne	.+12     	; 0x2c26 <__pad+0x78>
    2c1a:	9e 01       	movw	r18, r28
    2c1c:	68 2d       	mov	r22, r8
    2c1e:	a3 01       	movw	r20, r6
    2c20:	c5 01       	movw	r24, r10
    2c22:	0e 94 a2 18 	call	0x3144	; 0x3144 <__out>
    2c26:	c8 01       	movw	r24, r16
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	bf 90       	pop	r11
    2c3a:	af 90       	pop	r10
    2c3c:	8f 90       	pop	r8
    2c3e:	7f 90       	pop	r7
    2c40:	6f 90       	pop	r6
    2c42:	08 95       	ret

Disassembly of section .text.__fmt_state:

00002b10 <__fmt_state>:
    2b10:	cf 92       	push	r12
    2b12:	df 92       	push	r13
    2b14:	ef 92       	push	r14
    2b16:	dc 01       	movw	r26, r24
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	29 2f       	mov	r18, r25
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	22 0f       	add	r18, r18
    2b20:	33 1f       	adc	r19, r19
    2b22:	69 01       	movw	r12, r18
    2b24:	03 2e       	mov	r0, r19
    2b26:	00 0c       	add	r0, r0
    2b28:	ee 08       	sbc	r14, r14
    2b2a:	6e 2d       	mov	r22, r14
    2b2c:	a6 01       	movw	r20, r12
    2b2e:	46 59       	subi	r20, 0x96	; 150
    2b30:	5d 4f       	sbci	r21, 0xFD	; 253
    2b32:	6f 4f       	sbci	r22, 0xFF	; 255
    2b34:	6a 01       	movw	r12, r20
    2b36:	e6 2e       	mov	r14, r22
    2b38:	fa 01       	movw	r30, r20
    2b3a:	84 91       	lpm	r24, Z
    2b3c:	e7 fc       	sbrc	r14, 7
    2b3e:	80 81       	ld	r24, Z
    2b40:	81 11       	cpse	r24, r1
    2b42:	0d c0       	rjmp	.+26     	; 0x2b5e <__fmt_state+0x4e>
    2b44:	2f 5f       	subi	r18, 0xFF	; 255
    2b46:	3f 4f       	sbci	r19, 0xFF	; 255
    2b48:	03 2e       	mov	r0, r19
    2b4a:	00 0c       	add	r0, r0
    2b4c:	44 0b       	sbc	r20, r20
    2b4e:	26 59       	subi	r18, 0x96	; 150
    2b50:	3d 4f       	sbci	r19, 0xFD	; 253
    2b52:	4f 4f       	sbci	r20, 0xFF	; 255
    2b54:	f9 01       	movw	r30, r18
    2b56:	84 91       	lpm	r24, Z
    2b58:	47 fd       	sbrc	r20, 7
    2b5a:	80 81       	ld	r24, Z
    2b5c:	24 c0       	rjmp	.+72     	; 0x2ba6 <__fmt_state+0x96>
    2b5e:	cd 90       	ld	r12, X+
    2b60:	dd 90       	ld	r13, X+
    2b62:	ec 90       	ld	r14, X
    2b64:	12 97       	sbiw	r26, 0x02	; 2
    2b66:	f6 01       	movw	r30, r12
    2b68:	44 91       	lpm	r20, Z
    2b6a:	e7 fc       	sbrc	r14, 7
    2b6c:	40 81       	ld	r20, Z
    2b6e:	84 13       	cpse	r24, r20
    2b70:	15 c0       	rjmp	.+42     	; 0x2b9c <__fmt_state+0x8c>
    2b72:	2f 5f       	subi	r18, 0xFF	; 255
    2b74:	3f 4f       	sbci	r19, 0xFF	; 255
    2b76:	03 2e       	mov	r0, r19
    2b78:	00 0c       	add	r0, r0
    2b7a:	44 0b       	sbc	r20, r20
    2b7c:	26 59       	subi	r18, 0x96	; 150
    2b7e:	3d 4f       	sbci	r19, 0xFD	; 253
    2b80:	4f 4f       	sbci	r20, 0xFF	; 255
    2b82:	f9 01       	movw	r30, r18
    2b84:	94 91       	lpm	r25, Z
    2b86:	47 fd       	sbrc	r20, 7
    2b88:	90 81       	ld	r25, Z
    2b8a:	5f ef       	ldi	r21, 0xFF	; 255
    2b8c:	c5 1a       	sub	r12, r21
    2b8e:	d5 0a       	sbc	r13, r21
    2b90:	e5 0a       	sbc	r14, r21
    2b92:	cd 92       	st	X+, r12
    2b94:	dd 92       	st	X+, r13
    2b96:	ec 92       	st	X, r14
    2b98:	12 97       	sbiw	r26, 0x02	; 2
    2b9a:	01 c0       	rjmp	.+2      	; 0x2b9e <__fmt_state+0x8e>
    2b9c:	9f 5f       	subi	r25, 0xFF	; 255
    2b9e:	9b 30       	cpi	r25, 0x0B	; 11
    2ba0:	08 f4       	brcc	.+2      	; 0x2ba4 <__fmt_state+0x94>
    2ba2:	bb cf       	rjmp	.-138    	; 0x2b1a <__fmt_state+0xa>
    2ba4:	89 2f       	mov	r24, r25
    2ba6:	ef 90       	pop	r14
    2ba8:	df 90       	pop	r13
    2baa:	cf 90       	pop	r12
    2bac:	08 95       	ret

Disassembly of section .text.vfpfcnvrt:

0000028e <vfpfcnvrt>:
 28e:	2f 92       	push	r2
 290:	3f 92       	push	r3
 292:	4f 92       	push	r4
 294:	6f 92       	push	r6
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	cd b7       	in	r28, 0x3d	; 61
 2b2:	de b7       	in	r29, 0x3e	; 62
 2b4:	2e 97       	sbiw	r28, 0x0e	; 14
 2b6:	0f b6       	in	r0, 0x3f	; 63
 2b8:	f8 94       	cli
 2ba:	de bf       	out	0x3e, r29	; 62
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	cd bf       	out	0x3d, r28	; 61
 2c0:	4c 01       	movw	r8, r24
 2c2:	6b 01       	movw	r12, r22
 2c4:	38 01       	movw	r6, r16
 2c6:	1a 82       	std	Y+2, r1	; 0x02
 2c8:	19 82       	std	Y+1, r1	; 0x01
 2ca:	8f ef       	ldi	r24, 0xFF	; 255
 2cc:	9f ef       	ldi	r25, 0xFF	; 255
 2ce:	9c 83       	std	Y+4, r25	; 0x04
 2d0:	8b 83       	std	Y+3, r24	; 0x03
 2d2:	1e 82       	std	Y+6, r1	; 0x06
 2d4:	1d 82       	std	Y+5, r1	; 0x05
 2d6:	58 87       	std	Y+8, r21	; 0x08
 2d8:	4f 83       	std	Y+7, r20	; 0x07
 2da:	3a 87       	std	Y+10, r19	; 0x0a
 2dc:	29 87       	std	Y+9, r18	; 0x09
 2de:	a1 2c       	mov	r10, r1
 2e0:	b1 2c       	mov	r11, r1
 2e2:	d6 01       	movw	r26, r12
 2e4:	2d 91       	ld	r18, X+
 2e6:	3d 91       	ld	r19, X+
 2e8:	4c 91       	ld	r20, X
 2ea:	2a 0d       	add	r18, r10
 2ec:	3b 1d       	adc	r19, r11
 2ee:	41 1d       	adc	r20, r1
 2f0:	b7 fc       	sbrc	r11, 7
 2f2:	4a 95       	dec	r20
 2f4:	f9 01       	movw	r30, r18
 2f6:	84 91       	lpm	r24, Z
 2f8:	47 fd       	sbrc	r20, 7
 2fa:	80 81       	ld	r24, Z
 2fc:	81 11       	cpse	r24, r1
 2fe:	16 c0       	rjmp	.+44     	; 0x32c <vfpfcnvrt+0x9e>
 300:	f6 01       	movw	r30, r12
 302:	20 83       	st	Z, r18
 304:	31 83       	std	Z+1, r19	; 0x01
 306:	42 83       	std	Z+2, r20	; 0x02
 308:	f9 01       	movw	r30, r18
 30a:	84 91       	lpm	r24, Z
 30c:	47 fd       	sbrc	r20, 7
 30e:	80 81       	ld	r24, Z
 310:	85 32       	cpi	r24, 0x25	; 37
 312:	09 f0       	breq	.+2      	; 0x316 <vfpfcnvrt+0x88>
 314:	0f c2       	rjmp	.+1054   	; 0x734 <__EEPROM_REGION_LENGTH__+0x334>
 316:	19 01       	movw	r2, r18
 318:	44 2e       	mov	r4, r20
 31a:	ff ef       	ldi	r31, 0xFF	; 255
 31c:	2f 1a       	sub	r2, r31
 31e:	3f 0a       	sbc	r3, r31
 320:	4f 0a       	sbc	r4, r31
 322:	d6 01       	movw	r26, r12
 324:	2d 92       	st	X+, r2
 326:	3d 92       	st	X+, r3
 328:	4c 92       	st	X, r4
 32a:	1b c0       	rjmp	.+54     	; 0x362 <vfpfcnvrt+0xd4>
 32c:	85 32       	cpi	r24, 0x25	; 37
 32e:	41 f3       	breq	.-48     	; 0x300 <vfpfcnvrt+0x72>
 330:	b4 01       	movw	r22, r8
 332:	08 2e       	mov	r0, r24
 334:	00 0c       	add	r0, r0
 336:	99 0b       	sbc	r25, r25
 338:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <fputc>
 33c:	4f ef       	ldi	r20, 0xFF	; 255
 33e:	a4 1a       	sub	r10, r20
 340:	b4 0a       	sbc	r11, r20
 342:	cf cf       	rjmp	.-98     	; 0x2e2 <vfpfcnvrt+0x54>
 344:	2c 32       	cpi	r18, 0x2C	; 44
 346:	dc f0       	brlt	.+54     	; 0x37e <vfpfcnvrt+0xf0>
 348:	2d 32       	cpi	r18, 0x2D	; 45
 34a:	29 f5       	brne	.+74     	; 0x396 <vfpfcnvrt+0x108>
 34c:	29 81       	ldd	r18, Y+1	; 0x01
 34e:	3a 81       	ldd	r19, Y+2	; 0x02
 350:	21 60       	ori	r18, 0x01	; 1
 352:	3a 83       	std	Y+2, r19	; 0x02
 354:	29 83       	std	Y+1, r18	; 0x01
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	a1 1d       	adc	r26, r1
 35a:	f6 01       	movw	r30, r12
 35c:	80 83       	st	Z, r24
 35e:	91 83       	std	Z+1, r25	; 0x01
 360:	a2 83       	std	Z+2, r26	; 0x02
 362:	f6 01       	movw	r30, r12
 364:	80 81       	ld	r24, Z
 366:	91 81       	ldd	r25, Z+1	; 0x01
 368:	a2 81       	ldd	r26, Z+2	; 0x02
 36a:	fc 01       	movw	r30, r24
 36c:	24 91       	lpm	r18, Z
 36e:	a7 fd       	sbrc	r26, 7
 370:	20 81       	ld	r18, Z
 372:	2b 32       	cpi	r18, 0x2B	; 43
 374:	39 f7       	brne	.-50     	; 0x344 <vfpfcnvrt+0xb6>
 376:	29 81       	ldd	r18, Y+1	; 0x01
 378:	3a 81       	ldd	r19, Y+2	; 0x02
 37a:	24 60       	ori	r18, 0x04	; 4
 37c:	ea cf       	rjmp	.-44     	; 0x352 <vfpfcnvrt+0xc4>
 37e:	20 32       	cpi	r18, 0x20	; 32
 380:	21 f4       	brne	.+8      	; 0x38a <vfpfcnvrt+0xfc>
 382:	29 81       	ldd	r18, Y+1	; 0x01
 384:	3a 81       	ldd	r19, Y+2	; 0x02
 386:	28 60       	ori	r18, 0x08	; 8
 388:	e4 cf       	rjmp	.-56     	; 0x352 <vfpfcnvrt+0xc4>
 38a:	23 32       	cpi	r18, 0x23	; 35
 38c:	51 f4       	brne	.+20     	; 0x3a2 <vfpfcnvrt+0x114>
 38e:	29 81       	ldd	r18, Y+1	; 0x01
 390:	3a 81       	ldd	r19, Y+2	; 0x02
 392:	20 61       	ori	r18, 0x10	; 16
 394:	de cf       	rjmp	.-68     	; 0x352 <vfpfcnvrt+0xc4>
 396:	20 33       	cpi	r18, 0x30	; 48
 398:	21 f4       	brne	.+8      	; 0x3a2 <vfpfcnvrt+0x114>
 39a:	29 81       	ldd	r18, Y+1	; 0x01
 39c:	3a 81       	ldd	r19, Y+2	; 0x02
 39e:	22 60       	ori	r18, 0x02	; 2
 3a0:	d8 cf       	rjmp	.-80     	; 0x352 <vfpfcnvrt+0xc4>
 3a2:	b7 01       	movw	r22, r14
 3a4:	c6 01       	movw	r24, r12
 3a6:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <read_prec_or_width>
 3aa:	9e 83       	std	Y+6, r25	; 0x06
 3ac:	8d 83       	std	Y+5, r24	; 0x05
 3ae:	97 ff       	sbrs	r25, 7
 3b0:	0b c0       	rjmp	.+22     	; 0x3c8 <vfpfcnvrt+0x13a>
 3b2:	29 81       	ldd	r18, Y+1	; 0x01
 3b4:	3a 81       	ldd	r19, Y+2	; 0x02
 3b6:	f1 e0       	ldi	r31, 0x01	; 1
 3b8:	2f 27       	eor	r18, r31
 3ba:	3a 83       	std	Y+2, r19	; 0x02
 3bc:	29 83       	std	Y+1, r18	; 0x01
 3be:	91 95       	neg	r25
 3c0:	81 95       	neg	r24
 3c2:	91 09       	sbc	r25, r1
 3c4:	9e 83       	std	Y+6, r25	; 0x06
 3c6:	8d 83       	std	Y+5, r24	; 0x05
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	9a 81       	ldd	r25, Y+2	; 0x02
 3cc:	80 ff       	sbrs	r24, 0
 3ce:	03 c0       	rjmp	.+6      	; 0x3d6 <vfpfcnvrt+0x148>
 3d0:	8d 7f       	andi	r24, 0xFD	; 253
 3d2:	9a 83       	std	Y+2, r25	; 0x02
 3d4:	89 83       	std	Y+1, r24	; 0x01
 3d6:	f6 01       	movw	r30, r12
 3d8:	80 81       	ld	r24, Z
 3da:	91 81       	ldd	r25, Z+1	; 0x01
 3dc:	a2 81       	ldd	r26, Z+2	; 0x02
 3de:	fc 01       	movw	r30, r24
 3e0:	24 91       	lpm	r18, Z
 3e2:	a7 fd       	sbrc	r26, 7
 3e4:	20 81       	ld	r18, Z
 3e6:	2e 32       	cpi	r18, 0x2E	; 46
 3e8:	61 f4       	brne	.+24     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3ea:	01 96       	adiw	r24, 0x01	; 1
 3ec:	a1 1d       	adc	r26, r1
 3ee:	f6 01       	movw	r30, r12
 3f0:	80 83       	st	Z, r24
 3f2:	91 83       	std	Z+1, r25	; 0x01
 3f4:	a2 83       	std	Z+2, r26	; 0x02
 3f6:	b7 01       	movw	r22, r14
 3f8:	c6 01       	movw	r24, r12
 3fa:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <read_prec_or_width>
 3fe:	9c 83       	std	Y+4, r25	; 0x04
 400:	8b 83       	std	Y+3, r24	; 0x03
 402:	c6 01       	movw	r24, r12
 404:	0e 94 88 15 	call	0x2b10	; 0x2b10 <__fmt_state>
 408:	18 2f       	mov	r17, r24
 40a:	d6 01       	movw	r26, r12
 40c:	2c 91       	ld	r18, X
 40e:	11 96       	adiw	r26, 0x01	; 1
 410:	8c 91       	ld	r24, X
 412:	11 97       	sbiw	r26, 0x01	; 1
 414:	12 96       	adiw	r26, 0x02	; 2
 416:	9c 91       	ld	r25, X
 418:	e2 2f       	mov	r30, r18
 41a:	f8 2f       	mov	r31, r24
 41c:	84 91       	lpm	r24, Z
 41e:	97 fd       	sbrc	r25, 7
 420:	80 81       	ld	r24, Z
 422:	08 2e       	mov	r0, r24
 424:	00 0c       	add	r0, r0
 426:	99 0b       	sbc	r25, r25
 428:	0e 94 af 1d 	call	0x3b5e	; 0x3b5e <tolower>
 42c:	89 36       	cpi	r24, 0x69	; 105
 42e:	09 f4       	brne	.+2      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 430:	4a c0       	rjmp	.+148    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 432:	84 f4       	brge	.+32     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 434:	83 36       	cpi	r24, 0x63	; 99
 436:	09 f4       	brne	.+2      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 438:	19 c1       	rjmp	.+562    	; 0x66c <__EEPROM_REGION_LENGTH__+0x26c>
 43a:	34 f4       	brge	.+12     	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 43c:	85 32       	cpi	r24, 0x25	; 37
 43e:	09 f4       	brne	.+2      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
 440:	45 c1       	rjmp	.+650    	; 0x6cc <__EEPROM_REGION_LENGTH__+0x2cc>
 442:	81 36       	cpi	r24, 0x61	; 97
 444:	e1 f0       	breq	.+56     	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 446:	50 c1       	rjmp	.+672    	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 448:	84 36       	cpi	r24, 0x64	; 100
 44a:	e9 f1       	breq	.+122    	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
 44c:	88 36       	cpi	r24, 0x68	; 104
 44e:	0c f4       	brge	.+2      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 450:	e9 c0       	rjmp	.+466    	; 0x624 <__EEPROM_REGION_LENGTH__+0x224>
 452:	4a c1       	rjmp	.+660    	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 454:	80 37       	cpi	r24, 0x70	; 112
 456:	09 f4       	brne	.+2      	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
 458:	b0 c0       	rjmp	.+352    	; 0x5ba <__EEPROM_REGION_LENGTH__+0x1ba>
 45a:	3c f4       	brge	.+14     	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 45c:	8e 36       	cpi	r24, 0x6E	; 110
 45e:	09 f4       	brne	.+2      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 460:	d6 c0       	rjmp	.+428    	; 0x60e <__EEPROM_REGION_LENGTH__+0x20e>
 462:	8f 36       	cpi	r24, 0x6F	; 111
 464:	09 f4       	brne	.+2      	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
 466:	6d c0       	rjmp	.+218    	; 0x542 <__EEPROM_REGION_LENGTH__+0x142>
 468:	3f c1       	rjmp	.+638    	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 46a:	85 37       	cpi	r24, 0x75	; 117
 46c:	09 f4       	brne	.+2      	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
 46e:	4a c0       	rjmp	.+148    	; 0x504 <__EEPROM_REGION_LENGTH__+0x104>
 470:	88 37       	cpi	r24, 0x78	; 120
 472:	09 f4       	brne	.+2      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 474:	85 c0       	rjmp	.+266    	; 0x580 <__EEPROM_REGION_LENGTH__+0x180>
 476:	83 37       	cpi	r24, 0x73	; 115
 478:	09 f0       	breq	.+2      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 47a:	36 c1       	rjmp	.+620    	; 0x6e8 <__EEPROM_REGION_LENGTH__+0x2e8>
 47c:	0d c1       	rjmp	.+538    	; 0x698 <__EEPROM_REGION_LENGTH__+0x298>
 47e:	61 2f       	mov	r22, r17
 480:	70 e0       	ldi	r23, 0x00	; 0
 482:	a7 01       	movw	r20, r14
 484:	ce 01       	movw	r24, r28
 486:	0b 96       	adiw	r24, 0x0b	; 11
 488:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
 48c:	89 2b       	or	r24, r25
 48e:	09 f4       	brne	.+2      	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 490:	48 c1       	rjmp	.+656    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 492:	f6 01       	movw	r30, r12
 494:	80 81       	ld	r24, Z
 496:	91 81       	ldd	r25, Z+1	; 0x01
 498:	a2 81       	ldd	r26, Z+2	; 0x02
 49a:	9c 01       	movw	r18, r24
 49c:	4a 2f       	mov	r20, r26
 49e:	2f 5f       	subi	r18, 0xFF	; 255
 4a0:	3f 4f       	sbci	r19, 0xFF	; 255
 4a2:	4f 4f       	sbci	r20, 0xFF	; 255
 4a4:	20 83       	st	Z, r18
 4a6:	31 83       	std	Z+1, r19	; 0x01
 4a8:	42 83       	std	Z+2, r20	; 0x02
 4aa:	fc 01       	movw	r30, r24
 4ac:	24 91       	lpm	r18, Z
 4ae:	a7 fd       	sbrc	r26, 7
 4b0:	20 81       	ld	r18, Z
 4b2:	ae 01       	movw	r20, r28
 4b4:	45 5f       	subi	r20, 0xF5	; 245
 4b6:	5f 4f       	sbci	r21, 0xFF	; 255
 4b8:	be 01       	movw	r22, r28
 4ba:	6f 5f       	subi	r22, 0xFF	; 255
 4bc:	7f 4f       	sbci	r23, 0xFF	; 255
 4be:	c4 01       	movw	r24, r8
 4c0:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
 4c4:	2b c1       	rjmp	.+598    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
 4c6:	61 2f       	mov	r22, r17
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	97 01       	movw	r18, r14
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	50 e0       	ldi	r21, 0x00	; 0
 4d0:	ce 01       	movw	r24, r28
 4d2:	0b 96       	adiw	r24, 0x0b	; 11
 4d4:	0e 94 95 11 	call	0x232a	; 0x232a <__pop_int>
 4d8:	89 2b       	or	r24, r25
 4da:	09 f4       	brne	.+2      	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
 4dc:	22 c1       	rjmp	.+580    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 4de:	f6 01       	movw	r30, r12
 4e0:	80 81       	ld	r24, Z
 4e2:	91 81       	ldd	r25, Z+1	; 0x01
 4e4:	a2 81       	ldd	r26, Z+2	; 0x02
 4e6:	01 96       	adiw	r24, 0x01	; 1
 4e8:	a1 1d       	adc	r26, r1
 4ea:	80 83       	st	Z, r24
 4ec:	91 83       	std	Z+1, r25	; 0x01
 4ee:	a2 83       	std	Z+2, r26	; 0x02
 4f0:	ae 01       	movw	r20, r28
 4f2:	45 5f       	subi	r20, 0xF5	; 245
 4f4:	5f 4f       	sbci	r21, 0xFF	; 255
 4f6:	be 01       	movw	r22, r28
 4f8:	6f 5f       	subi	r22, 0xFF	; 255
 4fa:	7f 4f       	sbci	r23, 0xFF	; 255
 4fc:	c4 01       	movw	r24, r8
 4fe:	0e 94 45 10 	call	0x208a	; 0x208a <__fmt_d>
 502:	0c c1       	rjmp	.+536    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
 504:	61 2f       	mov	r22, r17
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	97 01       	movw	r18, r14
 50a:	40 e0       	ldi	r20, 0x00	; 0
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	ce 01       	movw	r24, r28
 510:	0b 96       	adiw	r24, 0x0b	; 11
 512:	0e 94 95 11 	call	0x232a	; 0x232a <__pop_int>
 516:	89 2b       	or	r24, r25
 518:	09 f4       	brne	.+2      	; 0x51c <__EEPROM_REGION_LENGTH__+0x11c>
 51a:	03 c1       	rjmp	.+518    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 51c:	f6 01       	movw	r30, r12
 51e:	80 81       	ld	r24, Z
 520:	91 81       	ldd	r25, Z+1	; 0x01
 522:	a2 81       	ldd	r26, Z+2	; 0x02
 524:	01 96       	adiw	r24, 0x01	; 1
 526:	a1 1d       	adc	r26, r1
 528:	80 83       	st	Z, r24
 52a:	91 83       	std	Z+1, r25	; 0x01
 52c:	a2 83       	std	Z+2, r26	; 0x02
 52e:	ae 01       	movw	r20, r28
 530:	45 5f       	subi	r20, 0xF5	; 245
 532:	5f 4f       	sbci	r21, 0xFF	; 255
 534:	be 01       	movw	r22, r28
 536:	6f 5f       	subi	r22, 0xFF	; 255
 538:	7f 4f       	sbci	r23, 0xFF	; 255
 53a:	c4 01       	movw	r24, r8
 53c:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <__fmt_u>
 540:	ed c0       	rjmp	.+474    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
 542:	61 2f       	mov	r22, r17
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	97 01       	movw	r18, r14
 548:	40 e0       	ldi	r20, 0x00	; 0
 54a:	50 e0       	ldi	r21, 0x00	; 0
 54c:	ce 01       	movw	r24, r28
 54e:	0b 96       	adiw	r24, 0x0b	; 11
 550:	0e 94 95 11 	call	0x232a	; 0x232a <__pop_int>
 554:	89 2b       	or	r24, r25
 556:	09 f4       	brne	.+2      	; 0x55a <__EEPROM_REGION_LENGTH__+0x15a>
 558:	e4 c0       	rjmp	.+456    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 55a:	f6 01       	movw	r30, r12
 55c:	80 81       	ld	r24, Z
 55e:	91 81       	ldd	r25, Z+1	; 0x01
 560:	a2 81       	ldd	r26, Z+2	; 0x02
 562:	01 96       	adiw	r24, 0x01	; 1
 564:	a1 1d       	adc	r26, r1
 566:	80 83       	st	Z, r24
 568:	91 83       	std	Z+1, r25	; 0x01
 56a:	a2 83       	std	Z+2, r26	; 0x02
 56c:	ae 01       	movw	r20, r28
 56e:	45 5f       	subi	r20, 0xF5	; 245
 570:	5f 4f       	sbci	r21, 0xFF	; 255
 572:	be 01       	movw	r22, r28
 574:	6f 5f       	subi	r22, 0xFF	; 255
 576:	7f 4f       	sbci	r23, 0xFF	; 255
 578:	c4 01       	movw	r24, r8
 57a:	0e 94 e8 13 	call	0x27d0	; 0x27d0 <__fmt_o>
 57e:	ce c0       	rjmp	.+412    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
 580:	61 2f       	mov	r22, r17
 582:	70 e0       	ldi	r23, 0x00	; 0
 584:	97 01       	movw	r18, r14
 586:	40 e0       	ldi	r20, 0x00	; 0
 588:	50 e0       	ldi	r21, 0x00	; 0
 58a:	ce 01       	movw	r24, r28
 58c:	0b 96       	adiw	r24, 0x0b	; 11
 58e:	0e 94 95 11 	call	0x232a	; 0x232a <__pop_int>
 592:	89 2b       	or	r24, r25
 594:	09 f4       	brne	.+2      	; 0x598 <__EEPROM_REGION_LENGTH__+0x198>
 596:	c5 c0       	rjmp	.+394    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 598:	f6 01       	movw	r30, r12
 59a:	80 81       	ld	r24, Z
 59c:	91 81       	ldd	r25, Z+1	; 0x01
 59e:	a2 81       	ldd	r26, Z+2	; 0x02
 5a0:	9c 01       	movw	r18, r24
 5a2:	4a 2f       	mov	r20, r26
 5a4:	2f 5f       	subi	r18, 0xFF	; 255
 5a6:	3f 4f       	sbci	r19, 0xFF	; 255
 5a8:	4f 4f       	sbci	r20, 0xFF	; 255
 5aa:	20 83       	st	Z, r18
 5ac:	31 83       	std	Z+1, r19	; 0x01
 5ae:	42 83       	std	Z+2, r20	; 0x02
 5b0:	fc 01       	movw	r30, r24
 5b2:	24 91       	lpm	r18, Z
 5b4:	a7 fd       	sbrc	r26, 7
 5b6:	20 81       	ld	r18, Z
 5b8:	20 c0       	rjmp	.+64     	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
 5ba:	97 01       	movw	r18, r14
 5bc:	40 e0       	ldi	r20, 0x00	; 0
 5be:	50 e0       	ldi	r21, 0x00	; 0
 5c0:	60 ef       	ldi	r22, 0xF0	; 240
 5c2:	70 e0       	ldi	r23, 0x00	; 0
 5c4:	ce 01       	movw	r24, r28
 5c6:	0b 96       	adiw	r24, 0x0b	; 11
 5c8:	0e 94 95 11 	call	0x232a	; 0x232a <__pop_int>
 5cc:	89 2b       	or	r24, r25
 5ce:	09 f4       	brne	.+2      	; 0x5d2 <__EEPROM_REGION_LENGTH__+0x1d2>
 5d0:	a8 c0       	rjmp	.+336    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 5d2:	f6 01       	movw	r30, r12
 5d4:	80 81       	ld	r24, Z
 5d6:	91 81       	ldd	r25, Z+1	; 0x01
 5d8:	a2 81       	ldd	r26, Z+2	; 0x02
 5da:	01 96       	adiw	r24, 0x01	; 1
 5dc:	a1 1d       	adc	r26, r1
 5de:	80 83       	st	Z, r24
 5e0:	91 83       	std	Z+1, r25	; 0x01
 5e2:	a2 83       	std	Z+2, r26	; 0x02
 5e4:	8b 85       	ldd	r24, Y+11	; 0x0b
 5e6:	9c 85       	ldd	r25, Y+12	; 0x0c
 5e8:	89 2b       	or	r24, r25
 5ea:	31 f4       	brne	.+12     	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
 5ec:	00 e0       	ldi	r16, 0x00	; 0
 5ee:	10 e0       	ldi	r17, 0x00	; 0
 5f0:	27 e8       	ldi	r18, 0x87	; 135
 5f2:	32 e0       	ldi	r19, 0x02	; 2
 5f4:	40 e0       	ldi	r20, 0x00	; 0
 5f6:	8c c0       	rjmp	.+280    	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 5f8:	28 e7       	ldi	r18, 0x78	; 120
 5fa:	ae 01       	movw	r20, r28
 5fc:	45 5f       	subi	r20, 0xF5	; 245
 5fe:	5f 4f       	sbci	r21, 0xFF	; 255
 600:	be 01       	movw	r22, r28
 602:	6f 5f       	subi	r22, 0xFF	; 255
 604:	7f 4f       	sbci	r23, 0xFF	; 255
 606:	c4 01       	movw	r24, r8
 608:	0e 94 2d 0b 	call	0x165a	; 0x165a <__fmt_x>
 60c:	87 c0       	rjmp	.+270    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
 60e:	a5 01       	movw	r20, r10
 610:	46 0d       	add	r20, r6
 612:	57 1d       	adc	r21, r7
 614:	61 2f       	mov	r22, r17
 616:	70 e0       	ldi	r23, 0x00	; 0
 618:	97 01       	movw	r18, r14
 61a:	ce 01       	movw	r24, r28
 61c:	0b 96       	adiw	r24, 0x0b	; 11
 61e:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
 622:	7f c0       	rjmp	.+254    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 624:	61 2f       	mov	r22, r17
 626:	70 e0       	ldi	r23, 0x00	; 0
 628:	a7 01       	movw	r20, r14
 62a:	ce 01       	movw	r24, r28
 62c:	0b 96       	adiw	r24, 0x0b	; 11
 62e:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
 632:	89 2b       	or	r24, r25
 634:	09 f4       	brne	.+2      	; 0x638 <__EEPROM_REGION_LENGTH__+0x238>
 636:	75 c0       	rjmp	.+234    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 638:	f6 01       	movw	r30, r12
 63a:	80 81       	ld	r24, Z
 63c:	91 81       	ldd	r25, Z+1	; 0x01
 63e:	a2 81       	ldd	r26, Z+2	; 0x02
 640:	9c 01       	movw	r18, r24
 642:	4a 2f       	mov	r20, r26
 644:	2f 5f       	subi	r18, 0xFF	; 255
 646:	3f 4f       	sbci	r19, 0xFF	; 255
 648:	4f 4f       	sbci	r20, 0xFF	; 255
 64a:	20 83       	st	Z, r18
 64c:	31 83       	std	Z+1, r19	; 0x01
 64e:	42 83       	std	Z+2, r20	; 0x02
 650:	fc 01       	movw	r30, r24
 652:	24 91       	lpm	r18, Z
 654:	a7 fd       	sbrc	r26, 7
 656:	20 81       	ld	r18, Z
 658:	ae 01       	movw	r20, r28
 65a:	45 5f       	subi	r20, 0xF5	; 245
 65c:	5f 4f       	sbci	r21, 0xFF	; 255
 65e:	be 01       	movw	r22, r28
 660:	6f 5f       	subi	r22, 0xFF	; 255
 662:	7f 4f       	sbci	r23, 0xFF	; 255
 664:	c4 01       	movw	r24, r8
 666:	0e 94 00 00 	call	0	; 0x0 <__TEXT_REGION_ORIGIN__>
 66a:	58 c0       	rjmp	.+176    	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
 66c:	10 38       	cpi	r17, 0x80	; 128
 66e:	09 f0       	breq	.+2      	; 0x672 <__EEPROM_REGION_LENGTH__+0x272>
 670:	58 c0       	rjmp	.+176    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 672:	f6 01       	movw	r30, r12
 674:	80 81       	ld	r24, Z
 676:	91 81       	ldd	r25, Z+1	; 0x01
 678:	a2 81       	ldd	r26, Z+2	; 0x02
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	a1 1d       	adc	r26, r1
 67e:	80 83       	st	Z, r24
 680:	91 83       	std	Z+1, r25	; 0x01
 682:	a2 83       	std	Z+2, r26	; 0x02
 684:	d7 01       	movw	r26, r14
 686:	ed 91       	ld	r30, X+
 688:	fc 91       	ld	r31, X
 68a:	11 97       	sbiw	r26, 0x01	; 1
 68c:	cf 01       	movw	r24, r30
 68e:	02 96       	adiw	r24, 0x02	; 2
 690:	8d 93       	st	X+, r24
 692:	9c 93       	st	X, r25
 694:	80 81       	ld	r24, Z
 696:	26 c0       	rjmp	.+76     	; 0x6e4 <__EEPROM_REGION_LENGTH__+0x2e4>
 698:	10 38       	cpi	r17, 0x80	; 128
 69a:	09 f0       	breq	.+2      	; 0x69e <__EEPROM_REGION_LENGTH__+0x29e>
 69c:	42 c0       	rjmp	.+132    	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 69e:	f6 01       	movw	r30, r12
 6a0:	80 81       	ld	r24, Z
 6a2:	91 81       	ldd	r25, Z+1	; 0x01
 6a4:	a2 81       	ldd	r26, Z+2	; 0x02
 6a6:	01 96       	adiw	r24, 0x01	; 1
 6a8:	a1 1d       	adc	r26, r1
 6aa:	80 83       	st	Z, r24
 6ac:	91 83       	std	Z+1, r25	; 0x01
 6ae:	a2 83       	std	Z+2, r26	; 0x02
 6b0:	d7 01       	movw	r26, r14
 6b2:	ed 91       	ld	r30, X+
 6b4:	fc 91       	ld	r31, X
 6b6:	11 97       	sbiw	r26, 0x01	; 1
 6b8:	cf 01       	movw	r24, r30
 6ba:	03 96       	adiw	r24, 0x03	; 3
 6bc:	8d 93       	st	X+, r24
 6be:	9c 93       	st	X, r25
 6c0:	20 81       	ld	r18, Z
 6c2:	31 81       	ldd	r19, Z+1	; 0x01
 6c4:	42 81       	ldd	r20, Z+2	; 0x02
 6c6:	00 e0       	ldi	r16, 0x00	; 0
 6c8:	10 e0       	ldi	r17, 0x00	; 0
 6ca:	22 c0       	rjmp	.+68     	; 0x710 <__EEPROM_REGION_LENGTH__+0x310>
 6cc:	10 38       	cpi	r17, 0x80	; 128
 6ce:	49 f5       	brne	.+82     	; 0x722 <__EEPROM_REGION_LENGTH__+0x322>
 6d0:	f6 01       	movw	r30, r12
 6d2:	20 81       	ld	r18, Z
 6d4:	31 81       	ldd	r19, Z+1	; 0x01
 6d6:	42 81       	ldd	r20, Z+2	; 0x02
 6d8:	2f 5f       	subi	r18, 0xFF	; 255
 6da:	3f 4f       	sbci	r19, 0xFF	; 255
 6dc:	4f 4f       	sbci	r20, 0xFF	; 255
 6de:	20 83       	st	Z, r18
 6e0:	31 83       	std	Z+1, r19	; 0x01
 6e2:	42 83       	std	Z+2, r20	; 0x02
 6e4:	8b 87       	std	Y+11, r24	; 0x0b
 6e6:	0e c0       	rjmp	.+28     	; 0x704 <__EEPROM_REGION_LENGTH__+0x304>
 6e8:	85 e2       	ldi	r24, 0x25	; 37
 6ea:	8b 87       	std	Y+11, r24	; 0x0b
 6ec:	f6 01       	movw	r30, r12
 6ee:	20 82       	st	Z, r2
 6f0:	31 82       	std	Z+1, r3	; 0x01
 6f2:	42 82       	std	Z+2, r4	; 0x02
 6f4:	1a 82       	std	Y+2, r1	; 0x02
 6f6:	19 82       	std	Y+1, r1	; 0x01
 6f8:	1e 82       	std	Y+6, r1	; 0x06
 6fa:	1d 82       	std	Y+5, r1	; 0x05
 6fc:	8f ef       	ldi	r24, 0xFF	; 255
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	9c 83       	std	Y+4, r25	; 0x04
 702:	8b 83       	std	Y+3, r24	; 0x03
 704:	9e 01       	movw	r18, r28
 706:	25 5f       	subi	r18, 0xF5	; 245
 708:	3f 4f       	sbci	r19, 0xFF	; 255
 70a:	40 e8       	ldi	r20, 0x80	; 128
 70c:	01 e0       	ldi	r16, 0x01	; 1
 70e:	10 e0       	ldi	r17, 0x00	; 0
 710:	be 01       	movw	r22, r28
 712:	6f 5f       	subi	r22, 0xFF	; 255
 714:	7f 4f       	sbci	r23, 0xFF	; 255
 716:	c4 01       	movw	r24, r8
 718:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <__fmt_s>
 71c:	8a 0d       	add	r24, r10
 71e:	9b 1d       	adc	r25, r11
 720:	0a c0       	rjmp	.+20     	; 0x736 <__EEPROM_REGION_LENGTH__+0x336>
 722:	f6 01       	movw	r30, r12
 724:	80 81       	ld	r24, Z
 726:	91 81       	ldd	r25, Z+1	; 0x01
 728:	a2 81       	ldd	r26, Z+2	; 0x02
 72a:	01 96       	adiw	r24, 0x01	; 1
 72c:	a1 1d       	adc	r26, r1
 72e:	80 83       	st	Z, r24
 730:	91 83       	std	Z+1, r25	; 0x01
 732:	a2 83       	std	Z+2, r26	; 0x02
 734:	c5 01       	movw	r24, r10
 736:	2e 96       	adiw	r28, 0x0e	; 14
 738:	0f b6       	in	r0, 0x3f	; 63
 73a:	f8 94       	cli
 73c:	de bf       	out	0x3e, r29	; 62
 73e:	0f be       	out	0x3f, r0	; 63
 740:	cd bf       	out	0x3d, r28	; 61
 742:	df 91       	pop	r29
 744:	cf 91       	pop	r28
 746:	1f 91       	pop	r17
 748:	0f 91       	pop	r16
 74a:	ff 90       	pop	r15
 74c:	ef 90       	pop	r14
 74e:	df 90       	pop	r13
 750:	cf 90       	pop	r12
 752:	bf 90       	pop	r11
 754:	af 90       	pop	r10
 756:	9f 90       	pop	r9
 758:	8f 90       	pop	r8
 75a:	7f 90       	pop	r7
 75c:	6f 90       	pop	r6
 75e:	4f 90       	pop	r4
 760:	3f 90       	pop	r3
 762:	2f 90       	pop	r2
 764:	08 95       	ret

Disassembly of section .text.__printf_core:

00002c44 <__printf_core>:
    2c44:	a3 e8       	ldi	r26, 0x83	; 131
    2c46:	b0 e0       	ldi	r27, 0x00	; 0
    2c48:	e8 e2       	ldi	r30, 0x28	; 40
    2c4a:	f6 e1       	ldi	r31, 0x16	; 22
    2c4c:	0c 94 a3 1c 	jmp	0x3946	; 0x3946 <__prologue_saves__+0xc>
    2c50:	5c 01       	movw	r10, r24
    2c52:	49 01       	movw	r8, r18
    2c54:	cf 57       	subi	r28, 0x7F	; 127
    2c56:	df 4f       	sbci	r29, 0xFF	; 255
    2c58:	48 83       	st	Y, r20
    2c5a:	59 83       	std	Y+1, r21	; 0x01
    2c5c:	6a 83       	std	Y+2, r22	; 0x02
    2c5e:	c1 58       	subi	r28, 0x81	; 129
    2c60:	d0 40       	sbci	r29, 0x00	; 0
    2c62:	c1 2c       	mov	r12, r1
    2c64:	d1 2c       	mov	r13, r1
    2c66:	cf 57       	subi	r28, 0x7F	; 127
    2c68:	df 4f       	sbci	r29, 0xFF	; 255
    2c6a:	28 81       	ld	r18, Y
    2c6c:	c1 58       	subi	r28, 0x81	; 129
    2c6e:	d0 40       	sbci	r29, 0x00	; 0
    2c70:	ce 57       	subi	r28, 0x7E	; 126
    2c72:	df 4f       	sbci	r29, 0xFF	; 255
    2c74:	98 81       	ld	r25, Y
    2c76:	c2 58       	subi	r28, 0x82	; 130
    2c78:	d0 40       	sbci	r29, 0x00	; 0
    2c7a:	cd 57       	subi	r28, 0x7D	; 125
    2c7c:	df 4f       	sbci	r29, 0xFF	; 255
    2c7e:	88 81       	ld	r24, Y
    2c80:	c3 58       	subi	r28, 0x83	; 131
    2c82:	d0 40       	sbci	r29, 0x00	; 0
    2c84:	e2 2f       	mov	r30, r18
    2c86:	f9 2f       	mov	r31, r25
    2c88:	94 91       	lpm	r25, Z
    2c8a:	87 fd       	sbrc	r24, 7
    2c8c:	90 81       	ld	r25, Z
    2c8e:	99 23       	and	r25, r25
    2c90:	e9 f0       	breq	.+58     	; 0x2ccc <__printf_core+0x88>
    2c92:	74 01       	movw	r14, r8
    2c94:	86 01       	movw	r16, r12
    2c96:	20 e8       	ldi	r18, 0x80	; 128
    2c98:	30 e0       	ldi	r19, 0x00	; 0
    2c9a:	ae 01       	movw	r20, r28
    2c9c:	4f 5f       	subi	r20, 0xFF	; 255
    2c9e:	5f 4f       	sbci	r21, 0xFF	; 255
    2ca0:	be 01       	movw	r22, r28
    2ca2:	6f 57       	subi	r22, 0x7F	; 127
    2ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ca6:	c5 01       	movw	r24, r10
    2ca8:	0e 94 47 01 	call	0x28e	; 0x28e <vfpfcnvrt>
    2cac:	8c 0d       	add	r24, r12
    2cae:	9d 1d       	adc	r25, r13
    2cb0:	8c 15       	cp	r24, r12
    2cb2:	9d 05       	cpc	r25, r13
    2cb4:	4c f4       	brge	.+18     	; 0x2cc8 <__printf_core+0x84>
    2cb6:	8f e4       	ldi	r24, 0x4F	; 79
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__errno_val+0x1>
    2cbe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__errno_val>
    2cc2:	8f ef       	ldi	r24, 0xFF	; 255
    2cc4:	9f ef       	ldi	r25, 0xFF	; 255
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <__printf_core+0x8a>
    2cc8:	6c 01       	movw	r12, r24
    2cca:	cd cf       	rjmp	.-102    	; 0x2c66 <__printf_core+0x22>
    2ccc:	c6 01       	movw	r24, r12
    2cce:	cd 57       	subi	r28, 0x7D	; 125
    2cd0:	df 4f       	sbci	r29, 0xFF	; 255
    2cd2:	ec e0       	ldi	r30, 0x0C	; 12
    2cd4:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <__epilogue_restores__+0xc>

Disassembly of section .text.fputc:

00002cd8 <fputc>:
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	db 01       	movw	r26, r22
    2ce2:	2d 91       	ld	r18, X+
    2ce4:	3c 91       	ld	r19, X
    2ce6:	11 97       	sbiw	r26, 0x01	; 1
    2ce8:	30 ff       	sbrs	r19, 0
    2cea:	25 c0       	rjmp	.+74     	; 0x2d36 <fputc+0x5e>
    2cec:	17 96       	adiw	r26, 0x07	; 7
    2cee:	4d 91       	ld	r20, X+
    2cf0:	5c 91       	ld	r21, X
    2cf2:	18 97       	sbiw	r26, 0x08	; 8
    2cf4:	15 96       	adiw	r26, 0x05	; 5
    2cf6:	2d 91       	ld	r18, X+
    2cf8:	3c 91       	ld	r19, X
    2cfa:	16 97       	sbiw	r26, 0x06	; 6
    2cfc:	42 17       	cp	r20, r18
    2cfe:	53 07       	cpc	r21, r19
    2d00:	78 f4       	brcc	.+30     	; 0x2d20 <fputc+0x48>
    2d02:	12 96       	adiw	r26, 0x02	; 2
    2d04:	ed 91       	ld	r30, X+
    2d06:	fc 91       	ld	r31, X
    2d08:	13 97       	sbiw	r26, 0x03	; 3
    2d0a:	80 83       	st	Z, r24
    2d0c:	12 96       	adiw	r26, 0x02	; 2
    2d0e:	2d 91       	ld	r18, X+
    2d10:	3c 91       	ld	r19, X
    2d12:	13 97       	sbiw	r26, 0x03	; 3
    2d14:	2f 5f       	subi	r18, 0xFF	; 255
    2d16:	3f 4f       	sbci	r19, 0xFF	; 255
    2d18:	13 96       	adiw	r26, 0x03	; 3
    2d1a:	3c 93       	st	X, r19
    2d1c:	2e 93       	st	-X, r18
    2d1e:	12 97       	sbiw	r26, 0x02	; 2
    2d20:	17 96       	adiw	r26, 0x07	; 7
    2d22:	2d 91       	ld	r18, X+
    2d24:	3c 91       	ld	r19, X
    2d26:	18 97       	sbiw	r26, 0x08	; 8
    2d28:	2f 5f       	subi	r18, 0xFF	; 255
    2d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2c:	18 96       	adiw	r26, 0x08	; 8
    2d2e:	3c 93       	st	X, r19
    2d30:	2e 93       	st	-X, r18
    2d32:	17 97       	sbiw	r26, 0x07	; 7
    2d34:	15 c0       	rjmp	.+42     	; 0x2d60 <fputc+0x88>
    2d36:	1d 96       	adiw	r26, 0x0d	; 13
    2d38:	ed 91       	ld	r30, X+
    2d3a:	fc 91       	ld	r31, X
    2d3c:	1e 97       	sbiw	r26, 0x0e	; 14
    2d3e:	30 97       	sbiw	r30, 0x00	; 0
    2d40:	19 f4       	brne	.+6      	; 0x2d48 <fputc+0x70>
    2d42:	8f ef       	ldi	r24, 0xFF	; 255
    2d44:	9f ef       	ldi	r25, 0xFF	; 255
    2d46:	0c c0       	rjmp	.+24     	; 0x2d60 <fputc+0x88>
    2d48:	8b 01       	movw	r16, r22
    2d4a:	ec 01       	movw	r28, r24
    2d4c:	09 95       	icall
    2d4e:	89 2b       	or	r24, r25
    2d50:	c1 f7       	brne	.-16     	; 0x2d42 <fputc+0x6a>
    2d52:	f8 01       	movw	r30, r16
    2d54:	87 81       	ldd	r24, Z+7	; 0x07
    2d56:	90 85       	ldd	r25, Z+8	; 0x08
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	90 87       	std	Z+8, r25	; 0x08
    2d5c:	87 83       	std	Z+7, r24	; 0x07
    2d5e:	ce 01       	movw	r24, r28
    2d60:	df 91       	pop	r29
    2d62:	cf 91       	pop	r28
    2d64:	1f 91       	pop	r17
    2d66:	0f 91       	pop	r16
    2d68:	08 95       	ret

Disassembly of section .text.atoi:

00002dfa <atoi>:
    2dfa:	cf 93       	push	r28
    2dfc:	9b 01       	movw	r18, r22
    2dfe:	48 2f       	mov	r20, r24
    2e00:	f9 01       	movw	r30, r18
    2e02:	84 91       	lpm	r24, Z
    2e04:	47 fd       	sbrc	r20, 7
    2e06:	80 81       	ld	r24, Z
    2e08:	80 32       	cpi	r24, 0x20	; 32
    2e0a:	c9 f1       	breq	.+114    	; 0x2e7e <atoi+0x84>
    2e0c:	68 2f       	mov	r22, r24
    2e0e:	08 2e       	mov	r0, r24
    2e10:	00 0c       	add	r0, r0
    2e12:	77 0b       	sbc	r23, r23
    2e14:	69 50       	subi	r22, 0x09	; 9
    2e16:	71 09       	sbc	r23, r1
    2e18:	65 30       	cpi	r22, 0x05	; 5
    2e1a:	71 05       	cpc	r23, r1
    2e1c:	80 f1       	brcs	.+96     	; 0x2e7e <atoi+0x84>
    2e1e:	8b 32       	cpi	r24, 0x2B	; 43
    2e20:	49 f5       	brne	.+82     	; 0x2e74 <atoi+0x7a>
    2e22:	a0 e0       	ldi	r26, 0x00	; 0
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	2f 5f       	subi	r18, 0xFF	; 255
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	4f 4f       	sbci	r20, 0xFF	; 255
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <atoi+0x38>
    2e2e:	a0 e0       	ldi	r26, 0x00	; 0
    2e30:	b0 e0       	ldi	r27, 0x00	; 0
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	ca e0       	ldi	r28, 0x0A	; 10
    2e38:	f9 01       	movw	r30, r18
    2e3a:	64 91       	lpm	r22, Z
    2e3c:	47 fd       	sbrc	r20, 7
    2e3e:	60 81       	ld	r22, Z
    2e40:	06 2e       	mov	r0, r22
    2e42:	00 0c       	add	r0, r0
    2e44:	77 0b       	sbc	r23, r23
    2e46:	60 53       	subi	r22, 0x30	; 48
    2e48:	71 09       	sbc	r23, r1
    2e4a:	6a 30       	cpi	r22, 0x0A	; 10
    2e4c:	71 05       	cpc	r23, r1
    2e4e:	60 f4       	brcc	.+24     	; 0x2e68 <atoi+0x6e>
    2e50:	c8 9f       	mul	r28, r24
    2e52:	f0 01       	movw	r30, r0
    2e54:	c9 9f       	mul	r28, r25
    2e56:	f0 0d       	add	r31, r0
    2e58:	11 24       	eor	r1, r1
    2e5a:	2f 5f       	subi	r18, 0xFF	; 255
    2e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5e:	4f 4f       	sbci	r20, 0xFF	; 255
    2e60:	cf 01       	movw	r24, r30
    2e62:	86 1b       	sub	r24, r22
    2e64:	97 0b       	sbc	r25, r23
    2e66:	e8 cf       	rjmp	.-48     	; 0x2e38 <atoi+0x3e>
    2e68:	ab 2b       	or	r26, r27
    2e6a:	69 f4       	brne	.+26     	; 0x2e86 <atoi+0x8c>
    2e6c:	91 95       	neg	r25
    2e6e:	81 95       	neg	r24
    2e70:	91 09       	sbc	r25, r1
    2e72:	09 c0       	rjmp	.+18     	; 0x2e86 <atoi+0x8c>
    2e74:	8d 32       	cpi	r24, 0x2D	; 45
    2e76:	d9 f6       	brne	.-74     	; 0x2e2e <atoi+0x34>
    2e78:	a1 e0       	ldi	r26, 0x01	; 1
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	d4 cf       	rjmp	.-88     	; 0x2e26 <atoi+0x2c>
    2e7e:	2f 5f       	subi	r18, 0xFF	; 255
    2e80:	3f 4f       	sbci	r19, 0xFF	; 255
    2e82:	4f 4f       	sbci	r20, 0xFF	; 255
    2e84:	bd cf       	rjmp	.-134    	; 0x2e00 <atoi+0x6>
    2e86:	cf 91       	pop	r28
    2e88:	08 95       	ret

Disassembly of section .text.strlen:

000039d8 <strlen>:
    39d8:	cf 92       	push	r12
    39da:	df 92       	push	r13
    39dc:	ef 92       	push	r14
    39de:	6b 01       	movw	r12, r22
    39e0:	e8 2e       	mov	r14, r24
    39e2:	a8 2f       	mov	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	fc 01       	movw	r30, r24
    39e8:	24 91       	lpm	r18, Z
    39ea:	a7 fd       	sbrc	r26, 7
    39ec:	20 81       	ld	r18, Z
    39ee:	22 23       	and	r18, r18
    39f0:	19 f0       	breq	.+6      	; 0x39f8 <strlen+0x20>
    39f2:	01 96       	adiw	r24, 0x01	; 1
    39f4:	a1 1d       	adc	r26, r1
    39f6:	f7 cf       	rjmp	.-18     	; 0x39e6 <strlen+0xe>
    39f8:	8c 19       	sub	r24, r12
    39fa:	9d 09       	sbc	r25, r13
    39fc:	ef 90       	pop	r14
    39fe:	df 90       	pop	r13
    3a00:	cf 90       	pop	r12
    3a02:	08 95       	ret

Disassembly of section .text.tolower:

00003b5e <tolower>:
    3b5e:	9c 01       	movw	r18, r24
    3b60:	21 54       	subi	r18, 0x41	; 65
    3b62:	31 09       	sbc	r19, r1
    3b64:	2a 31       	cpi	r18, 0x1A	; 26
    3b66:	31 05       	cpc	r19, r1
    3b68:	08 f4       	brcc	.+2      	; 0x3b6c <tolower+0xe>
    3b6a:	80 62       	ori	r24, 0x20	; 32
    3b6c:	08 95       	ret

Disassembly of section .text.toupper:

00003b4c <toupper>:
    3b4c:	9c 01       	movw	r18, r24
    3b4e:	21 56       	subi	r18, 0x61	; 97
    3b50:	31 09       	sbc	r19, r1
    3b52:	2a 31       	cpi	r18, 0x1A	; 26
    3b54:	31 05       	cpc	r19, r1
    3b56:	10 f4       	brcc	.+4      	; 0x3b5c <toupper+0x10>
    3b58:	8f 75       	andi	r24, 0x5F	; 95
    3b5a:	99 27       	eor	r25, r25
    3b5c:	08 95       	ret

Disassembly of section .text._Exit:

00003b76 <_Exit>:
    3b76:	0e 94 68 00 	call	0xd0	; 0xd0 <_exit>

Disassembly of section .text.__expand_heap:

000030d6 <__expand_heap>:
    30d6:	fc 01       	movw	r30, r24
    30d8:	40 81       	ld	r20, Z
    30da:	51 81       	ldd	r21, Z+1	; 0x01
    30dc:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <__brkval>
    30e0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <__brkval+0x1>
    30e4:	89 2b       	or	r24, r25
    30e6:	41 f4       	brne	.+16     	; 0x30f8 <__expand_heap+0x22>
    30e8:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <__malloc_heap_start>
    30ec:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <__malloc_heap_start+0x1>
    30f0:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <__brkval+0x1>
    30f4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <__brkval>
    30f8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__malloc_heap_end>
    30fc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__malloc_heap_end+0x1>
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	19 f4       	brne	.+6      	; 0x310a <__expand_heap+0x34>
    3104:	8d b7       	in	r24, 0x3d	; 61
    3106:	9e b7       	in	r25, 0x3e	; 62
    3108:	80 97       	sbiw	r24, 0x20	; 32
    310a:	20 91 44 01 	lds	r18, 0x0144	; 0x800144 <__brkval>
    310e:	30 91 45 01 	lds	r19, 0x0145	; 0x800145 <__brkval+0x1>
    3112:	28 17       	cp	r18, r24
    3114:	39 07       	cpc	r19, r25
    3116:	48 f0       	brcs	.+18     	; 0x312a <__expand_heap+0x54>
    3118:	8c e0       	ldi	r24, 0x0C	; 12
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__errno_val+0x1>
    3120:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__errno_val>
    3124:	80 e0       	ldi	r24, 0x00	; 0
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	08 95       	ret
    312a:	82 1b       	sub	r24, r18
    312c:	93 0b       	sbc	r25, r19
    312e:	84 17       	cp	r24, r20
    3130:	95 07       	cpc	r25, r21
    3132:	90 f3       	brcs	.-28     	; 0x3118 <__expand_heap+0x42>
    3134:	42 0f       	add	r20, r18
    3136:	53 1f       	adc	r21, r19
    3138:	50 93 45 01 	sts	0x0145, r21	; 0x800145 <__brkval+0x1>
    313c:	40 93 44 01 	sts	0x0144, r20	; 0x800144 <__brkval>
    3140:	c9 01       	movw	r24, r18
    3142:	08 95       	ret

Disassembly of section .text.__vsprintf:

00003af8 <__vsprintf>:
    3af8:	0f 93       	push	r16
    3afa:	1f 93       	push	r17
    3afc:	89 01       	movw	r16, r18
    3afe:	9a 01       	movw	r18, r20
    3b00:	46 2f       	mov	r20, r22
    3b02:	6f ef       	ldi	r22, 0xFF	; 255
    3b04:	7f e7       	ldi	r23, 0x7F	; 127
    3b06:	0e 94 98 14 	call	0x2930	; 0x2930 <__vsnprintf>
    3b0a:	1f 91       	pop	r17
    3b0c:	0f 91       	pop	r16
    3b0e:	08 95       	ret

Disassembly of section .text.__vsnprintf:

00002930 <__vsnprintf>:
    2930:	6f 92       	push	r6
    2932:	7f 92       	push	r7
    2934:	8f 92       	push	r8
    2936:	ef 92       	push	r14
    2938:	ff 92       	push	r15
    293a:	0f 93       	push	r16
    293c:	1f 93       	push	r17
    293e:	cf 93       	push	r28
    2940:	df 93       	push	r29
    2942:	cd b7       	in	r28, 0x3d	; 61
    2944:	de b7       	in	r29, 0x3e	; 62
    2946:	61 97       	sbiw	r28, 0x11	; 17
    2948:	0f b6       	in	r0, 0x3f	; 63
    294a:	f8 94       	cli
    294c:	de bf       	out	0x3e, r29	; 62
    294e:	0f be       	out	0x3f, r0	; 63
    2950:	cd bf       	out	0x3d, r28	; 61
    2952:	fe 01       	movw	r30, r28
    2954:	31 96       	adiw	r30, 0x01	; 1
    2956:	51 e1       	ldi	r21, 0x11	; 17
    2958:	df 01       	movw	r26, r30
    295a:	1d 92       	st	X+, r1
    295c:	5a 95       	dec	r21
    295e:	e9 f7       	brne	.-6      	; 0x295a <__vsnprintf+0x2a>
    2960:	a2 e0       	ldi	r26, 0x02	; 2
    2962:	b1 e0       	ldi	r27, 0x01	; 1
    2964:	ba 83       	std	Y+2, r27	; 0x02
    2966:	a9 83       	std	Y+1, r26	; 0x01
    2968:	9c 83       	std	Y+4, r25	; 0x04
    296a:	8b 83       	std	Y+3, r24	; 0x03
    296c:	77 ff       	sbrs	r23, 7
    296e:	09 c0       	rjmp	.+18     	; 0x2982 <__vsnprintf+0x52>
    2970:	8f e4       	ldi	r24, 0x4F	; 79
    2972:	90 e0       	ldi	r25, 0x00	; 0
    2974:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <__errno_val+0x1>
    2978:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__errno_val>
    297c:	8f ef       	ldi	r24, 0xFF	; 255
    297e:	9f ef       	ldi	r25, 0xFF	; 255
    2980:	19 c0       	rjmp	.+50     	; 0x29b4 <__vsnprintf+0x84>
    2982:	39 01       	movw	r6, r18
    2984:	84 2e       	mov	r8, r20
    2986:	7c 01       	movw	r14, r24
    2988:	61 50       	subi	r22, 0x01	; 1
    298a:	71 09       	sbc	r23, r1
    298c:	7f 83       	std	Y+7, r23	; 0x07
    298e:	6e 83       	std	Y+6, r22	; 0x06
    2990:	98 01       	movw	r18, r16
    2992:	68 2d       	mov	r22, r8
    2994:	a3 01       	movw	r20, r6
    2996:	cf 01       	movw	r24, r30
    2998:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <__vfprintf>
    299c:	48 85       	ldd	r20, Y+8	; 0x08
    299e:	59 85       	ldd	r21, Y+9	; 0x09
    29a0:	2e 81       	ldd	r18, Y+6	; 0x06
    29a2:	3f 81       	ldd	r19, Y+7	; 0x07
    29a4:	42 17       	cp	r20, r18
    29a6:	53 07       	cpc	r21, r19
    29a8:	08 f4       	brcc	.+2      	; 0x29ac <__vsnprintf+0x7c>
    29aa:	9a 01       	movw	r18, r20
    29ac:	f7 01       	movw	r30, r14
    29ae:	e2 0f       	add	r30, r18
    29b0:	f3 1f       	adc	r31, r19
    29b2:	10 82       	st	Z, r1
    29b4:	61 96       	adiw	r28, 0x11	; 17
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	df 91       	pop	r29
    29c2:	cf 91       	pop	r28
    29c4:	1f 91       	pop	r17
    29c6:	0f 91       	pop	r16
    29c8:	ff 90       	pop	r15
    29ca:	ef 90       	pop	r14
    29cc:	8f 90       	pop	r8
    29ce:	7f 90       	pop	r7
    29d0:	6f 90       	pop	r6
    29d2:	08 95       	ret

Disassembly of section .text.__vfprintf:

000039a8 <__vfprintf>:
    39a8:	a2 e0       	ldi	r26, 0x02	; 2
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	ea ed       	ldi	r30, 0xDA	; 218
    39ae:	fc e1       	ldi	r31, 0x1C	; 28
    39b0:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__prologue_saves__+0x1c>
    39b4:	8c 01       	movw	r16, r24
    39b6:	3a 83       	std	Y+2, r19	; 0x02
    39b8:	29 83       	std	Y+1, r18	; 0x01
    39ba:	9e 01       	movw	r18, r28
    39bc:	2f 5f       	subi	r18, 0xFF	; 255
    39be:	3f 4f       	sbci	r19, 0xFF	; 255
    39c0:	0e 94 22 16 	call	0x2c44	; 0x2c44 <__printf_core>
    39c4:	f8 01       	movw	r30, r16
    39c6:	20 81       	ld	r18, Z
    39c8:	24 ff       	sbrs	r18, 4
    39ca:	02 c0       	rjmp	.+4      	; 0x39d0 <__vfprintf+0x28>
    39cc:	8f ef       	ldi	r24, 0xFF	; 255
    39ce:	9f ef       	ldi	r25, 0xFF	; 255
    39d0:	22 96       	adiw	r28, 0x02	; 2
    39d2:	e4 e0       	ldi	r30, 0x04	; 4
    39d4:	0c 94 c7 1c 	jmp	0x398e	; 0x398e <__epilogue_restores__+0x1c>

Disassembly of section .text.libgcc.prologue:

0000393a <__prologue_saves__>:
    393a:	2f 92       	push	r2
    393c:	3f 92       	push	r3
    393e:	4f 92       	push	r4
    3940:	5f 92       	push	r5
    3942:	6f 92       	push	r6
    3944:	7f 92       	push	r7
    3946:	8f 92       	push	r8
    3948:	9f 92       	push	r9
    394a:	af 92       	push	r10
    394c:	bf 92       	push	r11
    394e:	cf 92       	push	r12
    3950:	df 92       	push	r13
    3952:	ef 92       	push	r14
    3954:	ff 92       	push	r15
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	cf 93       	push	r28
    395c:	df 93       	push	r29
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	ca 1b       	sub	r28, r26
    3964:	db 0b       	sbc	r29, r27
    3966:	0f b6       	in	r0, 0x3f	; 63
    3968:	f8 94       	cli
    396a:	de bf       	out	0x3e, r29	; 62
    396c:	0f be       	out	0x3f, r0	; 63
    396e:	cd bf       	out	0x3d, r28	; 61
    3970:	09 94       	ijmp

Disassembly of section .text.libgcc.prologue:

00003972 <__epilogue_restores__>:
    3972:	2a 88       	ldd	r2, Y+18	; 0x12
    3974:	39 88       	ldd	r3, Y+17	; 0x11
    3976:	48 88       	ldd	r4, Y+16	; 0x10
    3978:	5f 84       	ldd	r5, Y+15	; 0x0f
    397a:	6e 84       	ldd	r6, Y+14	; 0x0e
    397c:	7d 84       	ldd	r7, Y+13	; 0x0d
    397e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3980:	9b 84       	ldd	r9, Y+11	; 0x0b
    3982:	aa 84       	ldd	r10, Y+10	; 0x0a
    3984:	b9 84       	ldd	r11, Y+9	; 0x09
    3986:	c8 84       	ldd	r12, Y+8	; 0x08
    3988:	df 80       	ldd	r13, Y+7	; 0x07
    398a:	ee 80       	ldd	r14, Y+6	; 0x06
    398c:	fd 80       	ldd	r15, Y+5	; 0x05
    398e:	0c 81       	ldd	r16, Y+4	; 0x04
    3990:	1b 81       	ldd	r17, Y+3	; 0x03
    3992:	aa 81       	ldd	r26, Y+2	; 0x02
    3994:	b9 81       	ldd	r27, Y+1	; 0x01
    3996:	ce 0f       	add	r28, r30
    3998:	d1 1d       	adc	r29, r1
    399a:	0f b6       	in	r0, 0x3f	; 63
    399c:	f8 94       	cli
    399e:	de bf       	out	0x3e, r29	; 62
    39a0:	0f be       	out	0x3f, r0	; 63
    39a2:	cd bf       	out	0x3d, r28	; 61
    39a4:	ed 01       	movw	r28, r26
    39a6:	08 95       	ret
